USE [xUDS_PMPM_2020CY]
GO
/****** Object:  StoredProcedure [analytics].[step_0_determine_credibility_thresholds]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Tola Kalejaiye
-- Create date: 3/19/2020
-- Description:	Determine  thresholds for market credibility to be used in the
---              creation of the tpv and non-tpve factors
-- =============================================
CREATE PROCEDURE [analytics].[step_0_determine_credibility_thresholds]
AS
BEGIN

	SET NOCOUNT ON;



--1.)Build table shell from previous upload
SELECT  TOP 0 * INTO xUDS_PMPM_2020CY.analytics.credibility FROM xUDS_PMPM_2019CY.analytics.credibility

--2.)  Create credibility threshold 


truncate table xUDS_PMPM_2020CY.analytics.credibility
Declare	@schema_name		VARCHAR(20)	,					
        @SQL				VARCHAR(MAX)

Declare schema_cursor cursor for
	Select [schema_name]
	from process.data_status_tracking 
	where include_in_uds_pmpm = 1 
     and network_type='BlueCard PPO' --don't why altnets are not included
and [data_source] <> 'Proxy'

OPEN schema_cursor

	FETCH NEXT FROM schema_cursor
	INTO @schema_name 
	
	WHILE @@FETCH_STATUS = 0
	BEGIN


----------- Pull info to investigate credibility thresholds -----------	   
set @sql='insert into xUDS_PMPM_2020CY.analytics.credibility with (tablock)
select  
       a.[chp_carrier_id],  
       a.[pdr_product_id],    
       a.zip3_before_mapped as zip3, 
	   a.benefit_payment_contract_status,
	   a.claim_type,
    sum(a.[inpatient_days]) as ip_days,
	sum(a.[adjusted_billed_amount]) as tot_billed


from [xUDS_PMPM_2020CY].'+@schema_name+'.[vw_proc_claims_financial_20_detail]  as a

where atl_grouper_exclusion_flag=''N''  
and [uds_pmpm_exclusion_flag] = ''N''  
and exclude_medical_benefit_flag=''N''
and home_hosted_indicator=''HOME''
group by  
     a.[chp_carrier_id],  
       a.[pdr_product_id],    
       a.zip3_before_mapped, 
	    a.benefit_payment_contract_status,
	   a.claim_type
	

'
  EXEC(@SQL)
  PRINT (@SQL)
 FETCH NEXT FROM schema_cursor 
        INTO @schema_name
        END 
        CLOSE schema_cursor
        DEALLOCATE schema_cursor



--3.) Select markets
drop table if exists #mkts
select distinct zip3, [chp_market_subsection_name] as market, ind_ca_id as carrier_id, left(ca_short_name,2) as [state]
into #mkts
from  [xClaims_2020CY].[reference].[Mapping, Standard:  ValueQuest Markets]


--select * from #mkts where zip3 in('187','184','188','185')

select * from [xClaims_2020CY].reference.ref_vqe_plan_prod_service_area_zip3
where zip3 in('187','184','188','185')

--4.) Final credibility table
select a.*, m.market, [State]
from  xUDS_PMPM_2020CY.analytics.credibility as a
left join #mkts m
on a.zip3=m.zip3
and a.chp_carrier_id= case when m.zip3 in ('187','184','188','185') then 958 else m.carrier_id end

END
GO
/****** Object:  StoredProcedure [analytics].[Step_1_create_MP_iSight_Data]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
---- =============================================
---- Author:		Tola Kalejaiye
---- Create date: 3/18/2020
---- Description:	Creating Muliplan data for Plans: BCBS TN (no iSight), BCBS MN (iSight), BCBS MA (iSight) and Anthem
---- =============================================
CREATE PROCEDURE  [analytics].[Step_1_create_MP_iSight_Data]
 AS
BEGIN
	
	SET NOCOUNT ON;

--/**********************************************************************************************************************************************************
--*                                                                                                                                                         *
--*                                                    BCBS MN DATA                                                                                         *
--***********************************************************************************************************************************************************/
 
--NOTES: Multiplan Classifier*
--MN DIS    - Data iSight
--MN FNX    - Negotiated Claims
--MN NEGDIS - Fee negotiations with iSight wrap: Claims in MN NEGDIS can be priced with Data iSight if negotiations are unsuccessful. Status was undecided at the time of claim adjudication.


-- dup exist in bcbsmn_multiplan_data however they do not in the trace table, check for this ([Claim ID] = [original claim number])

---MN data did not include any charges but needed to select claims where the billed amount >=1000
drop table if exists #temp_mn
;with CTE AS (select distinct a.[ORIGINAL CLAIM NUMBER]  
from  (select [ORIGINAL CLAIM NUMBER], sum([billed amount]) as billed from  xclaims_2020CY.p911_MNB1.traceability_claims
		group by [ORIGINAL CLAIM NUMBER])a
inner join ( select distinct [Claim ID] from xUDS_PMPM_2020CY.analytics.bcbsmn_multiplan_data )as m
on a.[original claim number]=[Claim ID])

Select distinct a.[PDR PRODUCT ID], a.[ROW NUMBER] 
into  #temp_mn
from xclaims_2020CY.p911_MNB1.traceability_claims a
inner join cte m
on a.[original claim number]=m.[ORIGINAL CLAIM NUMBER]


 ---Re-bucket OX claims for those claims submitted by plan as MP or where the member is held harmless as OC

drop table if exists #temp_file_mn
select  
       a.[chp_carrier_id],  
       a.[pdr_product_id],    
       a.zip3, 
	   a.[benefit_payment_contract_Status],
	   case when t.[row number] is null then 'N' else 'Y' end as mp_found,
	   a.claim_type as ctype,
	   case when t.[ROW NUMBER] is not null  and a.benefit_payment_contract_status = 'OX' then 'OC'  
	   else a.benefit_payment_contract_status end as new_bucket,
    sum(a.[adjusted_billed_amount]) as billed,
	sum(a.[allowed_amount]) as allowed,
	sum(a.admits) as admits,
	sum(a.actual_utilization) as utilization
into #temp_file_mn
from xUDS_PMPM_2020CY.[p911_MNB1].vw_proc_claims_financial_20_detail  as a
left join #temp_mn as t
on replace(a.chp_row_id,left(chp_row_id,4),'') =t.[ROW NUMBER]
and a.[pdr_product_id]=t.[PDR PRODUCT ID]
join (select distinct [row number] from xClaims_2020CY.p911_MNB1.traceability_claims where [ITS PROVIDER]='Y') B --limiting to ITS providers. ITS provider field not in the detail table
on replace(a.chp_row_id,left(chp_row_id,4),'')=b.[ROW NUMBER]

where atl_grouper_exclusion_flag='N'
and [flag_exclude_groups] = 'N' 
and exclude_medical_benefit_flag='N'
and insurance_arrangement='S'
and exclusion_flag='N'



group by
 a.[chp_carrier_id],  
       a.[pdr_product_id],    
       a.zip3, 
	   a.[benefit_payment_contract_Status],
	   case when t.[row number] is null then 'N' else 'Y' end,
	   a.claim_type ,
	   case when t.[ROW NUMBER] is not null and a.benefit_payment_contract_status = 'OX'  then 'OC'  
	   else a.benefit_payment_contract_status end


---Select final needed fields
drop table if exists xUDS_PMPM_2020CY.analytics.bcbsmn_mp_data
select
a.[chp_carrier_id],  
       a.[pdr_product_id],    
       a.zip3, 
	   a.ctype,
sum(a.[billed]) as tot_billed,
sum(case when  new_bucket='OC' then a.[billed] else 0 end) as oc_billed,
sum(case when  new_bucket='OX' then a.[billed] else 0 end) as ox_billed,
sum(case when  new_bucket='OC' then a.[allowed] else 0 end) as oc_allowed,
sum(case when  new_bucket='OX' then a.[allowed] else 0 end) as ox_allowed,
sum(case when  new_bucket in('OC', 'OX') then a.[billed] else 0 end) as oon_billed,
sum(case when  a.new_bucket='OC' then a.[admits] else 0 end) as oc_admits,
sum(case when  a.new_bucket='OX'  then a.[admits] else 0 end) as ox_admits,
sum(a.[admits]) as tot_admits,
sum(case when  new_bucket='OC'  then a.[utilization] else 0 end) as oc_utilization,
sum(case when  new_bucket='OX'  then a.[utilization] else 0 end) as ox_utilization,
sum(a.utilization) as tot_utilization
into xUDS_PMPM_2020CY.analytics.bcbsmn_mp_data
from #temp_file_mn as a

group by  
       a.[chp_carrier_id],  
       a.[pdr_product_id],    
       a.zip3, 
	   a.ctype 




select sum(tot_billed) as tot_billed
      ,sum(oc_billed) as oc_billed
      ,sum(ox_billed) as ox_billed
	  ,sum(oc_allowed) as oc_allow
	  ,sum(ox_allowed) as ox_allow
	  ,sum(oon_billed) as oon
from xUDS_PMPM_2020CY.analytics.bcbsmn_mp_data









/**********************************************************************************************************************************************************
*                                                                                                                                                         *
*                                                    BCBS MA                                                                                              *
***********************************************************************************************************************************************************/
--First, create list of chp row IDs, limit to claims where charge is >=1000 per Molly Loftus Email
 
--Data iSight pricing (Value = D) 
--Multiplan Fee Negotiation (Value = V)
drop table if exists #temp_MA
;with CTE AS (select distinct a.[ORIGINAL CLAIM NUMBER] 
from  (select [ORIGINAL CLAIM NUMBER], sum([billed amount]) as billed from  xclaims_2020CY.p884_MAB1.traceability_claims
         group by [ORIGINAL CLAIM NUMBER])as a
inner join ( select distinct [Int Clm Num] from xUDS_PMPM_2020CY.analytics.bcbsma_multiplan_data )as m
on left (a.[original claim number],13)=left( concat('0',m.[Int Clm Num]),13))
 
Select distinct a.[PDR PRODUCT ID], a.[ROW NUMBER]  
into #temp_MA
from xclaims_2020CY.p884_MAB1.traceability_claims a
inner join cte m
on a.[original claim number] = m.[ORIGINAL CLAIM NUMBER] 

------Re-bucket OX claims for those claims submitted by plan as MP or where the member is held harmless as OC

drop table if exists #temp_file_MA
select  
       a.[chp_carrier_id],  
       a.[pdr_product_id],    
       a.zip3, 
	   a.[benefit_payment_contract_Status],
	   case when t.[row number] is null then 'N' else 'Y' end as mp_found,
	   a.claim_type as ctype,
	   case when t.[ROW NUMBER] is not null and a.benefit_payment_contract_status = 'OX' then 'OC'  
	   else a.benefit_payment_contract_status end as new_bucket,
    sum(a.[adjusted_billed_amount]) as billed,
	sum(a.[adjusted_allowed_amount]) as allowed,
	sum(a.admits) as admits,
	sum(a.actual_utilization) as utilization
into #temp_file_ma
from xUDS_PMPM_2020CY.[p884_MAB1].vw_proc_claims_financial_20_detail  as a
left join #temp_MA as t
on replace(a.chp_row_id,left(chp_row_id,4),'') =t.[ROW NUMBER]
and a.[pdr_product_id]=t.[PDR PRODUCT ID]

where atl_grouper_exclusion_flag='N'
and [flag_exclude_groups] = 'N' 
and exclude_medical_benefit_flag='N'
and exclusion_flag='N'

group by
 a.[chp_carrier_id],  
       a.[pdr_product_id],    
       a.zip3, 
	   a.[benefit_payment_contract_Status],
	   case when t.[row number] is null then 'N' else 'Y' end,
	   a.claim_type ,
	   case when t.[ROW NUMBER] is not null   and a.benefit_payment_contract_status = 'OX'  then 'OC'  
	   else a.benefit_payment_contract_status end





---Select final needed fields
drop table if exists xUDS_PMPM_2020CY.analytics.bcbsma_mp_data
select
a.[chp_carrier_id],
       a.[pdr_product_id],    
       a.zip3, 
	   a.ctype,
sum(a.[billed]) as tot_billed,
sum(case when  new_bucket='OC' then a.[billed] else 0 end) as oc_billed,
sum(case when  new_bucket='OX' then a.[billed] else 0 end) as ox_billed,
sum(case when  new_bucket='OC' then a.[allowed] else 0 end) as oc_allowed,
sum(case when  new_bucket='OX' then a.[allowed] else 0 end) as ox_allowed,
sum(case when  new_bucket in('OC', 'OX') then a.[billed] else 0 end) as oon_billed,
sum(case when  a.new_bucket='OC' then a.[admits] else 0 end) as oc_admits,
sum(case when  a.new_bucket='OX'  then a.[admits] else 0 end) as ox_admits,
sum(a.[admits]) as tot_admits,
sum(case when  new_bucket='OC'  then a.[utilization] else 0 end) as oc_utilization,
sum(case when  new_bucket='OX'  then a.[utilization] else 0 end) as ox_utilization,
sum(a.utilization) as tot_utilization
into xUDS_PMPM_2020CY.analytics.bcbsma_mp_data
from #temp_file_ma as a

group by  
       a.[chp_carrier_id],  
       a.[pdr_product_id],    
       a.zip3, 
	   a.ctype 

select sum(tot_billed) as tot_billed
      ,sum(oc_billed) as oc_billed
      ,sum(ox_billed) as ox_billed
	  ,sum(oc_allowed) as oc_allow
	  ,sum(ox_allowed) as ox_allow
	  ,sum(oon_billed) as oon
from xUDS_PMPM_2020CY.analytics.bcbsma_mp_data
  
--/**********************************************************************************************************************************************************
--*                                                                                                                                                         *
--*                                                    BCBS TN DATA                                                                                       *
--***********************************************************************************************************************************************************/
--REMOVE DUPLICATES
Drop table if exists xUDS_PMPM_2020CY.analytics.bcbstn_multiplan_data_nodup
select a.* 
into xUDS_PMPM_2020CY.analytics.bcbstn_multiplan_data_nodup from
(select *, 
 ROW_NUMBER() over(partition by BHI_CLM_NO,  BHI_MBR_NO , bcbsa_prd_id order by  BHI_CLM_NO desc) as row_num
from xUDS_PMPM_2020CY.analytics.bcbstn_multiplan_data) a
where row_num =1


Drop table if exists #temp_tn
  select distinct a.CARRIER_ID, a.[PDR PRODUCT ID], a.[ORIGINAL CLAIM NUMBER]
  into #temp_tn
from  (select CARRIER_ID, [PDR PRODUCT ID],[ORIGINAL CLAIM NUMBER], sum([billed amount]) as billed 
          from  xclaims_2020CY.p950_TNL2.traceability_claims      --TNL2
         group by CARRIER_ID, [PDR PRODUCT ID],[ORIGINAL CLAIM NUMBER])as a
inner join (select * from xUDS_PMPM_2020CY.analytics.bcbstn_multiplan_data_nodup ) as m
on a.[original claim number]=m.BHI_CLM_NO 

Drop table if exists #temp_tn_v1
Select distinct a.[PDR PRODUCT ID], a.[ROW NUMBER]
into  #temp_tn_v1
from xclaims_2020CY.p950_TNL2.traceability_claims a     --TNL2
inner join #temp_tn m
on a.[original claim number]=m.[original claim number] 
and a.[PDR PRODUCT ID] = m.[PDR PRODUCT ID]
union all
Select distinct a.[PDR PRODUCT ID], a.[ROW NUMBER]
from xclaims_2020CY.p950_TNB2.traceability_claims  a   --TNB2
inner join #temp_tn m
on a.[original claim number]=m.[original claim number]
and a.[PDR PRODUCT ID] = m.[PDR PRODUCT ID]

 --use this if they dont provide provider cost in excel, this pulls them if they dont to over 1000 only
---Re-bucket OX claims for those claims submitted by plan as MP or where the member is held harmless as OC

drop table if exists #temp_file_tn
select  
       a.[chp_carrier_id],  
       a.[pdr_product_id],    
       a.zip3, 
	   a.[benefit_payment_contract_Status],
	   case when t.[row number] is null then 'N' else 'Y' end as mp_found,
	   a.claim_type as ctype,
	   case when t.[ROW NUMBER] is not null  and a.benefit_payment_contract_status = 'OX' then 'OC'  
	   else a.benefit_payment_contract_status end as new_bucket,
    sum(a.[adjusted_billed_amount]) as billed,
	sum(a.[allowed_amount]) as allowed,
	sum(a.admits) as admits,
	sum(a.actual_utilization) as utilization
into #temp_file_tn
from xUDS_PMPM_2020CY.p950_TNL2.vw_proc_claims_financial_20_detail  as a
left join #temp_tn_v1 as t
on replace(a.chp_row_id,left(chp_row_id,4),'') =t.[ROW NUMBER]
   and a.[pdr_product_id]=t.[PDR PRODUCT ID]
join (select distinct [row number] from xClaims_2020CY.p950_TNL2.traceability_claims where [ITS PROVIDER]='Y') B --limiting to ITS providers. ITS provider field not in the detail table
on replace(a.chp_row_id,left(chp_row_id,4),'')=b.[ROW NUMBER]

where atl_grouper_exclusion_flag='N'
and [flag_exclude_groups] = 'N' 
and exclude_medical_benefit_flag='N'
and insurance_arrangement='S'
and exclusion_flag='N'


group by
 a.[chp_carrier_id],  
       a.[pdr_product_id],    
       a.zip3, 
	   a.[benefit_payment_contract_Status],
	   case when t.[row number] is null then 'N' else 'Y' end,
	   a.claim_type ,
	   case when t.[ROW NUMBER] is not null and a.benefit_payment_contract_status = 'OX'  then 'OC'  
	   else a.benefit_payment_contract_status end

UNION ALL

select  
       a.[chp_carrier_id],  
       a.[pdr_product_id],    
       a.zip3, 
	   a.[benefit_payment_contract_Status],
	   case when t.[row number] is null then 'N' else 'Y' end as mp_found,
	   a.claim_type as ctype,
	   case when t.[ROW NUMBER] is not null  and a.benefit_payment_contract_status = 'OX' then 'OC'  
	   else a.benefit_payment_contract_status end as new_bucket,
    sum(a.[adjusted_billed_amount]) as billed,
	sum(a.[allowed_amount]) as allowed,
	sum(a.admits) as admits,
	sum(a.actual_utilization) as utilization
from xUDS_PMPM_2020CY.p950_TNB2.vw_proc_claims_financial_20_detail  as a
left join #temp_tn_v1 as t
on replace(a.chp_row_id,left(chp_row_id,4),'') =t.[ROW NUMBER]
   and a.[pdr_product_id]=t.[PDR PRODUCT ID]
join (select distinct [row number] from xClaims_2020CY.p950_TNB2.traceability_claims where [ITS PROVIDER]='Y') B --limiting to ITS providers. ITS provider field not in the detail table
on replace(a.chp_row_id,left(chp_row_id,4),'')=b.[ROW NUMBER]

where atl_grouper_exclusion_flag='N'
and [flag_exclude_groups] = 'N' 
and exclude_medical_benefit_flag='N'
and insurance_arrangement='S'
and exclusion_flag='N'


group by
 a.[chp_carrier_id],  
       a.[pdr_product_id],    
       a.zip3, 
	   a.[benefit_payment_contract_Status],
	   case when t.[row number] is null then 'N' else 'Y' end,
	   a.claim_type ,
	   case when t.[ROW NUMBER] is not null and a.benefit_payment_contract_status = 'OX'  then 'OC'  
	   else a.benefit_payment_contract_status end

---Select final needed fields
drop table if exists xUDS_PMPM_2020CY.analytics.bcbstn_mp_data
select
a.[chp_carrier_id],
       a.[pdr_product_id],    
       a.zip3, 
	   a.ctype,
sum(a.[billed]) as tot_billed,
sum(case when  new_bucket='OC' then a.[billed] else 0 end) as oc_billed,
sum(case when  new_bucket='OX' then a.[billed] else 0 end) as ox_billed,
sum(case when  new_bucket='OC' then a.[allowed] else 0 end) as oc_allowed,
sum(case when  new_bucket='OX' then a.[allowed] else 0 end) as ox_allowed,
sum(case when  new_bucket in('OC', 'OX') then a.[billed] else 0 end) as oon_billed,
sum(case when  a.new_bucket='OC' then a.[admits] else 0 end) as oc_admits,
sum(case when  a.new_bucket='OX'  then a.[admits] else 0 end) as ox_admits,
sum(a.[admits]) as tot_admits,
sum(case when  new_bucket='OC'  then a.[utilization] else 0 end) as oc_utilization,
sum(case when  new_bucket='OX'  then a.[utilization] else 0 end) as ox_utilization,
sum(a.utilization) as tot_utilization
into xUDS_PMPM_2020CY.analytics.bcbstn_mp_data
from #temp_file_ma as a

group by  
       a.[chp_carrier_id],  
       a.[pdr_product_id],    
       a.zip3, 
	   a.ctype 

select sum(tot_billed) as tot_billed
      ,sum(oc_billed) as oc_billed
      ,sum(ox_billed) as ox_billed
	  ,sum(oc_allowed) as oc_allow
	  ,sum(ox_allowed) as ox_allow
	  ,sum(oon_billed) as oon
from xUDS_PMPM_2020CY.analytics.bcbstn_mp_data







/**********************************************************************************************************************************************************
*                                                                                                                                                         *
*                                                   HORIZON'S DATA                                                                                        *
***********************************************************************************************************************************************************/

---no OX claims where  the HH flag is Y and Vendor code is 'Y' OR HH is Y for all 3 products
--only include NJB1 and NJL2 Per Molly. NJ3E as an EPO product should technically not have OON covered allowed amount
-------Simply aggregating data as there is no need to re-bucket ox claims
 Drop table if exists xUDS_PMPM_2020CY.analytics.horizon_mp_data
select  
     a.[chp_carrier_id],  
     a.[pdr_product_id],    
     a.zip3, 
a.claim_type as ctype,
sum(a.[adjusted_billed_amount]) as tot_billed,
sum(case when  a.benefit_payment_contract_status='OC'  then a.[adjusted_billed_amount] else 0 end) as oc_billed,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[adjusted_billed_amount] else 0 end) as ox_billed,
sum(case when  a.benefit_payment_contract_status='OC'  then a.[adjusted_allowed_amount] else 0 end) as oc_allowed,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[adjusted_allowed_amount] else 0 end) as ox_allowed,
sum(case when  a.benefit_payment_contract_status in ('OC', 'OX') then a.[adjusted_billed_amount] else 0 end) as oon_billed,

sum(case when  a.benefit_payment_contract_status='OC'  then a.[admits] else 0 end) as oc_admits,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[admits] else 0 end) as ox_admits,
sum(a.[admits]) as tot_admits,

sum(case when  a.benefit_payment_contract_status='OC'  then a.[actual_utilization] else 0 end) as oc_utilization,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[actual_utilization] else 0 end) as ox_utilization,
sum(a.[actual_utilization]) as tot_utilization
into xUDS_PMPM_2020CY.analytics.horizon_mp_data
from xUDS_PMPM_2020CY.p880_NJB1.vw_proc_claims_financial_20_detail  as a

where atl_grouper_exclusion_flag='N' 
and flag_exclude_groups='N'
and exclude_medical_benefit_flag = 'N'  
and exclusion_flag='N'

group by  
        a.[chp_carrier_id],  
        a.[pdr_product_id],    
        a.zip3, 
		a.claim_type

UNION ALL

select  
     a.[chp_carrier_id],  
     a.[pdr_product_id],    
     a.zip3, 
a.claim_type as ctype,
sum(a.[adjusted_billed_amount]) as tot_billed,
sum(case when  a.benefit_payment_contract_status='OC'  then a.[adjusted_billed_amount] else 0 end) as oc_billed,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[adjusted_billed_amount] else 0 end) as ox_billed,
sum(case when  a.benefit_payment_contract_status='OC'  then a.[adjusted_allowed_amount] else 0 end) as oc_allowed,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[adjusted_allowed_amount] else 0 end) as ox_allowed,
sum(case when  a.benefit_payment_contract_status in ('OC', 'OX') then a.[adjusted_billed_amount] else 0 end) as oon_billed,

sum(case when  a.benefit_payment_contract_status='OC'  then a.[admits] else 0 end) as oc_admits,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[admits] else 0 end) as ox_admits,
sum(a.[admits]) as tot_admits,

sum(case when  a.benefit_payment_contract_status='OC'  then a.[actual_utilization] else 0 end) as oc_utilization,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[actual_utilization] else 0 end) as ox_utilization,
sum(a.[actual_utilization]) as tot_utilization
from xUDS_PMPM_2020CY.p880_NJL2.vw_proc_claims_financial_20_detail  as a

where atl_grouper_exclusion_flag='N' 
and flag_exclude_groups='N'
and exclude_medical_benefit_flag = 'N'  
and exclusion_flag='N'

group by  
        a.[chp_carrier_id],  
        a.[pdr_product_id],    
        a.zip3, 
		a.claim_type



/**********************************************************************************************************************************************************
*                                                                                                                                                         *
*                                                   BCBS AZ DATA                                                                                        *
***********************************************************************************************************************************************************/
--limit to fully insured only (member_funding_arrangements = 'I')
---no OX claims where  the HH flag is Y and Vendor code is 'Y' OR HH is Y for all 3 products



-------Simply aggregating data as there is no need to re-bucket ox claims
 Drop table if exists xUDS_PMPM_2020CY.analytics.bcbsaz_mp_data
select  
     a.[chp_carrier_id],  
     a.[pdr_product_id],    
     a.zip3, 
a.claim_type as ctype,
sum(a.[adjusted_billed_amount]) as tot_billed,
sum(case when  a.benefit_payment_contract_status='OC'  then a.[adjusted_billed_amount] else 0 end) as oc_billed,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[adjusted_billed_amount] else 0 end) as ox_billed,
sum(case when  a.benefit_payment_contract_status='OC'  then a.[adjusted_allowed_amount] else 0 end) as oc_allowed,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[adjusted_allowed_amount] else 0 end) as ox_allowed,
sum(case when  a.benefit_payment_contract_status in ('OC', 'OX') then a.[adjusted_billed_amount] else 0 end) as oon_billed,

sum(case when  a.benefit_payment_contract_status='OC'  then a.[admits] else 0 end) as oc_admits,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[admits] else 0 end) as ox_admits,
sum(a.[admits]) as tot_admits,

sum(case when  a.benefit_payment_contract_status='OC'  then a.[actual_utilization] else 0 end) as oc_utilization,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[actual_utilization] else 0 end) as ox_utilization,
sum(a.[actual_utilization]) as tot_utilization
into xUDS_PMPM_2020CY.analytics.bcbsaz_mp_data
from xUDS_PMPM_2020CY.p893_AZB1.vw_proc_claims_financial_20_detail  as a

 where atl_grouper_exclusion_flag='N' 
and flag_exclude_groups='N'
and exclude_medical_benefit_flag = 'N'  
and exclusion_flag='N'
and insurance_arrangement='f'

group by  
        a.[chp_carrier_id],  
        a.[pdr_product_id],    
        a.zip3, 
		a.claim_type


UNION ALL

select  
     a.[chp_carrier_id],  
     a.[pdr_product_id],    
     a.zip3, 
a.claim_type as ctype,
sum(a.[adjusted_billed_amount]) as tot_billed,
sum(case when  a.benefit_payment_contract_status='OC'  then a.[adjusted_billed_amount] else 0 end) as oc_billed,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[adjusted_billed_amount] else 0 end) as ox_billed,
sum(case when  a.benefit_payment_contract_status='OC'  then a.[adjusted_allowed_amount] else 0 end) as oc_allowed,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[adjusted_allowed_amount] else 0 end) as ox_allowed,
sum(case when  a.benefit_payment_contract_status in ('OC', 'OX') then a.[adjusted_billed_amount] else 0 end) as oon_billed,

sum(case when  a.benefit_payment_contract_status='OC'  then a.[admits] else 0 end) as oc_admits,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[admits] else 0 end) as ox_admits,
sum(a.[admits]) as tot_admits,

sum(case when  a.benefit_payment_contract_status='OC'  then a.[actual_utilization] else 0 end) as oc_utilization,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[actual_utilization] else 0 end) as ox_utilization,
sum(a.[actual_utilization]) as tot_utilization
from xUDS_PMPM_2020CY.p893_AZL1.vw_proc_claims_financial_20_detail  as a

 where atl_grouper_exclusion_flag='N' 
and flag_exclude_groups='N'
and exclude_medical_benefit_flag = 'N'  
and exclusion_flag='N'
and insurance_arrangement='f'

group by  
        a.[chp_carrier_id],  
        a.[pdr_product_id],    
        a.zip3, 
		a.claim_type


/**********************************************************************************************************************************************************
*                                                                                                                                                         *
*                                                    BCBS HCSC DATA                                                                                         *
***********************************************************************************************************************************************************/


---------no OX claims where  the HH flag is Y and Vendor code is 'Y' OR HH is Y for all 3 products
--Checked in UDS discount

 -------Simply aggregating data as there is no need to re-bucket ox claims

--HCSC (IL)
 Drop table if exists xUDS_PMPM_2020CY.analytics.hcsc_mp_data
select  
     a.[chp_carrier_id],  
     a.[pdr_product_id],    
     a.zip3, 
a.claim_type as ctype,
sum(a.[adjusted_billed_amount]) as tot_billed,
sum(case when  a.benefit_payment_contract_status='OC'  then a.[adjusted_billed_amount] else 0 end) as oc_billed,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[adjusted_billed_amount] else 0 end) as ox_billed,
sum(case when  a.benefit_payment_contract_status='OC'  then a.[adjusted_allowed_amount] else 0 end) as oc_allowed,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[adjusted_allowed_amount] else 0 end) as ox_allowed,
sum(case when  a.benefit_payment_contract_status in ('OC', 'OX') then a.[adjusted_billed_amount] else 0 end) as oon_billed,

sum(case when  a.benefit_payment_contract_status='OC'  then a.[admits] else 0 end) as oc_admits,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[admits] else 0 end) as ox_admits,
sum(a.[admits]) as tot_admits,

sum(case when  a.benefit_payment_contract_status='OC'  then a.[actual_utilization] else 0 end) as oc_utilization,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[actual_utilization] else 0 end) as ox_utilization,
sum(a.[actual_utilization]) as tot_utilization
into xUDS_PMPM_2020CY.analytics.hcsc_mp_data
from xUDS_PMPM_2020CY.p885_ILB1.vw_proc_claims_financial_20_detail  a
join (select distinct [row number] from xClaims_2020CY.p885_ILB1.traceability_claims where [ITS PROVIDER]='Y') B --limiting to ITS providers. ITS provider field not in the detail table
on replace(a.chp_row_id,left(chp_row_id,4),'')=b.[ROW NUMBER]

 where atl_grouper_exclusion_flag='N' 
and flag_exclude_groups='N'
and exclude_medical_benefit_flag = 'N'  
and exclusion_flag='N'


group by  
        a.[chp_carrier_id],  
        a.[pdr_product_id],    
        a.zip3, 
		a.claim_type


UNION ALL

--HCSC (MT)
select
     a.[chp_carrier_id],  
     a.[pdr_product_id],    
     a.zip3, 
a.claim_type as ctype,
sum(a.[adjusted_billed_amount]) as tot_billed,
sum(case when  a.benefit_payment_contract_status='OC'  then a.[adjusted_billed_amount] else 0 end) as oc_billed,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[adjusted_billed_amount] else 0 end) as ox_billed,
sum(case when  a.benefit_payment_contract_status='OC'  then a.[adjusted_allowed_amount] else 0 end) as oc_allowed,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[adjusted_allowed_amount] else 0 end) as ox_allowed,
sum(case when  a.benefit_payment_contract_status in ('OC', 'OX') then a.[adjusted_billed_amount] else 0 end) as oon_billed,

sum(case when  a.benefit_payment_contract_status='OC'  then a.[admits] else 0 end) as oc_admits,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[admits] else 0 end) as ox_admits,
sum(a.[admits]) as tot_admits,

sum(case when  a.benefit_payment_contract_status='OC'  then a.[actual_utilization] else 0 end) as oc_utilization,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[actual_utilization] else 0 end) as ox_utilization,
sum(a.[actual_utilization]) as tot_utilization
from xUDS_PMPM_2020CY.p915_MTB1.vw_proc_claims_financial_20_detail  a
join (select distinct [row number] from xClaims_2020CY.p915_MTB1.traceability_claims where [ITS PROVIDER]='Y') B --limiting to ITS providers. ITS provider field not in the detail table
on replace(a.chp_row_id,left(chp_row_id,4),'')=b.[ROW NUMBER]

 where atl_grouper_exclusion_flag='N' 
and flag_exclude_groups='N'
and exclude_medical_benefit_flag = 'N'  
and exclusion_flag='N'


group by  
        a.[chp_carrier_id],  
        a.[pdr_product_id],    
        a.zip3, 
		a.claim_type


UNION ALL

--HCSC (NM)
select
     a.[chp_carrier_id],  
     a.[pdr_product_id],    
     a.zip3, 
a.claim_type as ctype,
sum(a.[adjusted_billed_amount]) as tot_billed,
sum(case when  a.benefit_payment_contract_status='OC'  then a.[adjusted_billed_amount] else 0 end) as oc_billed,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[adjusted_billed_amount] else 0 end) as ox_billed,
sum(case when  a.benefit_payment_contract_status='OC'  then a.[adjusted_allowed_amount] else 0 end) as oc_allowed,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[adjusted_allowed_amount] else 0 end) as ox_allowed,
sum(case when  a.benefit_payment_contract_status in ('OC', 'OX') then a.[adjusted_billed_amount] else 0 end) as oon_billed,

sum(case when  a.benefit_payment_contract_status='OC'  then a.[admits] else 0 end) as oc_admits,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[admits] else 0 end) as ox_admits,
sum(a.[admits]) as tot_admits,

sum(case when  a.benefit_payment_contract_status='OC'  then a.[actual_utilization] else 0 end) as oc_utilization,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[actual_utilization] else 0 end) as ox_utilization,
sum(a.[actual_utilization]) as tot_utilization

from xUDS_PMPM_2020CY.p924_NMB1.vw_proc_claims_financial_20_detail  a
join (select distinct [row number] from xClaims_2020CY.p924_NMB1.traceability_claims where [ITS PROVIDER]='Y') B --limiting to ITS providers. ITS provider field not in the detail table
on replace(a.chp_row_id,left(chp_row_id,4),'')=b.[ROW NUMBER]

 where atl_grouper_exclusion_flag='N' 
and flag_exclude_groups='N'
and exclude_medical_benefit_flag = 'N'  
and exclusion_flag='N'


group by  
        a.[chp_carrier_id],  
        a.[pdr_product_id],    
        a.zip3, 
		a.claim_type
UNION ALL

--HCSC (OK)
select  
     a.[chp_carrier_id],  
     a.[pdr_product_id],    
     a.zip3, 
a.claim_type as ctype,
sum(a.[adjusted_billed_amount]) as tot_billed,
sum(case when  a.benefit_payment_contract_status='OC'  then a.[adjusted_billed_amount] else 0 end) as oc_billed,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[adjusted_billed_amount] else 0 end) as ox_billed,
sum(case when  a.benefit_payment_contract_status='OC'  then a.[adjusted_allowed_amount] else 0 end) as oc_allowed,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[adjusted_allowed_amount] else 0 end) as ox_allowed,
sum(case when  a.benefit_payment_contract_status in ('OC', 'OX') then a.[adjusted_billed_amount] else 0 end) as oon_billed,

sum(case when  a.benefit_payment_contract_status='OC'  then a.[admits] else 0 end) as oc_admits,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[admits] else 0 end) as ox_admits,
sum(a.[admits]) as tot_admits,

sum(case when  a.benefit_payment_contract_status='OC'  then a.[actual_utilization] else 0 end) as oc_utilization,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[actual_utilization] else 0 end) as ox_utilization,
sum(a.[actual_utilization]) as tot_utilization

from xUDS_PMPM_2020CY.p918_OKB1.vw_proc_claims_financial_20_detail  a
join (select distinct [row number] from xClaims_2020CY.p918_OKB1.traceability_claims where [ITS PROVIDER]='Y') B --limiting to ITS providers. ITS provider field not in the detail table
on replace(a.chp_row_id,left(chp_row_id,4),'')=b.[ROW NUMBER]

 where atl_grouper_exclusion_flag='N' 
and flag_exclude_groups='N'
and exclude_medical_benefit_flag = 'N'  
and exclusion_flag='N'



group by  
        a.[chp_carrier_id],  
        a.[pdr_product_id],    
        a.zip3, 
		a.claim_type


UNION ALL

--HCSC (OK)
select  
     a.[chp_carrier_id],  
     a.[pdr_product_id],    
     a.zip3, 
a.claim_type as ctype,
sum(a.[adjusted_billed_amount]) as tot_billed,
sum(case when  a.benefit_payment_contract_status='OC'  then a.[adjusted_billed_amount] else 0 end) as oc_billed,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[adjusted_billed_amount] else 0 end) as ox_billed,
sum(case when  a.benefit_payment_contract_status='OC'  then a.[adjusted_allowed_amount] else 0 end) as oc_allowed,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[adjusted_allowed_amount] else 0 end) as ox_allowed,
sum(case when  a.benefit_payment_contract_status in ('OC', 'OX') then a.[adjusted_billed_amount] else 0 end) as oon_billed,

sum(case when  a.benefit_payment_contract_status='OC'  then a.[admits] else 0 end) as oc_admits,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[admits] else 0 end) as ox_admits,
sum(a.[admits]) as tot_admits,

sum(case when  a.benefit_payment_contract_status='OC'  then a.[actual_utilization] else 0 end) as oc_utilization,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[actual_utilization] else 0 end) as ox_utilization,
sum(a.[actual_utilization]) as tot_utilization

from xUDS_PMPM_2020CY.p918_OKL8.vw_proc_claims_financial_20_detail  a
join (select distinct [row number] from xClaims_2020CY.p918_OKL8.traceability_claims where [ITS PROVIDER]='Y') B --limiting to ITS providers. ITS provider field not in the detail table
on replace(a.chp_row_id,left(chp_row_id,4),'')=b.[ROW NUMBER]

 where atl_grouper_exclusion_flag='N' 
and flag_exclude_groups='N'
and exclude_medical_benefit_flag = 'N'  
and exclusion_flag='N'



group by  
        a.[chp_carrier_id],  
        a.[pdr_product_id],    
        a.zip3, 
		a.claim_type


UNION ALL

--HCSC (OK)
select  
     a.[chp_carrier_id],  
     a.[pdr_product_id],    
     a.zip3, 
a.claim_type as ctype,
sum(a.[adjusted_billed_amount]) as tot_billed,
sum(case when  a.benefit_payment_contract_status='OC'  then a.[adjusted_billed_amount] else 0 end) as oc_billed,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[adjusted_billed_amount] else 0 end) as ox_billed,
sum(case when  a.benefit_payment_contract_status='OC'  then a.[adjusted_allowed_amount] else 0 end) as oc_allowed,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[adjusted_allowed_amount] else 0 end) as ox_allowed,
sum(case when  a.benefit_payment_contract_status in ('OC', 'OX') then a.[adjusted_billed_amount] else 0 end) as oon_billed,

sum(case when  a.benefit_payment_contract_status='OC'  then a.[admits] else 0 end) as oc_admits,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[admits] else 0 end) as ox_admits,
sum(a.[admits]) as tot_admits,

sum(case when  a.benefit_payment_contract_status='OC'  then a.[actual_utilization] else 0 end) as oc_utilization,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[actual_utilization] else 0 end) as ox_utilization,
sum(a.[actual_utilization]) as tot_utilization

from xUDS_PMPM_2020CY.p918_OKL3.vw_proc_claims_financial_20_detail  a
join (select distinct [row number] from xClaims_2020CY.p918_OKL3.traceability_claims where [ITS PROVIDER]='Y') B --limiting to ITS providers. ITS provider field not in the detail table
on replace(a.chp_row_id,left(chp_row_id,4),'')=b.[ROW NUMBER]

 where atl_grouper_exclusion_flag='N' 
and flag_exclude_groups='N'
and exclude_medical_benefit_flag = 'N'  
and exclusion_flag='N'



group by  
        a.[chp_carrier_id],  
        a.[pdr_product_id],    
        a.zip3, 
		a.claim_type


UNION ALL

--HCSC (TX)
select  
     a.[chp_carrier_id],  
     a.[pdr_product_id],    
     a.zip3, 
a.claim_type as ctype,
sum(a.[adjusted_billed_amount]) as tot_billed,
sum(case when  a.benefit_payment_contract_status='OC'  then a.[adjusted_billed_amount] else 0 end) as oc_billed,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[adjusted_billed_amount] else 0 end) as ox_billed,
sum(case when  a.benefit_payment_contract_status='OC'  then a.[adjusted_allowed_amount] else 0 end) as oc_allowed,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[adjusted_allowed_amount] else 0 end) as ox_allowed,
sum(case when  a.benefit_payment_contract_status in ('OC', 'OX') then a.[adjusted_billed_amount] else 0 end) as oon_billed,

sum(case when  a.benefit_payment_contract_status='OC'  then a.[admits] else 0 end) as oc_admits,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[admits] else 0 end) as ox_admits,
sum(a.[admits]) as tot_admits,

sum(case when  a.benefit_payment_contract_status='OC'  then a.[actual_utilization] else 0 end) as oc_utilization,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[actual_utilization] else 0 end) as ox_utilization,
sum(a.[actual_utilization]) as tot_utilization

from xUDS_PMPM_2020CY.p887_TXB1.vw_proc_claims_financial_20_detail  a
join (select distinct [row number] from xClaims_2020CY.p887_TXB1.traceability_claims where [ITS PROVIDER]='Y') B --limiting to ITS providers. ITS provider field not in the detail table
on replace(a.chp_row_id,left(chp_row_id,4),'')=b.[ROW NUMBER]

 where atl_grouper_exclusion_flag='N' 
and flag_exclude_groups='N'
and exclude_medical_benefit_flag = 'N'  
and exclusion_flag='N'



group by  
        a.[chp_carrier_id],  
        a.[pdr_product_id],    
        a.zip3, 
		a.claim_type


 --select * from xUDS_PMPM_2020CY.analytics.hcsc_mp_data


 /**********************************************************************************************************************************************************
*                                                                                                                                                         *
*                                                    HIGHMARK'S DATA                                                                                      *
***********************************************************************************************************************************************************/



---no OX claims where  the HH flag is Y and Vendor code is 'Y' OR HH is Y for all 3 products






 Drop table if exists xUDS_PMPM_2020CY.analytics.highmark_mp_data
select  
 
     a.[chp_carrier_id],  
     a.[pdr_product_id],    
     a.zip3, 
a.claim_type as ctype,
sum(a.[adjusted_billed_amount]) as tot_billed,
sum(case when  a.benefit_payment_contract_status='OC'  then a.[adjusted_billed_amount] else 0 end) as oc_billed,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[adjusted_billed_amount] else 0 end) as ox_billed,
sum(case when  a.benefit_payment_contract_status='OC'  then a.[adjusted_allowed_amount] else 0 end) as oc_allowed,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[adjusted_allowed_amount] else 0 end) as ox_allowed,
sum(case when  a.benefit_payment_contract_status in ('OC', 'OX') then a.[adjusted_billed_amount] else 0 end) as oon_billed,

sum(case when  a.benefit_payment_contract_status='OC'  then a.[admits] else 0 end) as oc_admits,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[admits] else 0 end) as ox_admits,
sum(a.[admits]) as tot_admits,

sum(case when  a.benefit_payment_contract_status='OC'  then a.[actual_utilization] else 0 end) as oc_utilization,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[actual_utilization] else 0 end) as ox_utilization,
sum(a.[actual_utilization]) as tot_utilization
into xUDS_PMPM_2020CY.analytics.highmark_mp_data
from xUDS_PMPM_2020CY.p958_PAB1.vw_proc_claims_financial_20_detail  a
join (select distinct [row number] from xClaims_2020CY.p958_PAB1.traceability_claims where [ITS PROVIDER]='Y') B --limiting to ITS providers. ITS provider field not in the detail table
on replace(a.chp_row_id,left(chp_row_id,4),'')=b.[ROW NUMBER]

 where atl_grouper_exclusion_flag='N' 
and flag_exclude_groups='N'
and exclude_medical_benefit_flag = 'N'  
and exclusion_flag='N'
and insurance_arrangement='S'



group by  
        a.[chp_carrier_id],  
        a.[pdr_product_id],    
        a.zip3, 
		a.claim_type


UNION ALL
select
  a.[chp_carrier_id],  
     a.[pdr_product_id],    
     a.zip3, 
a.claim_type as ctype,
sum(a.[adjusted_billed_amount]) as tot_billed,
sum(case when  a.benefit_payment_contract_status='OC'  then a.[adjusted_billed_amount] else 0 end) as oc_billed,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[adjusted_billed_amount] else 0 end) as ox_billed,
sum(case when  a.benefit_payment_contract_status='OC'  then a.[adjusted_allowed_amount] else 0 end) as oc_allowed,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[adjusted_allowed_amount] else 0 end) as ox_allowed,
sum(case when  a.benefit_payment_contract_status in ('OC', 'OX') then a.[adjusted_billed_amount] else 0 end) as oon_billed,

sum(case when  a.benefit_payment_contract_status='OC'  then a.[admits] else 0 end) as oc_admits,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[admits] else 0 end) as ox_admits,
sum(a.[admits]) as tot_admits,

sum(case when  a.benefit_payment_contract_status='OC'  then a.[actual_utilization] else 0 end) as oc_utilization,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[actual_utilization] else 0 end) as ox_utilization,
sum(a.[actual_utilization]) as tot_utilization

from xUDS_PMPM_2020CY.p1420_PAL6.vw_proc_claims_financial_20_detail  a
join (select distinct [row number] from xClaims_2020CY.p1420_PAL6.traceability_claims where [ITS PROVIDER]='Y') B --limiting to ITS providers. ITS provider field not in the detail table
on replace(a.chp_row_id,left(chp_row_id,4),'')=b.[ROW NUMBER]

 where atl_grouper_exclusion_flag='N' 
and flag_exclude_groups='N'
and exclude_medical_benefit_flag = 'N'  
and exclusion_flag='N'
and insurance_arrangement='S'



group by  
        a.[chp_carrier_id],  
        a.[pdr_product_id],    
        a.zip3, 
		a.claim_type



UNION ALL

select
  a.[chp_carrier_id],  
     a.[pdr_product_id],    
     a.zip3, 
a.claim_type as ctype,
sum(a.[adjusted_billed_amount]) as tot_billed,
sum(case when  a.benefit_payment_contract_status='OC'  then a.[adjusted_billed_amount] else 0 end) as oc_billed,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[adjusted_billed_amount] else 0 end) as ox_billed,
sum(case when  a.benefit_payment_contract_status='OC'  then a.[adjusted_allowed_amount] else 0 end) as oc_allowed,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[adjusted_allowed_amount] else 0 end) as ox_allowed,
sum(case when  a.benefit_payment_contract_status in ('OC', 'OX') then a.[adjusted_billed_amount] else 0 end) as oon_billed,

sum(case when  a.benefit_payment_contract_status='OC'  then a.[admits] else 0 end) as oc_admits,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[admits] else 0 end) as ox_admits,
sum(a.[admits]) as tot_admits,

sum(case when  a.benefit_payment_contract_status='OC'  then a.[actual_utilization] else 0 end) as oc_utilization,
sum(case when  a.benefit_payment_contract_status='OX'  then a.[actual_utilization] else 0 end) as ox_utilization,
sum(a.[actual_utilization]) as tot_utilization

from xUDS_PMPM_2020CY.p897_DEB1.vw_proc_claims_financial_20_detail  a
join (select distinct [row number] from xClaims_2020CY.p897_DEB1.traceability_claims where [ITS PROVIDER]='Y') B --limiting to ITS providers. ITS provider field not in the detail table
on replace(a.chp_row_id,left(chp_row_id,4),'')=b.[ROW NUMBER]

 where atl_grouper_exclusion_flag='N' 
and flag_exclude_groups='N'
and exclude_medical_benefit_flag = 'N'  
and exclusion_flag='N'
and insurance_arrangement='S'



group by  
        a.[chp_carrier_id],  
        a.[pdr_product_id],    
        a.zip3, 
		a.claim_type

select * from xUDS_PMPM_2020CY.analytics.highmark_mp_data





--/**********************************************************************************************************************************************************
--*                                                                                                                                                         *
--*                                                  ANTHEM'S DATA                                                                                        *
--***********************************************************************************************************************************************************/


---Anthem has no group exclusions or outliers
--other than P3MO data submitted is SF. 
--runout flag included so no need for uds exclusion flag

DROP TABLE IF EXISTS xUDS_PMPM_2020CY.analytics.Anthem_mp_data
CREATE TABLE xUDS_PMPM_2020CY.analytics.Anthem_mp_data(
	[chp_carrier_id] [varchar](50) NULL,
	[pdr_product_id] [varchar](50) NULL,
	[zip3] [varchar](5) NULL,
	[ctype] [varchar](5) NOT NULL,
	[tot_billed] [decimal](26, 10) NULL,
	[oc_billed] [decimal](26, 10) NULL,
	[ox_billed] [decimal](26, 10) NULL,
	[oc_allowed] [decimal](26, 10) NULL,
	[ox_allowed] [decimal](26, 10) NULL,
	[oon_billed] [decimal](26, 10) NULL,
	[oc_admits] [int] NULL,
	[ox_admits] [int] NULL,
	[tot_admits] [int] NULL,
	[oc_utilization] [int] NULL,
	[ox_utilization] [int] NULL,
	[tot_utlization] [int] NULL
)


truncate table xUDS_PMPM_2020CY.analytics.Anthem_mp_data
Declare	@schema_name		VARCHAR(20)	,					
        @SQL				VARCHAR(MAX)

Declare schema_cursor cursor for
	Select [schema_name] 
	from process.data_status_tracking 
    where include_in_uds_pmpm = 1  
and carrier_group_code=660 and pdr_product_id <>'CAL3'


OPEN schema_cursor

	FETCH NEXT FROM schema_cursor
	INTO @schema_name 
	
	WHILE @@FETCH_STATUS = 0
	BEGIN

SET @SQL='
insert into xUDS_PMPM_2020CY.analytics.Anthem_mp_data with (tablock)
select  
     a.[chp_carrier_id],  
     a.[pdr_product_id],    
     a.zip3, 
a.claim_type as ctype,
sum(a.[adjusted_billed_amount]) as tot_billed,
sum(case when  a.benefit_payment_contract_status=''OC''  then a.[adjusted_billed_amount] else 0 end) as oc_billed,
sum(case when  a.benefit_payment_contract_status=''OX''  then a.[adjusted_billed_amount] else 0 end) as ox_billed,
sum(case when  a.benefit_payment_contract_status=''OC''  then a.[adjusted_allowed_amount] else 0 end) as oc_allowed,
sum(case when  a.benefit_payment_contract_status=''OX''  then a.[adjusted_allowed_amount] else 0 end) as ox_allowed,
sum(case when  a.benefit_payment_contract_status in (''OC'', ''OX'') then a.[adjusted_billed_amount] else 0 end) as oon_billed,

sum(case when  a.benefit_payment_contract_status=''OC''  then a.[admits] else 0 end) as oc_admits,
sum(case when  a.benefit_payment_contract_status=''OX''  then a.[admits] else 0 end) as ox_admits,
sum(a.[admits]) as tot_admits,

sum(case when  a.benefit_payment_contract_status=''OC''  then a.[actual_utilization] else 0 end) as oc_utilization,
sum(case when  a.benefit_payment_contract_status=''OX''  then a.[actual_utilization] else 0 end) as ox_utilization,
sum(a.[actual_utilization]) as tot_utilization

from [xUDS_PMPM_2020CY].'+@schema_name+'.[vw_proc_claims_financial_20_detail]  as a

where atl_grouper_exclusion_flag=''N''  
and [flag_exclude_groups] = ''N''  
and exclude_medical_benefit_flag=''N''
and insurance_arrangement=''S''


group by  
        a.[chp_carrier_id],  
        a.[pdr_product_id],    
        a.zip3, 
		a.claim_type
	  
'
   EXEC(@SQL)
  PRINT (@SQL)
 FETCH NEXT FROM schema_cursor 
        INTO @schema_name
        END 
        CLOSE schema_cursor
        DEALLOCATE schema_cursor


	  
end
GO
/****** Object:  StoredProcedure [analytics].[step_2_nonmultiplan_factors]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Tola Kalejaiye
-- Create date: 3/22/2020
-- Description:	creating the non-mulitplan factors
-- =============================================
CREATE PROCEDURE  [analytics].[step_2_nonmultiplan_factors]
AS
BEGIN

	SET NOCOUNT ON;
--1) Create table shell using table 
DROP TABLE IF EXISTS [analytics].[data_for_oon]
CREATE TABLE [analytics].[data_for_oon](
	[chp_carrier_id] [varchar](50) NULL,
	[pdr_product_id] [varchar](50) NULL,
	[zip3] [varchar](5) NULL,
	[ctype] [varchar](5) NOT NULL,
	[tot_billed] [decimal](26, 10) NULL,
	[oc_billed] [decimal](26, 10) NULL,
	[ox_billed] [decimal](26, 10) NULL,
	[oc_allowed] [decimal](26, 10) NULL,
	[ox_allowed] [decimal](26, 10) NULL,
	[oon_billed] [decimal](26, 10) NULL,
	[oc_admits] [decimal](26, 10) NULL,
	[ox_admits] [decimal](26, 10) NULL,
	[tot_admits] [decimal](26, 10) NULL,
	[oc_utilization] [decimal](26, 10) NULL,
	[ox_utilization] [decimal](26, 10) NULL,
	[tot_utlization] [decimal](26, 10) NULL
)

--2) OON Data



Truncate table xuds_pmpm_2020CY.analytics.data_for_oon

Declare	@schema_name		VARCHAR(20)	,					
        @SQL				VARCHAR(MAX)

Declare schema_cursor cursor for
	Select [schema_name]
	from process.data_status_tracking 
    where include_in_uds_pmpm = 1 
and pdr_product_id in ( select distinct pdr_product_id from Reference.ref_tpv_factor_development where NonMultiPlan_factors = 'Yes') 
						--plans that do no use multiplan in and out of service area 
						-- 
						--and certified their hosted data


OPEN schema_cursor

	FETCH NEXT FROM schema_cursor
	INTO @schema_name 
	
	WHILE @@FETCH_STATUS = 0
	BEGIN

SET @SQL='
insert into xuds_pmpm_2020CY.analytics.data_for_oon with (tablock)
select  
     a.[chp_carrier_id],  
     a.[pdr_product_id],    
     a.zip3, 
	a.claim_type as ctype,
sum(a.[adjusted_billed_amount]) as tot_billed,
sum(case when  a.benefit_payment_contract_status=''OC''  then a.[adjusted_billed_amount] else 0 end) as oc_billed,
sum(case when  a.benefit_payment_contract_status=''OX''  then a.[adjusted_billed_amount] else 0 end) as ox_billed,
sum(case when  a.benefit_payment_contract_status=''OC''  then a.[adjusted_allowed_amount] else 0 end) as oc_allowed,
sum(case when  a.benefit_payment_contract_status=''OX''  then a.[adjusted_allowed_amount] else 0 end) as ox_allowed,
sum(case when  a.benefit_payment_contract_status in(''OC'', ''OX'') then a.[adjusted_billed_amount] else 0 end) as oon_billed,

sum(case when  a.benefit_payment_contract_status=''OC''  then a.[admits] else 0 end) as oc_admits,
sum(case when  a.benefit_payment_contract_status=''OX''  then a.[admits] else 0 end) as ox_admits,
sum(a.[admits]) as tot_admits,

sum(case when  a.benefit_payment_contract_status=''OC''  then a.[actual_utilization] else 0 end) as oc_utilization,
sum(case when  a.benefit_payment_contract_status=''OX''  then a.[actual_utilization] else 0 end) as ox_utilization,
sum(a.[actual_utilization]) as tot_utilization

from [xuds_pmpm_2020CY].'+@schema_name+'.[vw_proc_claims_financial_20_detail]  as a

where atl_grouper_exclusion_flag=''N''  
and [flag_exclude_groups] = ''N''  
and exclude_medical_benefit_flag=''N''
and insurance_arrangement=''S''
and home_hosted_indicator=''HOSTED''
and exclusion_flag=''N''
group by  
        a.[chp_carrier_id],  
        a.[pdr_product_id],    
        a.zip3, 
		a.claim_type
	  
'
  EXEC(@SQL)
  PRINT (@SQL)
 FETCH NEXT FROM schema_cursor 
        INTO @schema_name
        END 
        CLOSE schema_cursor
        DEALLOCATE schema_cursor

 

--Create for non_multiplan
--2.) Select markets
Drop table if exists #mkts
select distinct zip3, [chp_market_subsection_name] as market
into #mkts
from  [xClaims_2020CY].[reference].[Mapping, Standard:  ValueQuest Markets]
 


--Mark products where host does not allow MP use 
Drop table if exists #temp
select
a.zip3,
m.market,
s.[state],
a.ctype,
case when a.ctype='I' then 31000
when a.ctype='O' then 627000
else 483000 end as threshold,
sum(oc_billed) as oc_billed,
sum(ox_billed) as ox_billed,
sum(oc_allowed) as oc_allowed,
sum(ox_allowed) as ox_allowed,
sum(oc_billed+ox_billed) as oon_billed,
sum(oc_admits) as oc_admits,
sum(ox_admits) as ox_admits,
sum(oc_admits+ox_admits) as oon_admits,
sum(oc_utilization) as oc_utilization,
sum(ox_utilization) as ox_utilization,
sum(oc_utilization+ox_utilization) as oon_utilization
into #temp
from xuds_pmpm_2020CY.analytics.data_for_oon as a
left join #mkts m
on a.zip3=m.zip3
left join  xUDSDiscount_2020CY.reference.state_lookup s
on a.zip3=s.zip3
group by
a.zip3,
m.market,
s.[state],
a.ctype



--Select * from #temp

---Calculations at a market level
Drop table if exists #mkt_result
select
market,
ctype,
sum(oon_billed) as nmp_billed_mkt,
case when sum(oon_billed)=0 then 0 else sum(oc_billed)/sum(oon_billed) end as nmp_oc_pct_mkt,
case when sum(oon_billed)=0 then 1 else sum(ox_billed)/sum(oon_billed) end as nmp_ox_pct_mkt,
case when sum(oc_billed)=0 then 0 else 1-sum(oc_allowed)/sum(oc_billed) end as nmp_oc_disc_mkt,
case when sum(ox_billed)=0 then 0 else 1-sum(ox_allowed)/sum(ox_billed) end as nmp_ox_disc_mkt,
case when sum(oon_admits)=0 then 0 else sum(oc_admits)/sum(oon_admits) end as nmp_oc_admit_mkt,
case when sum(oon_admits)=0 then 0 else sum(ox_admits)/sum(oon_admits) end as nmp_ox_admit_mkt,
case when sum(oon_utilization)=0 then 0 else sum(oc_utilization)/sum(oon_utilization) end as nmp_oc_utilization_mkt,
case when sum(oon_utilization)=0 then 0 else sum(ox_utilization)/sum(oon_utilization) end as nmp_ox_utilization_mkt
into #mkt_result
from #temp
group by
market,
ctype


select * from #mkt_result 

---Calculations at a state level
Drop table if exists #st_result
select
[state],
ctype,
sum(oon_billed) as nmp_billed_st,
case when sum(oon_billed)=0 then 0 else sum(oc_billed)/sum(oon_billed) end as nmp_oc_pct_st,
case when sum(oon_billed)=0 then 1 else sum(ox_billed)/sum(oon_billed) end as nmp_ox_pct_st,
case when sum(oc_billed)=0 then 0 else 1-sum(oc_allowed)/sum(oc_billed) end as nmp_oc_disc_st,
case when sum(ox_billed)=0 then 0 else 1-sum(ox_allowed)/sum(ox_billed) end as nmp_ox_disc_st,
case when sum(oon_admits)=0 then 0 else sum(oc_admits)/sum(oon_admits) end as nmp_oc_admit_st,
case when sum(oon_admits)=0 then 0 else sum(ox_admits)/sum(oon_admits) end as nmp_ox_admit_st,
case when sum(oon_utilization)=0 then 0 else sum(oc_utilization)/sum(oon_utilization) end as nmp_oc_utilization_st,
case when sum(oon_utilization)=0 then 0 else sum(ox_utilization)/sum(oon_utilization) end as nmp_ox_utilization_st
into #st_result
from #temp
group by
[state],
ctype

--select * from #st_result


---Calculations at a national level
Drop table if exists #nat_result
select
ctype,
sum(oon_billed) as nmp_billed_nat,
case when sum(oon_billed)=0 then 0 else sum(oc_billed)/sum(oon_billed) end as nmp_oc_pct_nat,
case when sum(oon_billed)=0 then 1 else sum(ox_billed)/sum(oon_billed) end as nmp_ox_pct_nat,
case when sum(oc_billed)=0 then 0 else 1-sum(oc_allowed)/sum(oc_billed) end as nmp_oc_disc_nat,
case when sum(ox_billed)=0 then 0 else 1-sum(ox_allowed)/sum(ox_billed) end as nmp_ox_disc_nat,
case when sum(oon_admits)=0 then 0 else sum(oc_admits)/sum(oon_admits) end as nmp_oc_admit_nat,
case when sum(oon_admits)=0 then 0 else sum(ox_admits)/sum(oon_admits) end as nmp_ox_admit_nat,
case when sum(oon_utilization)=0 then 0 else sum(oc_utilization)/sum(oon_utilization) end as nmp_oc_utilization_nat,
case when sum(oon_utilization)=0 then 0 else sum(ox_utilization)/sum(oon_utilization) end as nmp_ox_utilization_nat
into #nat_result
from #temp
group by
ctype


--select * from  #nat_result

--Pull together all combos in the home data
Drop table if exists #temp3
select distinct
a.[3 Digit Member ZIP Code] as zip3, 
a.[PDR Product ID]as pdr_product_id,
m.market,
s.[state],
case when a.[PDR Product ID] in (select distinct pdr_product_id from Reference.ref_tpv_factor_development where mp_home_Y_MP = 'Yes' ) then 'Y'
     when a.[PDR Product ID] in (select distinct pdr_product_id  from Reference.ref_tpv_factor_development where mp_home_Gap = 'Yes') then 'GAP' else 'N' end as mp_home,
case when a.[Claim Type]='I' then 31000
when a.[Claim Type]='O' then 627000
else 483000 end as threshold,
a.[Claim Type] as ctype
into #temp3
from xuds_pmpm_2020CY.[OUTPUT_STD].[UDS PMPM - Claims Data] as a
left join #mkts m
on a.[3 Digit Member ZIP Code]=m.zip3
left join xUDSDiscount_2019CY.reference.state_lookup s
on a.[3 Digit Member ZIP Code]=s.zip3
where a.[Benefit/Contract Status Indicator] in ('ox', 'oc')

--select distinct pdr_product_id, mp_home from #temp3 where mp_home<>'n'
--order by 2,1


---Use threshold to determine what factor level to use: market over state, state over national
Drop table if exists #temp4
select 
a.zip3,
mp_home,
a.pdr_product_id,
a.ctype,
case when m.nmp_billed_mkt >= threshold then nmp_oc_pct_mkt 
when s.nmp_billed_st >= threshold then nmp_oc_pct_st
else nmp_oc_pct_nat end as nmp_oc_pct,


case when m.nmp_billed_mkt >= threshold then nmp_oc_disc_mkt 
when s.nmp_billed_st >= threshold then nmp_oc_disc_st
else nmp_oc_disc_nat end as nmp_oc_disc,


case when m.nmp_billed_mkt >= threshold then nmp_ox_disc_mkt 
when s.nmp_billed_st >= threshold then nmp_ox_disc_st
else nmp_ox_disc_nat end as nmp_ox_disc,

case when m.nmp_billed_mkt >= threshold then nmp_oc_admit_mkt 
when s.nmp_billed_st >= threshold then nmp_oc_admit_st
else nmp_oc_admit_nat end as nmp_oc_admit_pct,

case when m.nmp_billed_mkt >= threshold then nmp_oc_utilization_mkt 
when s.nmp_billed_st >= threshold then nmp_oc_utilization_st
else nmp_oc_utilization_nat end as nmp_oc_utilization_pct,

--FLags to show what level we used

case when m.nmp_billed_mkt >= threshold then 'Market'
when s.nmp_billed_st >= threshold then 'State'
else 'Natl' end as nmp_flag
into #temp4
from #temp3 as a
left join #mkt_result m 
on a.market=m.market
and a.ctype=m.ctype
left join #st_result s
on a.[state]=s.[state]
and a.ctype=s.ctype
left join #nat_result n
on a.ctype=n.ctype
order by zip3, ctype

---Pull together final values
Drop table if exists xuds_pmpm_2020CY.analytics.OON_NMP_factors
select
zip3,
pdr_product_id,
ctype,
nmp_oc_pct,
(1- nmp_oc_pct) as nmp_ox_pct,
nmp_oc_disc,
nmp_ox_disc,
nmp_oc_admit_pct,
(1- nmp_oc_admit_pct) as nmp_ox_admit_pct,
nmp_oc_utilization_pct,
(1- nmp_oc_utilization_pct) as nmp_ox_utilization_pct,
nmp_flag,
mp_home
into xuds_pmpm_2020CY.analytics.OON_NMP_factors
from #temp4 

select * from xuds_pmpm_2020CY.analytics.OON_NMP_factors
 WHERE nmp_oc_utilization_pct < .01
order by mp_home




--Update table to replace oc_y_pcts if < 1% ----
UPDATE   xuds_pmpm_2020CY.analytics.OON_NMP_factors
 SET nmp_oc_pct = 0,
     nmp_ox_pct=1.00000
 WHERE nmp_oc_pct < .01

 UPDATE   xuds_pmpm_2020CY.analytics.OON_NMP_factors
 SET nmp_ox_pct = 0,
     nmp_oc_pct=1.00000
 WHERE nmp_ox_pct < .01


 UPDATE   xuds_pmpm_2020CY.analytics.OON_NMP_factors
 SET nmp_ox_utilization_pct = 0,
     nmp_oc_utilization_pct=1.00000
 WHERE nmp_ox_utilization_pct < .01


 UPDATE   xuds_pmpm_2020CY.analytics.OON_NMP_factors
 SET nmp_oc_utilization_pct = 0,
     nmp_ox_utilization_pct=1.00000
 WHERE nmp_oc_utilization_pct < .01
END


GO
/****** Object:  StoredProcedure [analytics].[step_3_multiplan_factors_without_BS_CA_data]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Tola Kalejaiye
-- Create date: 03/22/2020
-- Description:	Multiplan factor creation. Step 1 without BS-CA HRGI data
-- =============================================
CREATE PROCEDURE [analytics].[step_3_multiplan_factors_without_BS_CA_data]
AS
BEGIN

SET NOCOUNT ON;


--Consolidate MP data for  BCBS TN (no iSight), BCBS MN (iSight), BCBS MA (iSight), HCSC (iSight), Highmark(iSight), Horizon and Anthem
Drop table if exists #temp
select * into #temp from 
[xUDS_pmpm_2020CY].analytics.bcbsmn_mp_data	

union all	
select * from 
[xUDS_pmpm_2020CY].analytics.bcbsma_mp_data 

union all	
select * from 
[xUDS_pmpm_2020CY].analytics.bcbstn_mp_data

union all	
select * from 
[xUDS_pmpm_2020CY].analytics.horizon_mp_data

union all	
select * from 
[xUDS_pmpm_2020CY].analytics.hcsc_mp_data

union all	
select * from 
[xUDS_pmpm_2020CY].analytics.highmark_mp_data

union all	
select * from 
[xUDS_pmpm_2020CY].analytics.bcbsaz_mp_data

union all	
select * from 
[xUDS_pmpm_2020CY].analytics.Anthem_mp_data

--select distinct chp_carrier_id ,pdr_product_id from #temp
 --This is needed for the MP file data (for Molly's review)

select distinct pdr_product_id from #temp order by pdr_product_id desc

--select  case when pdr_product_id in ('NJB1','NJL2') THEN 'Horizon' 
--             when pdr_product_id in ('deb1','pal6','pab1') then 'HIGHMARK' 
--             when pdr_product_id in ('ILB1','MTB1','NMB1','OKB1','OKL8','OKLB','TXB1') then 'HCSC' 
--			   when pdr_product_id in ('TNL2','TNB2') then 'BCBSTN' 
--			   when pdr_product_id= 'MAB1' then 'BCBSMA' 
--			   when pdr_product_id= 'MNB1' then 'BCBSMN' 
--			 ELSE 'Anthem' END AS PLAN_NAME,
--       zip3,
--       ctype,
--	   sum(tot_billed)  as tot_billed,
--	   sum(oc_billed) as oc_billed,
--	   sum(ox_billed) as ox_billed,
--	   sum(oc_allowed) as oc_allowed,
--	   sum(ox_allowed) as ox_allowed
--from #temp
--group by case when pdr_product_id in ('NJB1','NJL2') THEN 'Horizon' 
--             when pdr_product_id in ('deb1','pal6','pab1') then 'HIGHMARK' 
--             when pdr_product_id in ('ILB1','MTB1','NMB1','OKB1','OKL8','OKLB','TXB1') then 'HCSC' 
--			   when pdr_product_id in ('TNL2','TNB2') then 'BCBSTN' 
--			   when pdr_product_id= 'MAB1' then 'BCBSMA' 
--			   when pdr_product_id= 'MNB1' then 'BCBSMN' 
--			 ELSE 'Anthem' END,
--			 zip3,
--       ctype
--order by PLAN_NAME, zip3, ctype


---check
--select pdr_product_id
--,ctype
--,sum(oc_billed) as oc_billed
--,sum(ox_billed) as ox_billed
--,sum(oc_allowed) as oc_allowed
--,sum(ox_allowed) as ox_allowed
--,1-(sum(oc_allowed)/sum(oc_billed))as oc_disc
--,1-(sum(ox_allowed)/sum(ox_billed))as ox_disc
--from #temp
--group  by pdr_product_id
--,ctype
--order by 1

--Market lookup
drop table if exists #mkts
select distinct zip3, [chp_market_subsection_name] as market
into #mkts
from  [xClaims_2020CY].[reference].[Mapping, Standard:  ValueQuest Markets]


--select * from #temp

--Map in market and state 
--Map in market and state 
drop table if exists #temp3
select
a.zip3,
m.market,
s.[state],
a.ctype,
case when a.ctype='I' then 31000
when a.ctype='O' then 627000
else 483000 end as threshold,
sum(oc_billed) as oc_billed,
sum(ox_billed) as ox_billed,
sum(oc_allowed) as oc_allowed,
sum(ox_allowed) as ox_allowed,
sum(oc_billed+ox_billed) as oon_billed,
cast(sum(oc_admits) as decimal (28,10)) as oc_admit,
cast(sum(ox_admits) as decimal (28,10)) as ox_admit,
cast(sum(oc_admits+ox_admits) as decimal (28,10)) as oon_admit,
cast(sum(oc_utilization) as decimal (28,10)) as oc_utilization,
cast(sum(ox_utilization) as decimal (28,10)) as ox_utilization,
cast(sum(oc_utilization+ox_utilization) as decimal(28,10)) as oon_utilization
into #temp3
from #temp as a
left join #mkts m
on a.zip3=m.zip3
left join   xUDSDiscount_2020CY.reference.state_lookup s
on a.zip3=s.zip3
group by
a.zip3,
m.market,
s.[state],
a.ctype

--select * from #temp3

--Summary results
---Calculations at a market level
drop table if exists #mkt_result
select
market,
ctype,
sum(oon_billed) as mp_billed_mkt,
case when sum(oon_billed)=0 then 0 else sum(oc_billed)/sum(oon_billed) end as mp_oc_pct_mkt,
case when sum(oon_billed)=0 then 1 else sum(ox_billed)/sum(oon_billed) end as mp_ox_pct_mkt,
case when sum(oc_billed)=0 then 0 else 1-sum(oc_allowed)/sum(oc_billed) end as mp_oc_disc_mkt,
case when sum(ox_billed)=0 then 0 else 1-sum(ox_allowed)/sum(ox_billed) end as mp_ox_disc_mkt,
case when sum(oon_admit)=0 then 0 else sum(oc_admit)/sum(oon_admit) end as mp_oc_admit_mkt,
case when sum(oon_admit)=0 then 0 else sum(ox_admit)/sum(oon_admit) end as mp_ox_admit_mkt,
case when sum(oon_utilization)=0 then 0 else sum(oc_utilization)/sum(oon_utilization) end as mp_oc_utilization_mkt,
case when sum(oon_utilization)=0 then 0 else sum(ox_utilization)/sum(oon_utilization) end as mp_ox_utilization_mkt
into #mkt_result
from #temp3
group by
market,
ctype


select * from #mkt_result  


--select * from #mkt_result order by  mp_oc_y_pct_mkt desc

--select  * from #temp3 where noncontracted_savings_indicator ='y'

---Calculations at a state level
drop table if exists #st_result
select
[state],
ctype,
sum(oon_billed) as mp_billed_st,
case when sum(oon_billed)=0 then 0 else sum(oc_billed)/sum(oon_billed) end as mp_oc_pct_st,
case when sum(oon_billed)=0 then 1 else sum(ox_billed)/sum(oon_billed) end as mp_ox_pct_st,
case when sum(oc_billed)=0 then 0 else 1-sum(oc_allowed)/sum(oc_billed) end as mp_oc_disc_st,
case when sum(ox_billed)=0 then 0 else 1-sum(ox_allowed)/sum(ox_billed) end as mp_ox_disc_st,
case when sum(oon_admit)=0 then 0 else sum(oc_admit)/sum(oon_admit) end as mp_oc_admit_st,
case when sum(oon_admit)=0 then 0 else sum(ox_admit)/sum(oon_admit) end as mp_ox_admit_st,
case when sum(oon_utilization)=0 then 0 else sum(oc_utilization)/sum(oon_utilization) end as mp_oc_utilization_st,
case when sum(oon_utilization)=0 then 0 else sum(ox_utilization)/sum(oon_utilization) end as mp_ox_utilization_st
into #st_result
from #temp3
group by
[state],
ctype


---Calculations at a National level
drop table if exists #nat_result
select
ctype,
sum(oon_billed) as mp_billed_nat,
case when sum(oon_billed)=0 then 0 else sum(oc_billed)/sum(oon_billed) end as mp_oc_pct_nat,
case when sum(oon_billed)=0 then 1 else sum(ox_billed)/sum(oon_billed) end as mp_ox_pct_nat,
case when sum(oc_billed)=0 then 0 else 1-sum(oc_allowed)/sum(oc_billed) end as mp_oc_disc_nat,
case when sum(ox_billed)=0 then 0 else 1-sum(ox_allowed)/sum(ox_billed) end as mp_ox_disc_nat,
case when sum(oon_admit)=0 then 0 else sum(oc_admit)/sum(oon_admit) end as mp_oc_admit_nat,
case when sum(oon_admit)=0 then 0 else sum(ox_admit)/sum(oon_admit) end as mp_ox_admit_nat,
case when sum(oon_utilization)=0 then 0 else sum(oc_utilization)/sum(oon_utilization) end as mp_oc_utilization_nat,
case when sum(oon_utilization)=0 then 0 else sum(ox_utilization)/sum(oon_utilization) end as mp_ox_utilization_nat
into #nat_result
from #temp3
group by
ctype

select * from #nat_result


---Pull together final values
--Pull together all combos in the home data
drop table if exists #temp4
select distinct
a.[3 Digit Member ZIP Code] as zip3, 
a.[PDR Product ID] as pdr_product_id,
m.market,
s.[state],
case when a.[Claim Type]='I' then 31000
when a.[Claim Type]='O' then 627000
else 483000 end as threshold,
a.[Claim Type] as ctype
into #temp4
from [xUDS_pmpm_2020CY].OUTPUT_STD.[UDS PMPM - Claims Data] as a
left join #mkts m
on a.[3 Digit Member ZIP Code]=m.zip3
left join [xUDSDiscount_2020CY].reference.state_lookup s
on a.[3 Digit Member ZIP Code]=s.zip3
where a.[Benefit/Contract Status Indicator] in('OC', 'OX')


--Pull together info
drop table if exists #temp5
select 
a.zip3,
a.pdr_product_id,
a.ctype,
case when m.mp_billed_mkt >= threshold then mp_oc_pct_mkt 
when s.mp_billed_st >= threshold then mp_oc_pct_st
else n.mp_oc_pct_nat end as mp_oc_pct,

case when m.mp_billed_mkt >= threshold then mp_oc_disc_mkt 
when s.mp_billed_st >= threshold then mp_oc_disc_st
else mp_oc_disc_nat end as mp_oc_disc,

case when m.mp_billed_mkt >= threshold then mp_ox_disc_mkt 
when s.mp_billed_st >= threshold then mp_ox_disc_st
else mp_ox_disc_nat end as mp_ox_disc,

case when m.mp_billed_mkt >= threshold then mp_oc_admit_mkt 
when s.mp_billed_st >= threshold then mp_oc_admit_st
else mp_oc_admit_nat end as mp_oc_admit_pct,

case when m.mp_billed_mkt >= threshold then mp_oc_utilization_mkt 
when s.mp_billed_st >= threshold then mp_oc_utilization_st
else mp_oc_utilization_nat end as mp_oc_utilization_pct,


--FLags to show what level we used
case when m.mp_billed_mkt >= threshold then 'Market'
when s.mp_billed_st >= threshold then 'State'
else 'Natl' end as mp_flag

into #temp5
from #temp4 as a
left join #mkt_result m 
on a.market=m.market
and a.ctype=m.ctype
left join #st_result s
on a.[state]=s.[state]
and a.ctype=s.ctype
left join #nat_result n
on a.ctype=n.ctype
order by zip3, ctype

drop table if exists [xUDS_pmpm_2020CY].analytics.mp_factors_Step1
select
zip3,
pdr_product_id,
ctype,
 mp_oc_pct,
(1- mp_oc_pct) as mp_ox_pct,
 mp_oc_disc,
 mp_ox_disc,
 mp_oc_admit_pct,
(1- mp_oc_admit_pct) as mp_ox_admit_pct,
mp_oc_utilization_pct,
(1- mp_oc_utilization_pct) as mp_ox_utilization_pct,
 mp_flag
 into [xUDS_pmpm_2020CY].analytics.mp_factors_Step1
from #temp5 



 UPDATE   xuds_pmpm_2020CY.analytics.mp_factors_Step1
 SET mp_ox_pct = 0,
     mp_oc_pct=1.00000
 WHERE mp_ox_pct < .01


END
GO
/****** Object:  StoredProcedure [analytics].[step_4_multiplan_factors_HRGI]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Tola Kalejaiye
-- Create date: 3/22/2020
-- Description:	Creation of HRG1 factors
-- =============================================
CREATE PROCEDURE [analytics].[step_4_multiplan_factors_HRGI]
AS
BEGIN
--1.)Build table shell  -
--DROP TABLE IF EXISTS [analytics].[OP_OON_claims]
--CREATE TABLE [analytics].[OP_OON_claims](
--	[CARRIER_ID] [varchar](50) NULL,
--	[PDR PRODUCT ID] [varchar](50) NULL,
--	[zip3] [varchar](3) NULL,
--	[ctype] [varchar](2) NOT NULL,
--	[ORIGINAL CLAIM NUMBER] [varchar](50) NULL,
--	[billed] [decimal](38, 10) NULL,
--	[admit] int,
--	[Utilization] bigint,
--)



Truncate table analytics.OP_OON_claims
Declare	@schema_name		VARCHAR(20)	,					
        @SQL				VARCHAR(MAX)

Declare schema_cursor cursor for
	Select [schema_name] 
	from process.data_status_tracking 
	where include_in_uds_pmpm=1
and network_type='BlueCard PPO' 


OPEN schema_cursor

	FETCH NEXT FROM schema_cursor
	INTO @schema_name 
	
	WHILE @@FETCH_STATUS = 0
	BEGIN



set @sql='insert into analytics.OP_OON_claims with (tablock)
select 
d.[CARRIER_ID],
d.[PDR PRODUCT ID],
d.[3DIGIT ZIP CODE] as zip3,
case when a.[claim type]=1 then ''I'' when a.[claim type]=3 then ''P'' else ''O'' end as ctype,
a.[ORIGINAL CLAIM NUMBER],
sum(a.[BILLED AMOUNT]) as billed,
sum(a.[ADMITS]) as admit,
sum( case when a.[service category] in (''5'', ''6'', ''11.2'', ''35'') then a.[cost model utilization] else [UTILIZATION WO EXCLUSION] end) as utilization

			
from xClaims_2020CY.'+@schema_name+'.traceability_claims_table a
              INNER JOIN xClaims_2020CY.'+@schema_name+'.[traceability_membership] d
                                  ON a.[MEMBER ID] =d.[MEMBER ID]
                                  AND a.[GROUP ID] =d.[GROUP ID]
                                  and a.[YEAR MONTH]=d.[YEAR MONTH]
                                  and d.[EXCLUSION FLAG (Y = EXCLUDE)]=''N''
                                  and a.[EXCLUSION FLAG (Y = EXCLUDE)]=''N''   
								  
	
                    
WHERE [service category] not in (''100'',''101'')
and a.[BENEFIT PAYMENT CONTRACT STATUS] in (''OC'', ''OX'')
 

group by
d.[CARRIER_ID],
d.[PDR PRODUCT ID], 
d.[3DIGIT ZIP CODE],
case when a.[claim type]=1 then ''I'' when a.[claim type]=3 then ''P'' else ''O'' end,
a.[ORIGINAL CLAIM NUMBER]
'

  EXEC(@SQL)
  PRINT (@SQL)
 FETCH NEXT FROM schema_cursor 
        INTO @schema_name
        END 
        CLOSE schema_cursor
        DEALLOCATE schema_cursor

---unusable zips -258,045.53, 214 rows
Delete from analytics.OP_OON_claims
where zip3 in ('*','IN','M2R','ZZZ','') 
 

---Determine what % of them are above the $1000 Threshold
drop table if exists #temp
select 
zip3,
ctype,
sum(case when billed >=1000 then billed else 0 end)/sum(billed) as  above1000,
sum(case when billed <1000 then billed else 0 end)/sum(billed) as below1000,
sum(billed) as billed,
sum(admit) as admit,
sum(utilization) as utilization
into #temp
from analytics.OP_OON_claims
group by
zip3,
ctype


--Determine a natl avg for those zips we don't have info for
drop table if exists #temp_natl
select 
ctype,
sum(case when billed >=1000 then billed else 0 end)/sum(billed) as  above1000,
sum(case when billed <1000 then billed else 0 end)/sum(billed) as below1000,
sum(billed) as billed,
sum(admit) as admit,
sum(utilization) as utilization
into #temp_natl
from analytics.OP_OON_claims
group by
ctype

select * from #temp_natl

--Grab average OX discount from base  uds claims file
drop table if exists #oxdisc
select
[3 Digit Member ZIP Code],
case when [Claim Type]='I' then 'IP' when [Claim Type]='O' then 'OP' else 'PR' end as ctype,
1-sum([Adjusted Allowed $ - Annual])/sum([Actual Eligible Billed $ - Annual]) as ox_disc --using adj all because of BCBS MA
into #oxdisc
From OUTPUT_STD.[UDS PMPM - Claims Data]
where [Product Indicator]='PPO01'
and [pdr product id] not in ('CAB1')
and [Benefit/Contract Status Indicator]='OX'
group by
[3 Digit Member ZIP Code],
case when [Claim Type]='I' then 'IP' when [Claim Type]='O' then 'OP' else 'PR' end




---Merge in with HRGI File
drop table if exists #temp2
select a.*, 
case when b.above1000 is null then c.above1000 else b.above1000 end as above1000,
case when b.below1000 is null then c.below1000 else b.below1000 end as below1000,
b.billed,
b.admit,
b.utilization,
d.ox_disc
into #temp2
from xUDSDiscount_2020CY.analytics.hrgi_info as a 
left join  #temp as b
on a.zip3=b.zip3
and a.ctype= case when b.ctype ='I' then 'IP' when b.ctype='O' then 'OP' else 'PR'  end
left join #temp_natl as c
on a.ctype=c.ctype
left join #oxdisc as d
on a.zip3=d.[3 Digit Member ZIP Code]
and a.ctype=d.ctype

 
--create final values, map in market and state
drop table if exists #mkts
select distinct zip3, [chp_market_subsection_name] as market
into #mkts
from  [xClaims_2020CY].[reference].[Mapping, Standard:  ValueQuest Markets]

--making an assumption for OC and OX billed based on the % above and below 1000
drop table if exists #temp3
select 
a.zip3,
a.ctype,
m.market,
s.[state],
a.volume,
billed*successrate*above1000 as oc_billed,
billed*successrate*above1000*(1-savingspct) as oc_allowed,
(billed *(1-successrate)*above1000) + (billed*below1000 )as ox_billed, --New change in CY2019
(1-ox_disc) * (billed *(1-successrate)*above1000 + billed*below1000 )as ox_allowed, --New change in CY2019
billed as oon_billed,
admit*successrate*above1000 as oc_admit,
(admit*(1-successrate)*above1000) +(admit*below1000)as ox_admit, --New change in CY2019
utilization*successrate*above1000 as oc_utilization,
(utilization*(1-successrate)*above1000) +(utilization*below1000) as ox_utilization, --New change in CY2019
admit as oon_admit,
utilization as oon_utilization
into #temp3
from #temp2 as a
left join #mkts m
on a.zip3=m.zip3
left join xUDSDiscount_2020CY.reference.state_lookup s
on a.zip3=s.zip3




--Overwrite nulls with zeroes
UPDATE #temp3
 SET oc_billed = 0
 WHERE oc_billed is NULL

 UPDATE #temp3
 SET ox_billed = 0
 WHERE ox_billed is NULL

 UPDATE #temp3
 SET oc_allowed = 0
 WHERE oc_allowed is NULL


  UPDATE #temp3
 SET oon_billed = 0
 WHERE oon_billed is NULL

  UPDATE #temp3
 SET ox_allowed = ox_billed
 WHERE ox_allowed  is NULL

  UPDATE #temp3
 SET oc_admit = 0
 WHERE oc_admit is NULL

  UPDATE #temp3
 SET ox_admit = 0
 WHERE ox_admit is NULL

 UPDATE #temp3
 SET ox_utilization = 0
 WHERE ox_utilization is NULL

 UPDATE #temp3
 SET oc_utilization = 0
 WHERE oc_utilization is NULL



 --same process to create factors as for MP

 

   

---Calculations at a market level
drop table if exists #mkt_result
select
market,
ctype,
sum(volume) as hrgi_billed_mkt,
case when sum(oon_billed)=0 then 0 else sum(oc_billed)/sum(oon_billed) end as hrgi_oc_pct_mkt,
case when sum(oon_billed)=0 then 0 else sum(ox_billed)/sum(oon_billed) end as hrgi_ox_pct_mkt,
case when sum(oc_billed)=0 then 0 else 1-sum(oc_allowed)/sum(oc_billed) end as hrgi_oc_disc_mkt,
case when sum(ox_billed)=0 then 0 else 1-sum(ox_allowed)/sum(ox_billed) end as hrgi_ox_disc_mkt,
case when sum(oon_admit)=0 then 0 else sum(oc_admit)/sum(oon_admit) end as hrgi_oc_admit_mkt,
case when sum(oon_admit)=0 then 0 else sum(ox_admit)/sum(oon_admit) end as hrgi_ox_admit_mkt,
case when sum(oon_utilization)=0 then 0 else sum(oc_utilization)/sum(oon_utilization) end as hrgi_oc_utilization_mkt,
case when sum(oon_utilization)=0 then 0 else sum(ox_utilization)/sum(oon_utilization) end as hrgi_ox_utilization_mkt
into #mkt_result
from #temp3
group by
market,
ctype

select top 10 * from #mkt_result



---Calculations at a state level
drop table if exists #st_result
select
[state],
ctype,
sum(volume) as hrgi_billed_st,
case when sum(oon_billed)=0 then 0 else sum(oc_billed)/sum(oon_billed) end as hrgi_oc_pct_st,
case when sum(oon_billed)=0 then 1 else sum(ox_billed)/sum(oon_billed) end as hrgi_ox_pct_st,
case when sum(oc_billed)=0 then 0 else 1-sum(oc_allowed)/sum(oc_billed) end as hrgi_oc_disc_st,
case when sum(ox_billed)=0 then 0 else 1-sum(ox_allowed)/sum(ox_billed) end as hrgi_ox_disc_st,
case when sum(oon_admit)=0 then 0 else sum(oc_admit)/sum(oon_admit) end as hrgi_oc_admit_st,
case when sum(oon_admit)=0 then 0 else sum(ox_admit)/sum(oon_admit) end as hrgi_ox_admit_st,
case when sum(oon_utilization)=0 then 0 else sum(oc_utilization)/sum(oon_utilization) end as hrgi_oc_utilization_st,
case when sum(oon_utilization)=0 then 0 else sum(ox_utilization)/sum(oon_utilization) end as hrgi_ox_utilization_st
into #st_result
from #temp3
group by
[state],
ctype


---Calculations at a National level
drop table if exists #nat_result
select
ctype,
sum(volume) as hrgi_billed_nat,
case when sum(oon_billed)=0 then 0 else sum(oc_billed)/sum(oon_billed) end as hrgi_oc_pct_nat,
case when sum(oon_billed)=0 then 1 else sum(ox_billed)/sum(oon_billed) end as hrgi_ox_pct_nat,
case when sum(oc_billed)=0 then 0 else 1-sum(oc_allowed)/sum(oc_billed) end as hrgi_oc_disc_nat,
case when sum(ox_billed)=0 then 0 else 1-sum(ox_allowed)/sum(ox_billed) end as hrgi_ox_disc_nat,
case when sum(oon_admit)=0 then 0 else sum(oc_admit)/sum(oon_admit) end as hrgi_oc_admit_nat,
case when sum(oon_admit)=0 then 0 else sum(ox_admit)/sum(oon_admit) end as hrgi_ox_admit_nat,
case when sum(oon_utilization)=0 then 0 else sum(oc_utilization)/sum(oon_utilization) end as hrgi_oc_utilization_nat,
case when sum(oon_utilization)=0 then 0 else sum(ox_utilization)/sum(oon_utilization) end as hrgi_ox_utilization_nat
into #nat_result
from #temp3
group by
ctype

Select * from #nat_result

--select * into  reference.state_lookup from xUDSDiscount_2020CY.reference.state_lookup 

---Pull together final values
--Pull together all combos in the home data

---Pull together final values
--Pull together all combos in the home data
drop table  if exists #temp4
select distinct
a.[3 Digit Member ZIP Code] as zip3, 
a. [PDR Product ID] as pdr_product_id,
m.market,
s.[state],
case when a.[Claim Type]='I' then 31000
when a.[Claim Type]='O' then 627000
else 483000 end as threshold,
case when a.[Claim Type]='I' then 'IP' when a.[Claim Type]='O' then 'OP' else 'PR' end as ctype
into #temp4
from OUTPUT_STD.[UDS PMPM - Claims Data] as a
left join #mkts m
on a.[3 Digit Member ZIP Code]=m.zip3
left join reference.state_lookup s
on a.[3 Digit Member ZIP Code]=s.zip3
where a.[Benefit/Contract Status Indicator] in('OC', 'OX')


--Pull together info
drop table if exists #temp5
select 
a.zip3,
a.pdr_product_id,
a.ctype,
case when m.hrgi_billed_mkt >= threshold then hrgi_oc_pct_mkt 
when s.hrgi_billed_st >= threshold then hrgi_oc_pct_st
else n.hrgi_oc_pct_nat end as hrgi_oc_pct,

case when m.hrgi_billed_mkt >= threshold then hrgi_oc_disc_mkt 
when s.hrgi_billed_st >= threshold then hrgi_oc_disc_st
else n.hrgi_oc_disc_nat end as hrgi_oc_disc,

case when m.hrgi_billed_mkt >= threshold then hrgi_ox_disc_mkt 
when s.hrgi_billed_st >= threshold then hrgi_ox_disc_st
else n.hrgi_ox_disc_nat end as hrgi_ox_disc,

case when m.hrgi_billed_mkt >= threshold then hrgi_oc_admit_mkt 
when s.hrgi_billed_st >= threshold then hrgi_oc_admit_st
else n.hrgi_oc_admit_nat end as hrgi_oc_admit_pct,

case when m.hrgi_billed_mkt >= threshold then hrgi_oc_utilization_mkt 
when s.hrgi_billed_st >= threshold then hrgi_oc_utilization_st
else n.hrgi_oc_utilization_nat end as hrgi_oc_utilization_pct,

--FLags to show what level we used
case when m.hrgi_billed_mkt >= threshold then 'Market'
when s.hrgi_billed_st >= threshold then 'State'
else 'Natl' end as hrgi_flag
into #temp5
from #temp4 as a
left join #mkt_result m 
on a.market=m.market
and a.ctype=m.ctype
left join #st_result s
on a.[state]=s.[state]
and a.ctype=s.ctype
left join #nat_result n
on a.ctype=n.ctype
order by zip3, ctype




Drop table if exists .analytics.hrgi_factors
select
zip3,
pdr_product_id,
ctype,
hrgi_oc_pct,
(1- hrgi_oc_pct) as hrgi_ox_pct,
hrgi_oc_disc,
hrgi_ox_disc,
hrgi_oc_admit_pct,
(1- hrgi_oc_admit_pct) as hrgi_ox_admit_pct,
hrgi_oc_utilization_pct,
(1- hrgi_oc_utilization_pct) as hrgi_ox_utilization_pct,
hrgi_flag
into analytics.hrgi_factors
from #temp5 

select * from analytics.hrgi_factors



--Update so TOS are same as other table
UPDATE analytics.hrgi_factors
 SET ctype='I'
 WHERE ctype='IP'

 UPDATE analytics.hrgi_factors
 SET ctype='O'
 WHERE ctype='OP'

 UPDATE analytics.hrgi_factors
 SET ctype='P'
 WHERE ctype='PR'




 ------------------------------------------------
 ----------------BCBS AZ ------------------------
 ------------------------------------------------
 --to create analytics.hrgi_info_BCBSAZ use path: \\CHP-FS04\CQData\UDS Discount\MY20 UDS Discount\TPV Factors\AZ_HRGi_factors_MY20.xlsx
 select * into XUDS_PMPM_2020CY.analytics.hrgi_info_BCBSAZ from xUDSDiscount_2020cY.analytics.hrgi_info_BCBSAZ
 select * from XUDS_PMPM_2020CY.analytics.hrgi_info_BCBSAZ


 update XUDS_PMPM_2020CY.analytics.hrgi_info_BCBSAZ
 set ctype='P'
 where ctype='PR'

  update XUDS_PMPM_2020CY.analytics.hrgi_info_BCBSAZ
 set ctype='O'
 where ctype='OP'

  update XUDS_PMPM_2020CY.analytics.hrgi_info_BCBSAZ
 set ctype='I'
 where ctype='IP'


---Merge in with HRGI File
drop table if exists #temp2_AZ
select a.*, 
case when b.above1000 is null then c.above1000 else b.above1000 end as above1000,
case when b.below1000 is null then c.below1000 else b.below1000 end as below1000,
b.billed,
b.admit,
b.utilization,
d.ox_disc
into #temp2_AZ
from XUDS_PMPM_2020CY.analytics.hrgi_info_BCBSAZ as a ---HRGI facotor AZ table 
left join  #temp as b
on a.zip3=b.zip3
and a.ctype=b.ctype
left join #temp_natl as c
on a.ctype=c.ctype
left join #oxdisc as d
on a.zip3=d.[3 Digit Member ZIP Code]
and a.ctype=case when d.ctype='OP' then 'O' when d.ctype='PR' then 'P' when d.ctype='IP' then'I' end


select * from #temp2_AZ order by 2,1
select * from #oxdisc order by 2,1
select * from #temp
--making an assumption for OC and OX billed based on the % above and below 1000
drop table if exists #temp3_AZ
select 
a.zip3,
a.ctype,
m.market,
s.[state],
a.volume,
billed*successrate*above1000 as oc_billed,
billed*successrate*above1000*(1-savingspct) as oc_allowed,
(billed *(1-successrate)*above1000) + (billed*below1000 )as ox_billed, 
(1-ox_disc) * (billed *(1-successrate)*above1000 + billed*below1000 )as ox_allowed, 
billed as oon_billed,
admit*successrate*above1000 as oc_admit,
(admit*(1-successrate)*above1000) +(admit*below1000)as ox_admit, --New change in CY2019
utilization*successrate*above1000 as oc_utilization,
(utilization*(1-successrate)*above1000) +(utilization*below1000) as ox_utilization, 
admit as oon_admit,
utilization as oon_utilization
into #temp3_AZ
from #temp2_AZ as a
left join #mkts m
on a.zip3=m.zip3
left join reference.state_lookup s
on a.zip3=s.zip3

select * from #temp3_AZ  WHERE ox_allowed  is NULL

--Overwrite nulls with zeroes
UPDATE #temp3_AZ
 SET oc_billed = 0
 WHERE oc_billed is NULL

 UPDATE #temp3_AZ
 SET ox_billed = 0
 WHERE ox_billed is NULL

 UPDATE #temp3_AZ
 SET oc_allowed = 0
 WHERE oc_allowed is NULL

 UPDATE #temp3_AZ
 SET oon_billed = 0
 WHERE oon_billed is NULL

  UPDATE #temp3_AZ
 SET ox_allowed = ox_billed
 WHERE ox_allowed  is NULL


 
  UPDATE #temp3_AZ
 SET oc_admit = 0
 WHERE oc_admit is NULL

  UPDATE #temp3_AZ
 SET ox_admit = 0
 WHERE ox_admit is NULL

 UPDATE #temp3_AZ
 SET ox_utilization = 0
 WHERE ox_utilization is NULL

 UPDATE #temp3_AZ
 SET oc_utilization = 0
 WHERE oc_utilization is NULL

--same process to create factors as for MP

---Calculations at a market level
drop table if exists #mkt_result_AZ
select
market,
ctype,
sum(volume) as hrgi_billed_mkt,
case when sum(oon_billed)=0 then 0 else sum(oc_billed)/sum(oon_billed) end as hrgi_oc_pct_mkt,
case when sum(oon_billed)=0 then 0 else sum(ox_billed)/sum(oon_billed) end as hrgi_ox_pct_mkt,
case when sum(oc_billed)=0 then 0 else 1-sum(oc_allowed)/sum(oc_billed) end as hrgi_oc_disc_mkt,
case when sum(ox_billed)=0 then 0 else 1-sum(ox_allowed)/sum(ox_billed) end as hrgi_ox_disc_mkt,
case when sum(oon_admit)=0 then 0 else sum(oc_admit)/sum(oon_admit) end as hrgi_oc_admit_mkt,
case when sum(oon_admit)=0 then 0 else sum(ox_admit)/sum(oon_admit) end as hrgi_ox_admit_mkt,
case when sum(oon_utilization)=0 then 0 else sum(oc_utilization)/sum(oon_utilization) end as hrgi_oc_utilization_mkt,
case when sum(oon_utilization)=0 then 0 else sum(ox_utilization)/sum(oon_utilization) end as hrgi_ox_utilization_mkt
into #mkt_result_AZ
from #temp3_AZ
group by
market,
ctype




---Calculations at a state level
drop table if exists #st_result_AZ
select
[state],
ctype,
sum(volume) as hrgi_billed_st,
case when sum(oon_billed)=0 then 0 else sum(oc_billed)/sum(oon_billed) end as hrgi_oc_pct_st,
case when sum(oon_billed)=0 then 1 else sum(ox_billed)/sum(oon_billed) end as hrgi_ox_pct_st,
case when sum(oc_billed)=0 then 0 else 1-sum(oc_allowed)/sum(oc_billed) end as hrgi_oc_disc_st,
case when sum(ox_billed)=0 then 0 else 1-sum(ox_allowed)/sum(ox_billed) end as hrgi_ox_disc_st,
case when sum(oon_admit)=0 then 0 else sum(oc_admit)/sum(oon_admit) end as hrgi_oc_admit_st,
case when sum(oon_admit)=0 then 0 else sum(ox_admit)/sum(oon_admit) end as hrgi_ox_admit_st,
case when sum(oon_utilization)=0 then 0 else sum(oc_utilization)/sum(oon_utilization) end as hrgi_oc_utilization_st,
case when sum(oon_utilization)=0 then 0 else sum(ox_utilization)/sum(oon_utilization) end as hrgi_ox_utilization_st
into #st_result_AZ
from #temp3_AZ
group by
[state],
ctype


---Calculations at a National level
drop table if exists #nat_result_AZ
Select
ctype,
sum(volume) as hrgi_billed_nat,
case when sum(oon_billed)=0 then 0 else sum(oc_billed)/sum(oon_billed) end as hrgi_oc_pct_nat,
case when sum(oon_billed)=0 then 1 else sum(ox_billed)/sum(oon_billed) end as hrgi_ox_pct_nat,
case when sum(oc_billed)=0 then 0 else 1-sum(oc_allowed)/sum(oc_billed) end as hrgi_oc_disc_nat,
case when sum(ox_billed)=0 then 0 else 1-sum(ox_allowed)/sum(ox_billed) end as hrgi_ox_disc_nat,
case when sum(oon_admit)=0 then 0 else sum(oc_admit)/sum(oon_admit) end as hrgi_oc_admit_nat,
case when sum(oon_admit)=0 then 0 else sum(ox_admit)/sum(oon_admit) end as hrgi_ox_admit_nat,
case when sum(oon_utilization)=0 then 0 else sum(oc_utilization)/sum(oon_utilization) end as hrgi_oc_utilization_nat,
case when sum(oon_utilization)=0 then 0 else sum(ox_utilization)/sum(oon_utilization) end as hrgi_ox_utilization_nat
into #nat_result_AZ
from #temp3_AZ
group by
ctype


select * from #st_result_AZ
select * from #nat_result_AZ



---Pull together final values
--Pull together all combos in the home data
drop table  if exists #temp4_AZ
select distinct
a.[3 Digit Member ZIP Code] as zip3, 
a. [PDR Product ID] as pdr_product_id,
m.market,
s.[state],
case when a.[Claim Type]='I' then 31000
when a.[Claim Type]='O' then 627000
else 483000 end as threshold,
a.[Claim Type] as ctype
--case when a.[Claim Type]='I' then 'IP' when a.[Claim Type]='O' then 'OP' else 'PR' end as ctype
into #temp4_AZ
from OUTPUT_STD.[UDS PMPM - Claims Data] as a
left join #mkts m
on a.[3 Digit Member ZIP Code]=m.zip3
left join reference.state_lookup s
on a.[3 Digit Member ZIP Code]=s.zip3
where a.[Benefit/Contract Status Indicator] in('OC', 'OX')




--Pull together info
drop table if exists #temp5_AZ
select 
a.zip3,
a.pdr_product_id,
a.ctype,
case when m.hrgi_billed_mkt >= threshold then hrgi_oc_pct_mkt 
when s.hrgi_billed_st >= threshold then hrgi_oc_pct_st
else n.hrgi_oc_pct_nat end as hrgi_oc_pct,

case when m.hrgi_billed_mkt >= threshold then hrgi_oc_disc_mkt 
when s.hrgi_billed_st >= threshold then hrgi_oc_disc_st
else n.hrgi_oc_disc_nat end as hrgi_oc_disc,

case when m.hrgi_billed_mkt >= threshold then hrgi_ox_disc_mkt 
when s.hrgi_billed_st >= threshold then hrgi_ox_disc_st
else n.hrgi_ox_disc_nat end as hrgi_ox_disc,

case when m.hrgi_billed_mkt >= threshold then hrgi_oc_admit_mkt 
when s.hrgi_billed_st >= threshold then hrgi_oc_admit_st
else n.hrgi_oc_admit_nat end as hrgi_oc_admit_pct,

case when m.hrgi_billed_mkt >= threshold then hrgi_oc_utilization_mkt 
when s.hrgi_billed_st >= threshold then hrgi_oc_utilization_st
else n.hrgi_oc_utilization_nat end as hrgi_oc_utilization_pct,

--FLags to show what level we used
case when m.hrgi_billed_mkt >= threshold then 'Market'
when s.hrgi_billed_st >= threshold then 'State'
else 'Natl' end as hrgi_flag_AZ
into #temp5_AZ
from #temp4_AZ as a
left join #mkt_result_AZ m 
on a.market=m.market
and a.ctype=m.ctype

left join #st_result_AZ s
on a.[state]=s.[state]
and a.ctype=s.ctype

left join #nat_result_AZ n
on a.ctype=n.ctype
order by zip3, ctype


select * from #temp4_AZ where pdr_product_id='mab1'
select * from #mkt_result_AZ 
select * from #st_result_AZ 
select * from #temp5_AZ  order by 1,2,3



Drop table if exists analytics.hrgi_factors_BCBSAZ
select
	zip3,
	pdr_product_id,
	ctype,
	hrgi_oc_pct,
	(1- hrgi_oc_pct) as hrgi_ox_pct,
	hrgi_oc_disc,
	hrgi_ox_disc,
	hrgi_oc_admit_pct,
	(1- hrgi_oc_admit_pct) as hrgi_ox_admit_pct,
	hrgi_oc_utilization_pct,
	(1- hrgi_oc_utilization_pct) as hrgi_ox_utilization_pct,
    hrgi_flag_AZ
into analytics.hrgi_factors_BCBSAZ
from #temp5_AZ


select top 2 * from analytics.hrgi_factors_BCBSAZ
select top 2 * from analytics.hrgi_factors

Delete from analytics.hrgi_factors where pdr_product_id in ('azl1', 'azb1')
Insert into analytics.hrgi_factors select * from analytics.hrgi_factors_BCBSAZ where pdr_product_id in ('azl1', 'azb1')

end

GO
/****** Object:  StoredProcedure [analytics].[step_5_Final_factors]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ================================================================
-- Author:		Tola Kalejaiye
-- Create date: 3/22/2020
-- Description:	Pulling together MP, HRGI and Non-mulitplan factors
-- =================================================================
CREATE PROCEDURE [analytics].[step_5_Final_factors]
AS
BEGIN

Select top 0 * into analytics.volume_neg_svcs from xUDS_PMPM_2019CY.analytics.volume_neg_svcs_tk 

Truncate table analytics.volume_neg_svcs
Declare	@schema_name		VARCHAR(20)	,					
        @SQL				VARCHAR(MAX)

Declare schema_cursor cursor for
	Select [schema_name] 
	from process.data_status_tracking 
	 where include_in_uds_pmpm=1
        and pdr_product_id in(select distinct pdr_product_id from Reference.ref_tpv_factor_development where TPV = 'Yes') or carrier_group_code=660
	  

OPEN schema_cursor

	FETCH NEXT FROM schema_cursor
	INTO @schema_name 
	
	WHILE @@FETCH_STATUS = 0
	BEGIN


---Step 1: Add up experience for plans that use MultiPlan or HRGi,

SET @SQL='insert into analytics.volume_neg_svcs with (tablock)
select  
       [chp_carrier_id],  
       [pdr_product_id],    
       zip3,    
	   home_hosted_indicator,
	   claim_type as ctype,'+CHAR(13)+CHAR(10) +
	   case when @schema_name='P957_CAB2' then '''HRGI''' ELSE '''MP''' END+' as Vendor_name,
       sum([adjusted_billed_amount]) as billed   
from '+@schema_name+'.[vw_proc_claims_financial_20_detail]  
where  atl_grouper_exclusion_flag=''N''  
and [flag_exclude_groups] = ''N''  
and exclude_medical_benefit_flag=''N''
and insurance_arrangement=''S''
and benefit_payment_contract_status in(''OC'', ''OX'')
group by  
          [chp_carrier_id],  
       [pdr_product_id],    
       zip3,    
	   home_hosted_indicator,
	   claim_type 

'

  EXEC(@SQL)
  PRINT (@SQL)
 FETCH NEXT FROM schema_cursor 
        INTO @schema_name
        END 
        CLOSE schema_cursor
        DEALLOCATE schema_cursor



Delete from analytics.volume_neg_svcs
where pdr_product_id in(select distinct pdr_product_id from Reference.ref_tpv_factor_development where Delete_home = 'Yes') and home_hosted_indicator='HOME' 

drop table if exists #temp_volume
select 
zip3,
ctype,
sum(case when vendor_name='MP' then billed else 0 end) as mp_volume,
sum(case when vendor_name='HRGi' then billed else 0 end) as hrgi_volume,
sum(billed) as tot_volume
into #temp_volume
from analytics.volume_neg_svcs
group by zip3, ctype


SELECT * FROM  analytics.volume_neg_svcs order by vendor_name
select distinct vendor_name from analytics.volume_neg_svcs
---Step 2; combine factors using a weighted average
drop table if exists #temp1
select 
a.zip3,
a.pdr_product_id,
a.ctype,
a.mp_oc_pct,
a.mp_ox_pct,
a.mp_oc_disc,
a.mp_ox_disc,
a.mp_oc_admit_pct,
a.mp_ox_admit_pct,
a.mp_oc_utilization_pct,
a.mp_ox_utilization_pct,
c.hrgi_oc_pct,
c.hrgi_ox_pct,
c.hrgi_oc_disc,
c.hrgi_ox_disc,
c.hrgi_oc_admit_pct,
c.hrgi_ox_admit_pct,
c.hrgi_oc_utilization_pct,
c.hrgi_ox_utilization_pct,
case when b.tot_volume = 0 then 1 else b.mp_volume/b.tot_volume end as mp_pct,
case when b.tot_volume = 0 then 1 else b.hrgi_volume/b.tot_volume end as hrgi_pct
into #temp1
from analytics.mp_factors_Step1 as a
join  analytics.hrgi_factors c
on a.zip3=c.zip3
and a.pdr_product_id=c.pdr_product_id
and a.ctype=c.ctype
left join #temp_volume as b
on a.zip3=b.zip3
and a.ctype=b.ctype

update #temp1
set mp_pct=1
where mp_pct is null

update #temp1
set hrgi_pct=0
where hrgi_pct is null



----weighting....
drop table if exists #temp2
select
zip3,
pdr_product_id,
ctype,
(mp_pct*mp_oc_pct + hrgi_pct*hrgi_oc_pct) as oc_pct, 
(mp_pct*mp_ox_pct + hrgi_pct*hrgi_ox_pct) as ox_pct, 
(mp_pct*mp_oc_disc + hrgi_pct*hrgi_oc_disc) as oc_disc,
(mp_pct*mp_ox_disc + hrgi_pct*hrgi_ox_disc) as ox_disc,
(mp_pct*mp_oc_admit_pct + hrgi_pct*hrgi_oc_admit_pct) as oc_admit,
(mp_pct*mp_ox_admit_pct + hrgi_pct*hrgi_ox_admit_pct) as ox_admit,
(mp_pct*mp_oc_utilization_pct + hrgi_pct*hrgi_oc_utilization_pct) as oc_utilization,
(mp_pct*mp_ox_utilization_pct + hrgi_pct*hrgi_ox_utilization_pct) as ox_utilization
into #temp2
from #temp1



drop table if exists #temp_nmp
select 
	
	[3 Digit Member ZIP Code] as zip3,
	[PDR Product ID] as pdr_product_id,
	[Claim Type] as ctype,
	sum(case when [Benefit/Contract Status Indicator]='OC' then [Adjusted Eligible Billed $ - Annual] else 0 end) as oc_billed,
	sum(case when [Benefit/Contract Status Indicator]='OX' then [Adjusted Eligible Billed $ - Annual] else 0 end) as ox_billed,
	sum([Adjusted Eligible Billed $ - Annual]) as oon_billed
into #temp_nmp	
from OUTPUT_STD.[UDS PMPM - Claims Data_NonMultiplan]
where [Benefit/Contract Status Indicator] in ('OC', 'OX')
group by
	[3 Digit Member ZIP Code],
	[PDR Product ID],
	[Claim Type]


drop table if exists #tempnmp2;
	select
	zip3,
	pdr_product_id,
	ctype,
	case when sum(oon_billed) = 0 then 0 else sum(oc_billed)/sum(oon_billed) end as nmp_oc_pct
	into #tempnmp2
	from #temp_nmp
	group by
	zip3,
	pdr_product_id,
	ctype

--- limit OC % 
Drop table if exists #temp3
select 
t.zip3,
t.pdr_product_id,
t.ctype,
--If Non MP OC Percent is greater than calc MP OC pct, then set MP penetration = Non-MP Penetration
case when f.oc_pct < t.nmp_oc_pct then t.nmp_oc_pct else f.oc_pct end as mp_oc_pct,
f.oc_disc as mp_oc_disc,
f.ox_Disc as mp_ox_disc,
f.oc_admit as mp_oc_admit,
f.ox_admit as mp_ox_admit,
f.oc_utilization as mp_oc_utilization,
f.ox_utilization as mp_ox_utilization
into #temp3
from #tempnmp2 as t
left join #temp2 as f
on t.zip3=f.zip3
and t.pdr_product_id=f.pdr_product_id
and t.ctype=f.ctype


Drop table if exists #temp4
select *, 1-mp_oc_pct as mp_ox_pct
into #temp4
from #temp3

select * from #temp4 
WHERE mp_ox_admit IS NULL or mp_oc_admit is null
order by ctype, mp_oc_disc desc


--Map into a final file
drop table if exists analytics.OON_factors
select  c.zip3,
       c.pdr_product_id,
	   c.ctype,       
case when d.mp_oc_pct  is null then c.oc_pct else d.mp_oc_pct end  as mp_oc_pct,
case when d.mp_ox_pct  is null then c.ox_pct else d.mp_ox_pct end as mp_ox_pct,
case when d.mp_oc_disc is null then c.oc_disc else d.mp_oc_disc end  as mp_oc_disc,
case when d.mp_ox_disc is null then c.ox_disc else d.mp_ox_disc end as mp_ox_disc,
case when d.mp_ox_admit is null then c.ox_admit else d.mp_ox_admit end as mp_ox_admit,
case when d.mp_oc_admit is null then c.oc_admit else d.mp_oc_admit end as mp_oc_admit,
case when d.mp_ox_utilization is null then c.ox_utilization else d.mp_ox_utilization end as mp_ox_utilization,
case when d.mp_oc_utilization is null then c.oc_utilization else d.mp_oc_utilization end as mp_oc_utilization,
case when c.pdr_product_id in(select distinct pdr_product_id from Reference.ref_tpv_factor_development where mp_home_Gap = 'Yes') then 'GAP'
when c.pdr_product_id in(select distinct pdr_product_id from Reference.ref_tpv_factor_development where mp_home_Y_MP = 'Yes' and pdr_product_id <> 'ncb2') then 'MP' 
else 'Non' end as home_flag
into analytics.OON_factors
from  #temp2 as c
left join #temp4 d
on d.pdr_product_id=c.pdr_product_id
and d.zip3=c.zip3
and d.ctype=c.ctype

select * from analytics.OON_factors WHERE (mp_ox_admit IS NULL or mp_oc_admit is null) and ctype='I'
order by ctype, mp_oc_disc desc

Update a
set mp_oc_admit=1
from analytics.OON_factors a
where mp_oc_admit is null and ctype='I'

Update a
set mp_ox_admit=0
from analytics.OON_factors a
where mp_ox_admit is null and ctype='I'

Update a
set mp_oc_utilization=0, mp_ox_utilization=0
from analytics.OON_factors a
where mp_oc_utilization is null



end
GO
/****** Object:  StoredProcedure [appendices].[sp_zzz_create_Appendix_J]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [appendices].[sp_zzz_create_Appendix_J] 
/*****************************************************************************
 Description: 
    Create Appendix H for each Plan and One for all plans


 Parameters:
    schema_name - the plan product to run

 Return:

 Notes:

 Change History:
	
	2016-07-27 SL - initial version
	2017-06-26 Ankita - added 2 new filters to match the number with output tables 
	2018-03-05 SL - revise for CY16
	2018-10-16 SL - revise for CY17
	                change from adjusted allowed to actual allowed
	2018-10-19 SL - version to create Anthem HOME only
	2019-12-11 TK- made changes to table name, removed the home_hosted_indicator as the CY18 was run from the begining w/o anthem hosted
 
*****************************************************************************/
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = ''
	SET @Logging_Values = ISNULL(CAST(NULL AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/


begin




if OBJECT_ID ('appendices.Appendix_J_Diagnosis_Code_Distribution_proc_00', 'U') is not null
drop table appendices.Appendix_J_Diagnosis_Code_Distribution_proc_00

select
	chp_carrier_id,
	pdr_product_id,
	claim_type,
	case when flag_exclude_diagnosis_code = 'Y' then 'E' 
	     when cnt_diagnosis_code = 0 then '1' 
		 when claim_type = 'P' and cnt_diagnosis_code > 4 then '4' 
		 else cast(cnt_diagnosis_code as varchar(10)) end as cnt_diagnosis_code,
	sum(allowed_amount) as allowed_amount
into appendices.Appendix_J_Diagnosis_Code_Distribution_proc_00
from
(select 
	coalesce(host_chp_carrier_id, chp_carrier_id) as chp_carrier_id,
	coalesce(host_pdr_product_id, pdr_product_id) as pdr_product_id,
	claim_type,
	flag_exclude_diagnosis_code,
	(case when primary_diagnosis_code like '%[0-9]%[0-9]%' then 1 else 0 end +
	case when diagnosis_code_2 like '%[0-9]%[0-9]%' then 1 else 0 end +
	case when diagnosis_code_3 like '%[0-9]%[0-9]%' then 1 else 0 end +
	case when diagnosis_code_4 like '%[0-9]%[0-9]%' then 1 else 0 end +
	case when diagnosis_code_5 like '%[0-9]%[0-9]%' then 1 else 0 end +
	case when diagnosis_code_6 like '%[0-9]%[0-9]%' then 1 else 0 end +
	case when diagnosis_code_7 like '%[0-9]%[0-9]%' then 1 else 0 end +
	case when diagnosis_code_8 like '%[0-9]%[0-9]%' then 1 else 0 end +
	case when diagnosis_code_9 like '%[0-9]%[0-9]%' then 1 else 0 end) as cnt_diagnosis_code,
	original_claim_number,
	cast(allowed_amount as money)  as allowed_amount
from all_plans.vw_proc_claims_financial_20_detail_b4_exclusion 
where exclusion_flag = 'N'
and exclude_medical_benefit_flag = 'N'
and uds_pmpm_exclusion_flag = 'N'
and age_bracket is not null
and CONCAT(zip3, pdr_product_id)not in( '193PAB6', '193PAB1', '193PAL6', '193DEB1')  --most likely only needed in cy20
and year_month not in ('2021-01','2021-02', '2019-12') --REMOVE FOR CY21

) a				
group by
	chp_carrier_id,
	pdr_product_id,
	claim_type,
	case when flag_exclude_diagnosis_code = 'Y' then 'E' 
	     when cnt_diagnosis_code = 0 then '1' 
		 when claim_type = 'P' and cnt_diagnosis_code > 4 then '4' 
		 else cast(cnt_diagnosis_code as varchar(10)) end

delete from appendices.Appendix_J_Diagnosis_Code_Distribution_proc_00 where pdr_product_id='cal3'	

/*TESTS*/
select SUM(ALLOWED_AMOUNT) as allowed from  appendices.Appendix_J_Diagnosis_Code_Distribution_proc_00 where chp_carrier_id<>9999

select sum([Actual Allowed $ - Annual])  from  OUTPUT_STD.[UDS PMPM - Claims Data] 




if OBJECT_ID ('appendices.Appendix_J_Diagnosis_Code_Distribution_Data', 'U') is not null
drop table appendices.Appendix_J_Diagnosis_Code_Distribution_Data

select
	c.chp_carrier_id,
	c.pdr_product_id,
	p.uds_network_identifier,
	cast(case when p.upload_number = 1 
				then '0101' + cast(right(p.data_year,2) + 0  as varchar (2))
				+'-'+'1231' + cast(right(p.data_year,2) + 0  as varchar (2))
				end as varchar (13)) as service_period,	
	p.plan_state,
	p.uds_prod_ind,
	c.claim_type,
	c.cnt_diagnosis_code,
	--c.cnt_claim,
	c.allowed_amount
into appendices.Appendix_J_Diagnosis_Code_Distribution_Data
from appendices.Appendix_J_Diagnosis_Code_Distribution_proc_00 c
left join
 reference.ref_uds_network_identifier_prod_ind p
on p.uds_chp_carrier_id = c.chp_carrier_id
and p.uds_pdr_product_id = c.pdr_product_id
where p.include_in_uds_pmpm = 1



if object_id('appendices.Appendix J - Diagnosis Code Distribution', 'U') is not null
drop table appendices.[Appendix J - Diagnosis Code Distribution]

select
	chp_carrier_id as [CHP Carrier ID],
	pdr_product_id as [PDR Product ID],
	cast('Blue Cross Blue Shield' as varchar(25)) as [Organization Name],
	uds_network_identifier as [Network Identifier],
	service_period as [Service Period],
	plan_state as [Member State],
	uds_prod_ind as [Product Indicator],
	claim_type as [Claim Type],
	cnt_diagnosis_code as [Number of Diagnosis Codes],
	cast(allowed_amount as decimal(20,2)) as [Actual Allowed Amount],
	NULL as [Filler 1],
	NULL as [Filler 2]
into appendices.[Appendix J - Diagnosis Code Distribution]
from appendices.Appendix_J_Diagnosis_Code_Distribution_Data




end 


/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/

GO
/****** Object:  StoredProcedure [appendices].[sp_zzz_create_Appendix_K]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [appendices].[sp_zzz_create_Appendix_K] 
/*****************************************************************************
 Description: 
    Create Appendix K 


 Parameters:
    schema_name - the plan product to run

 Return:

 Notes:

 Change History:
	
	2016-08-03 SL - initial version
	2016-11-17 SL - use Allowed Amount per firms suggestion in UDS Meeting
	2018-03-05 SL - revise for CY16
	2018-10-17 SL - revise for CY17
	                change from adjusted allowed to actual allowed
	2018-10-19 SL - revise to include Anthem HOME only
 
*****************************************************************************/
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = ''
	SET @Logging_Values = ISNULL(CAST(NULL AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/


begin

--aggregate the data

if OBJECT_ID ('appendices.Appendix_K_Claim_Lags_proc_00', 'U') is not null
drop table appendices.Appendix_K_Claim_Lags_proc_00

select
	coalesce(host_chp_carrier_id, chp_carrier_id) as chp_carrier_id,
	coalesce(host_pdr_product_id, pdr_product_id) as pdr_product_id,
	convert(varchar(6), date_of_service, 112) as incurred_month,
	convert(varchar(6), paid_date, 112) as paid_month,
	sum(adjusted_paid_amount) as paid_amount,  
	sum(cast(allowed_amount as money))  as allowed_amount
into appendices.Appendix_K_Claim_Lags_proc_00
 from all_plans.vw_proc_claims_financial_20_detail_b4_exclusion
where exclusion_flag = 'N'
and exclude_medical_benefit_flag = 'N'
and uds_pmpm_exclusion_flag = 'N'
and age_bracket is not null
and CONCAT(zip3, pdr_product_id)not in( '193PAB6', '193PAB1', '193PAL6', '193DEB1')  --most likely only needed in cy20
and year_month not in ('2021-01','2021-02', '2019-12') --REMOVE FOR CY21
group by
	coalesce(host_chp_carrier_id, chp_carrier_id),
	coalesce(host_pdr_product_id, pdr_product_id),
	convert(varchar(6), date_of_service, 112),
	convert(varchar(6), paid_date, 112)

DELETE FROM appendices.Appendix_K_Claim_Lags_proc_00 WHERE pdr_product_id='CAL3'

--handle paid month < incurred month






if OBJECT_ID ('appendices.Appendix_K_Claim_Lags_proc_10', 'U') is not null
drop table appendices.Appendix_K_Claim_Lags_proc_10

select
	chp_carrier_id,
	pdr_product_id,
	incurred_month,
	case when paid_month < incurred_month then incurred_month else paid_month end as paid_month,
	sum(paid_amount) as paid_amount,
	sum(allowed_amount) as allowed_amount
into appendices.Appendix_K_Claim_Lags_proc_10
from appendices.Appendix_K_Claim_Lags_proc_00
group by
	chp_carrier_id,
	pdr_product_id,
	incurred_month,
	case when paid_month < incurred_month then incurred_month else paid_month end

	--select * from appendices.Appendix_K_Claim_Lags_proc_10 


if OBJECT_ID ('appendices.Appendix_K_Claim_Lags_Data', 'U') is not null
drop table appendices.Appendix_K_Claim_Lags_Data

select
	c.chp_carrier_id,
	c.pdr_product_id,
	p.uds_network_identifier,
	cast(case when p.upload_number = 1 
				then '0101' + cast(right(p.data_year,2) + 0  as varchar (2))
				+'-'+'1231' + cast(right(p.data_year,2) + 0  as varchar (2))
				--else '0701' + cast(right(p.data_year,2) + 0  as varchar (2))
				--+'-'+'0630' + cast(right(p.data_year,2) + 1  as varchar (2))
				end as varchar (13)) as service_period,	
	p.plan_state,
	p.uds_prod_ind,
	c.incurred_month,
	c.paid_month,
	c.paid_amount, 
	c.allowed_amount
into appendices.Appendix_K_Claim_Lags_Data
from appendices.Appendix_K_Claim_Lags_proc_10 c
left join
reference.ref_uds_network_identifier_prod_ind p
on p.uds_chp_carrier_id = c.chp_carrier_id
and p.uds_pdr_product_id = c.pdr_product_id
where p.include_in_uds_pmpm = 1


--SELECT * FROM appendices.Appendix_K_Claim_Lags_Data where pdr_product_id='alb1'


if object_id('appendices.Appendix K - Claim Lags', 'U') is not null
drop table appendices.[Appendix K - Claim Lags]

select
	chp_carrier_id as [CHP Carrier ID],
	pdr_product_id as [PDR Product ID],
	cast('Blue Cross Blue Shield' as varchar(25)) as [Organization Name],
	uds_network_identifier as [Network Identifier],
	service_period as [Service Period],
	plan_state as [Member State],
	uds_prod_ind as [Product Indicator],
	incurred_month as [Incurred Month and Year],
	paid_month as [Paid Month and Year],
	allowed_amount as [Actual Allowed Amount],  --11-17-16 use Allowed Amount instead of Paid Amount
	NULL as [Filler 1],
	NULL as [Filler 2],
	NULL as [Filler 3],
	NULL as [Filler 4],
	NULL as [Filler 5]
into appendices.[Appendix K - Claim Lags]
from appendices.Appendix_K_Claim_Lags_Data





end 


/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/

SELECT * FROM appendices.[Appendix K - Claim Lags] WHERE [CHP Carrier ID]<>9999

select sum([Actual Allowed Amount]) from appendices.[Appendix K - Claim Lags] WHERE [CHP Carrier ID]<>9999
select sum([Actual Allowed $ - Annual]) from OUTPUT_STD.[UDS PMPM - Claims Data]
GO
/****** Object:  StoredProcedure [dbo].[sp_base_0_source_create_views_for_diagnosis_codes]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_base_0_source_create_views_for_diagnosis_codes]
/*****************************************************************************
 Description: 
    Common process of defining source for membership
	All common process happen in dbo (results refreshed when a plan product is run)


 Parameters:F
    schema_name - the plan product to run

 Return:

 Notes:

 Change History:
	CY2016
	2017-10-16 SL - source the diagnosis codes from the stage raw claims due to DRG group needs to 
					update "outdated" unrecognized ICD-10 CM codes
	2017-12-14 SL - implement dx code patch for duplicated dx code for BC-ID
	2018-07-24 SL - for NDW add professional header dx codes via adding rows in the column mapping table
	2018-07-30 SL - change parameter from @p_schema_name to @p_carrier_id_combo, incorperate into main SP
	2019-06-26 TK - Removed the patch for NC. Issue fixed in CY18 data
	2020-05-13 TK - Decision was made (by Anna) to include external injury codes and since they are not part of the 
	                icd-dx codes, updated the column mapping table to include them as dx codes 18-20 and
					included code to move the position of the code as part of the first 15 dx codes
					where the codes submitted by plan was not up to the 15 on any claim line. Aslo included
					prof header standardization on the column mapping tables as some direct plans also
					submit prof header dx information. This keeps the process standard for all plans.
	2021-08-19 TK - Seperated plans that submit ext injury codes from those that don't. The process runs slower for plans 
	                external injury codes, so separating them allows the process to run fast for most plans.
 
*****************************************************************************/
			                   @p_replace_existing          varchar(1)  = 'Y',
							   @p_debug						varchar(1) = 'N',
							   @p_carrier_id_combo	        varchar(100) = null
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = '@p_schema_name'
	SET @Logging_Values = ISNULL(CAST(@p_carrier_id_combo AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName
		                       , @ProcedureName = @Logging_ProcedureName
							   , @ProcedureDefinition = @Logging_ProcedureDefinition
							   , @ProcedureSchema = @Logging_ProcedureSchema
							   , @LoggingParameters = @Logging_Parameters
							   , @LoggingValues = @Logging_Values
							   , @Callid = @Callid OUTPUT
/*Endof parameter logging*/

begin

declare 
		@diagnosis_code_views nvarchar(max),
		@diagnosis_code_views_1 nvarchar(max),
		@diagnosis_code_views_2 nvarchar(max),
		@diagnosis_code_table_3 nvarchar(max),
		@sql_temp nvarchar(max),
		@dynSQL nvarchar(max),
		@plan_filter varchar(50)

  declare
	@schema_name    varchar(255),
    @chp_carrier_id	varchar(10),
	@pdr_product_id	varchar(10),
	@carrier_group_code varchar(5),
	@data_source varchar(10)


  declare cur_schema_source cursor for
	select 
		carrier_group_code, schema_name, chp_carrier_id, pdr_product_id, data_source
	from process.data_status_tracking a
	  where include_in_uds_pmpm = 1 
	  and exists (select * from xclaims_2020CY.INFORMATION_SCHEMA.tables where TABLE_NAME = 'stage_raw_claims' and TABLE_SCHEMA = a.schema_name) 
	 
	  and carrier_id_combo = isnull(@p_carrier_id_combo, carrier_id_combo)

  open cur_schema_source
  fetch next from cur_schema_source into @carrier_group_code, @schema_name, @chp_carrier_id, @pdr_product_id, @data_source

  while ( @@FETCH_STATUS = 0 )
    begin


--=================================================================================
--Diagnosis Code Views 
--(from stage_raw_claims)
--=================================================================================

set @dynSQL = ''

--Grab column names

set @plan_filter = case when @data_source = 'Plan' then @carrier_group_code when @data_source = 'BHI' then 'NDW' else null end
--print @plan_filter

select @dynSQL = coalesce(@dynSQL,'') + ',convert(varchar(10),'+case when stage_raw_claims_column = '' then 'null' else quotename(stage_raw_claims_column) end + ') as ' +
		quotename(standard_column_name) + '
	'
from process.mapping_columns_dx_codes_raw_to_standard
	where carrier_group_code = ''+@plan_filter+''
	order by column_order


-- New in CY20  - Special view  (p940_NCB2.vw_stage_raw_claims_pmpm ) created due to surrogate data for NCB2 created in another table (NCB3).
-- Check with Ankita the view needs to be created for for future submission.s
	if @schema_name ='P940_NCB2' 
begin

set @diagnosis_code_table_3= 

'
select'+ CHAR(13)+CHAR(10) +
	''''+@chp_carrier_id + ''' as chp_carrier_id'+ CHAR(13)+CHAR(10) +
	','''+@pdr_product_id + ''' as pdr_product_id'+ CHAR(13)+CHAR(10) +
	',chp_row_id'+ CHAR(13)+CHAR(10) +
	@dynSQL+'
into  P940_NCB2.diagnosis_code_proc_03 
from p940_NCB2.vw_stage_raw_claims_pmpm 
'
end

---plans that do not submit external injury codes

if @schema_name  in (select schema_name from process.data_status_tracking where flag_ext_inj_code =0 and include_in_uds_pmpm=1 and schema_name <>'p940_NCB2')
begin

set @diagnosis_code_table_3= replace('
select'+ CHAR(13)+CHAR(10) +
	''''+@chp_carrier_id + ''' as chp_carrier_id'+ CHAR(13)+CHAR(10) +
	','''+@pdr_product_id + ''' as pdr_product_id'+ CHAR(13)+CHAR(10) +
	',chp_row_id'+ CHAR(13)+CHAR(10) +
	@dynSQL+'
into  %schema_name%.diagnosis_code_proc_03 
from xclaims_2020CY.%schema_name%.stage_raw_claims
','%schema_name%',@schema_name)

end



---plans that do  submit external injury codes

if @schema_name in (select schema_name from process.data_status_tracking where flag_ext_inj_code =1)
begin

set @diagnosis_code_views = replace('
create view %schema_name%.vw_diagnosis_code_proc_00 as
select'+ CHAR(13)+CHAR(10) +
	''''+@chp_carrier_id + ''' as chp_carrier_id,'+ CHAR(13)+CHAR(10) +
	''''+@pdr_product_id + ''' as pdr_product_id,'+ CHAR(13)+CHAR(10) +
	'chp_row_id'+ CHAR(13)+CHAR(10) +
	@dynSQL+
'
from xclaims_2020CY.%schema_name%.stage_raw_claims
','%schema_name%',@schema_name)



----------------------------------------unpivot table, separate dx codes from header dx code

set @diagnosis_code_views_1 = replace('
create view %schema_name%.vw_diagnosis_code_proc_01 as 
select
chp_carrier_id,
pdr_product_id,
chp_row_id,
case when col like ''%header%'' and left(col,1)=''P'' then ''1H'' 
     when col like ''%header%'' and left(col,1)<>''P'' then concat(replace(SUBSTRING(col,15,3), ''_'',''''),''H'')
	 when RIGHT(col,2)=''de'' then ''1D''
	 else concat(REPLACE(RIGHT(col,2),''_'',''''),''D'') end as dx_position1,
case when col like ''%header%'' and left(col,1)=''P'' then 101
     when col like ''%header%''  and  left(col,1)<>''P'' and replace(SUBSTRING(col,15,3), ''_'','''')=2 then 102
	 when col like ''%header%'' and  left(col,1)<>''P'' and replace(SUBSTRING(col,15,3), ''_'','''')=3 then 103
	 when col like ''%header%'' and  left(col,1)<>''P'' and replace(SUBSTRING(col,15,3), ''_'','''')=4 then 104
	 when col like ''%header%'' and  left(col,1)<>''P'' and replace(SUBSTRING(col,15,3), ''_'','''')=5 then 105
	 when col like ''%header%'' and  left(col,1)<>''P'' and replace(SUBSTRING(col,15,3), ''_'','''')=6 then 106
	 when col like ''%header%'' and  left(col,1)<>''P'' and replace(SUBSTRING(col,15,3), ''_'','''')=7 then 107
	 when col like ''%header%'' and  left(col,1)<>''P'' and replace(SUBSTRING(col,15,3), ''_'','''')=8 then 108
	 when col like ''%header%'' and  left(col,1)<>''P'' and replace(SUBSTRING(col,15,3), ''_'','''')=9 then 109
	 when col like ''%header%'' and  left(col,1)<>''P'' and replace(SUBSTRING(col,15,3), ''_'','''')=10 then 110
	 when col like ''%header%'' and  left(col,1)<>''P'' and replace(SUBSTRING(col,15,3), ''_'','''')=11 then 111
	 when col like ''%header%'' and  left(col,1)<>''P'' and replace(SUBSTRING(col,15,3), ''_'','''')=12 then 112
	 when right(col,2)=''de'' then 1
 Else REPLACE(RIGHT(col,2),''_'','''') end as position2,
dx_code
from  %schema_name%.vw_diagnosis_code_proc_00
unpivot
(
dx_code  for col in (primary_diagnosis_code, diagnosis_code_2, diagnosis_code_3, diagnosis_code_4, diagnosis_code_5, diagnosis_code_6, diagnosis_code_7,
                     diagnosis_code_8, diagnosis_code_9, diagnosis_code_10, diagnosis_code_11, diagnosis_code_12, diagnosis_code_13, diagnosis_code_14,
					 diagnosis_code_15, diagnosis_code_16, diagnosis_code_17, diagnosis_code_18, diagnosis_code_19, diagnosis_code_20,
					 primary_diagnosis_code_prof_header, diagnosis_code_2_prof_header, diagnosis_code_3_prof_header, diagnosis_code_4_prof_header,
                     diagnosis_code_5_prof_header, diagnosis_code_6_prof_header, diagnosis_code_7_prof_header, diagnosis_code_8_prof_header,
					 diagnosis_code_9_prof_header,diagnosis_code_10_prof_header,diagnosis_code_11_prof_header,diagnosis_code_12_prof_header)
)unp

where (len(dx_code)>0 and dx_code is not null)
','%schema_name%',@schema_name)

---------------------set new dx position with ext injury codes added

set @diagnosis_code_views_2 = replace('
create view %schema_name%.vw_diagnosis_code_proc_02 as 
select
chp_carrier_id,
pdr_product_id,
chp_row_id,
dx_position1,
dx_code,
row_number() over (partition by chp_row_id order by position2) as rnk_num 
from %schema_name%.vw_diagnosis_code_proc_01

','%schema_name%',@schema_name)

----------------------pivot. Keeping prof header position as is
set @diagnosis_code_table_3 = replace('

select 
chp_carrier_id,
pdr_product_id,
chp_row_id,
[D1] as Primary_diagnosis_code,
[D2] as diagnosis_code_2,
[D3] as diagnosis_code_3,
[D4] as diagnosis_code_4,
[D5] as diagnosis_code_5,
[D6] as diagnosis_code_6,
[D7] as diagnosis_code_7,
[D8] as diagnosis_code_8,
[D9] as diagnosis_code_9,
[D10] as diagnosis_code_10,
[D11] as diagnosis_code_11,
[D12] as diagnosis_code_12,
[D13] as diagnosis_code_13,
[D14] as diagnosis_code_14,
[D15] as diagnosis_code_15,
[H1] as primary_diagnosis_code_prof_header,
[H2] as diagnosis_code_2_prof_header,
[H3] as diagnosis_code_3_prof_header,
[H4] as diagnosis_code_4_prof_header,
[H5] as diagnosis_code_5_prof_header,
[H6] as diagnosis_code_6_prof_header,
[H7] as diagnosis_code_7_prof_header,
[H8] as diagnosis_code_8_prof_header,
[H9] as diagnosis_code_9_prof_header,
[H10] as diagnosis_code_10_prof_header,
[H11] as diagnosis_code_11_prof_header,
[H12] as diagnosis_code_12_prof_header
into  %schema_name%.diagnosis_code_proc_03 
 from
(select
chp_carrier_id,
pdr_product_id,
chp_row_id,
dx_code,
case when right (dx_position1,1) =''D'' then concat(''D'',rnk_num) ELSE concat(''H'',SUBSTRING(dx_position1,1,len(dx_position1)-1)) end as rnk_num
from %schema_name%.vw_diagnosis_code_proc_02) as b
pivot
(
max(dx_code) for 
rnk_num in ([D1], [D2], [D3], [D4], [D5], [D6], [D7], [D8], [D9], [D10], [D11], [D12], [D13], [D14], [D15]
           ,[H1], [H2], [H3], [H4], [H5], [H6], [H7], [H8], [H9], [H10], [H11], [H12])
)as a ','%schema_name%',@schema_name)


end



if @p_debug = 'Y' 
begin

select
(select 
	@diagnosis_code_table_3 
	for XML path(''), TYPE).value('.','nvarchar(max)') as diagnosis_code_table_3

select
(select 
	@diagnosis_code_views 
	for XML path(''), TYPE).value('.','nvarchar(max)') as diagnosis_code_views


select
(select 
	@diagnosis_code_views_1 
	for XML path(''), TYPE).value('.','nvarchar(max)') as diagnosis_code_views_1


select
(select 
	@diagnosis_code_views_2 
	for XML path(''), TYPE).value('.','nvarchar(max)') as diagnosis_code_views_2


	

end



if @p_debug = 'N' 
begin

      if not exists (select * from INFORMATION_SCHEMA.VIEWS where TABLE_SCHEMA = @schema_name and TABLE_NAME = 'vw_diagnosis_code_proc_00')
	    begin
	  	  exec sp_executesql @diagnosis_code_views
        end
        else if @p_replace_existing = 'Y'
		       begin set @sql_temp = 'drop view ' + @schema_name + '.vw_diagnosis_code_proc_00'
                     exec (@sql_temp)  
					 print (@sql_temp)
		             exec sp_executesql @diagnosis_code_views
		       end


	 if not exists (select * from INFORMATION_SCHEMA.VIEWS where TABLE_SCHEMA = @schema_name and TABLE_NAME = 'vw_diagnosis_code_proc_01')
	    begin
	  	  exec sp_executesql @diagnosis_code_views_1
        end
        else if @p_replace_existing = 'Y'
		       begin set @sql_temp = 'drop view ' + @schema_name + '.vw_diagnosis_code_proc_01'
                     exec (@sql_temp) 
					 print (@sql_temp)
		             exec sp_executesql @diagnosis_code_views_1
		       end


	if not exists (select * from INFORMATION_SCHEMA.VIEWS where TABLE_SCHEMA = @schema_name and TABLE_NAME = 'vw_diagnosis_code_proc_02')
	    begin
	  	  exec sp_executesql @diagnosis_code_views_2
        end
        else if @p_replace_existing = 'Y'
		       begin set @sql_temp = 'drop view ' + @schema_name + '.vw_diagnosis_code_proc_02'
                     exec (@sql_temp)
					 print (@sql_temp)
		             exec sp_executesql @diagnosis_code_views_2
		       end
			   
	if not exists (select * from INFORMATION_SCHEMA.TABLES where TABLE_SCHEMA = @schema_name and TABLE_NAME = 'diagnosis_code_proc_03')
	    begin
	  	  exec sp_executesql @diagnosis_code_table_3
        end
        else if @p_replace_existing = 'Y'
		       begin set @sql_temp = 'drop table ' + @schema_name + '.diagnosis_code_proc_03'
                     exec (@sql_temp)
					 print (@sql_temp)
		             exec sp_executesql @diagnosis_code_table_3
		       end

end

	  fetch next from cur_schema_source into @carrier_group_code, @schema_name, @chp_carrier_id, @pdr_product_id, @data_source

    end

  close cur_schema_source
  deallocate cur_schema_source



end/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/





GO
/****** Object:  StoredProcedure [dbo].[sp_base_1_source_create_views_for_all_inputs]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_base_1_source_create_views_for_all_inputs]
/*****************************************************************************
 Description: 
    Common process of defining source for membership
	All common process happen in dbo (results refreshed when a plan product is run)


 Parameters:
    schema_name - the plan product to run

 Return:

 Notes:

 Change History: From 2017
	
	
	2017-10-18 SL - a few changes to handle members changed products
	                vw_sour_membership_00 renamed to vw_sour_membership_00_base
					vw_sour_claims_all_00 renamed to vw_sour_claims_all_00_base
					add traceability_member_id to handle Horizon
	2017-12-11 SL - implement Professonal Header Dx code patch
	2018-01-22 SL - implement truncated code patches for BCBS FL and Anthem VA
	2018-01-25 SL - flip Walmart from AR BCBS to Self Insured
	2018-02-09 SL - improve performance by consolidating tables to read
					put claim_status, reason_adjustment_code to diag tables (where read stage_standard_claims)
					add original_claim_number as raw_claim_number to remove the need to join to stage_raw_claims
	2018-02-13 SL - source actual allowed amount and adjusted allowed amount correctly
	2018-02-22 SL - add other_provider_payment field
	2018-09-11 SL - add line of business in membership for Anthem hosted data
	2018-10-09 SL - implement a few custom process for the final extract
	2018-10-12 SL - add adjusted utilization fields for BCBS NC and BS CA
	2019-06-10 TK- Removed unused fields. Removed the custom process for UT and OR using allowed amount as adjusted allowed. Removed 
	               the special process for NC and BS CA using the adjusted fields for IP, Admits and utilization for adjusted. Now in line with other
				   products were the actual fields are used for the adjusted
	2020-05-21 TK- The Age Bracket that the member falls into based on their age at the end of the Time Period - PER UDS SPECS. Changed member age calculation so that members who are born at the end of the year
	                 end up in the correct bracket. Old code:	datediff(day, [DATE OF BIRTH], ''' + cast(@endDate as varchar) + ''')/365.25 as member_age_calculated,
	2020-05-22 TK - Updated the dx code patch so it applies to all 15 dx codes vs. the first 4. The code will be applied to all plans
	2021-06-24 TK - Added revised_data_source so that the hard code for assigning account_id for former NDW pkans which are now direct can be table drieven vs. hard coded
    2021-06-24 TK - Added  first logic for Covid_Related Indicator per UDS specs
	2021-08-04 TK  - Horizon submitted capitation data in their vq data. That data needs to be excluded from sibmission and submitted in the capitation appendix and is therefore zeroed outusing filler_9 as the capitation indicator

*****************************************************************************/
			                   @p_replace_existing          varchar(1)  = 'Y',
							   @p_debug						varchar(1) = 'n',
							   @p_carrier_id_combo	varchar(100) = null
 as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = '@p_schema_name'
	SET @Logging_Values = ISNULL(CAST(@p_carrier_id_combo AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/

begin


declare 
		@membership_views nvarchar(max),
		@claim_diagnosis_code_views nvarchar(max), 
		@claim_diagnosis_code_views_ICD10 nvarchar(max),
	    @claim_diagnosis_code_PATCH_views nvarchar(max), 
	    --@claim_diagnosis_code_PATCH_views_no_patch nvarchar(max), 
		@claim_financial_views nvarchar(max),
		@claim_views nvarchar(max),
		@sql_temp nvarchar(max),
		@dynSQL nvarchar(max)

  declare
	@schema_name    varchar(255),
    @apply_patch	varchar(1),
	@data_source	varchar(10),
	@carrier_group_code varchar(5),
	@do_not_apply_patch varchar(1),
	@Revised_data_source varchar(10)


  declare cur_schema_source cursor local for
	select 
		schema_name, diag_patch_applied, data_source, carrier_group_code,flag_map_invalid_diag_codes,Revised_Data_Source
	from process.data_status_tracking a
	  where include_in_uds_pmpm = 1
	  and exists (select * from information_schema.tables where table_name = 'dedup_dx_code_proc_20_deduped' and table_schema = a.schema_name)
	  and carrier_id_combo = isnull(@p_carrier_id_combo, carrier_id_combo)

  open cur_schema_source
  fetch next from cur_schema_source into @schema_name, @apply_patch, @data_source, @carrier_group_code,@do_not_apply_patch, @revised_data_source

  while ( @@FETCH_STATUS = 0 )
    begin

declare @startDate date, @endDate date

select @startDate = period_start_date, @endDate = period_end_date
from   process.data_status_tracking
where  schema_name = @schema_name


--=================================================================================
--Membership Views 
--(additional exclusion in sp_base_2_apply_membership_exclusions)
--=================================================================================

set @membership_views = replace('
create view %schema_name%.vw_sour_membership_00_base as
select
	[BCBSA PLAN ID] as bcbsa_plan_id,
	[PDR PRODUCT ID] as pdr_product_id,
	[CARRIER_ID] as chp_carrier_id,
	[VQ_YEAR] as vq_year,
	[UPLOAD] as upload,
	a.[home_hosted_indicator],
	[ALPHA PREFIX] as alpha_prefix,                             
	[ROW NUMBER] as chp_row_id,
	[EXCLUSION FLAG (Y = EXCLUDE)] as atl_grouper_exclusion_flag,
	[EXCLUSION CODE] as atl_grouper_exclusion_code,	
	[YEAR MONTH] as year_month,
	[MEMBER MONTHS] as member_months,
	[MEMBER ID] as traceability_member_id,'+   --2017-10-18 add this to handle members changed product
	case when @carrier_group_code = '702'then 'b.member_id,' else 'a.[MEMBER ID] as member_id,' end + CHAR(13)+CHAR(10) + --source member_id from stage_standard_membership ONLY for Horizon to cut time
	'[3DIGIT ZIP CODE] as zip3,
	[CLIENT ZIP CODE] as client_zip_code,' +CHAR(13)+CHAR(10) +
	case when @carrier_group_code = 660 then '[LINE OF BUSINESS]' else 'cast(''NULL'' as varchar(25))' end +' as line_of_business,' +CHAR(13)+CHAR(10) +  --2018-09-11 add line of business for Anthem host data
	'[ACCOUNT ID] as account_id,
	[GROUP ID] as group_id,
	[GROUP NAME] as group_name,
	[SUBGROUP],' +CHAR(13)+CHAR(10) +
	case when @revised_data_source = 'BHI' then '[ACCOUNT ID]'  else '[GROUP ID]' end+' as employer_id,' +CHAR(13)+CHAR(10) +
	'[MEMBER GENDER] as member_gender,
	[MEMBER AGE] as member_age,
	[DATE OF BIRTH] as Member_DOB,
	DATEDIFF(YY, [DATE OF BIRTH], ''2020-12-31'') - 
     CASE WHEN RIGHT(CONVERT(VARCHAR(6), ''2019-12-31'', 12), 4) >= 
               RIGHT(CONVERT(VARCHAR(6), [DATE OF BIRTH], 12), 4) 
     THEN 0 ELSE 1 END AS member_age_calculated,
	[MEMBER RELATIONSHIP CODE] as member_relationship_code,
	[SIC CODE] as SIC_Code,
	[NAICS CODE] as NAICS_Code,
	[EMPLOYER GROUP SIZE BAND] as employer_group_size_band,
	[MEMBER FUNDING ARRANGEMENTS] as member_funding_arrangements,
	[MEMBER ELIGIBILITY STATUS] as member_eligibility_status,
	[EFFECTIVE DATE OF COVERAGE] as effective_date_of_coverage,
	[TERMINATION DATE OF COVERAGE] as termination_date_of_coverage,
	[CONTRACT ID] as contract_id
from xclaims_2020CY.%schema_name%.traceability_membership a  
'+char(13)+char(10)+
case when @schema_name='p899_FLB1' then 'where not exists ( select * from dbo.FLB1_surrogate_to_exclude
where a.[member id]=[member id])' else ' 'end+'   ---deleting  highmark surrogate data
','%schema_name%',@schema_name)


 --Horizon to get consistent member_id
if @schema_name in ('p880_NJB1', 'p880_NJL2', 'p880_NJ3E')  
set @membership_views = @membership_views + replace(' 
/*2015-10-29 SL Horizon version of the membership view */
left join
xclaims_2020CY.%schema_name%.stage_standard_membership b
on b.chp_row_id = a.[ROW NUMBER]
','%schema_name%',@schema_name)


--SELECT CAST('<root><![CDATA[' + @membership_views + ']]></root>' AS XML)


--=================================================================================
--Diagnosis Code Views 
--(to apply the Dx code patches as needed)
--changed to traceability claims. Need to fix for future uploads as this table may no longer be needed
--=================================================================================



--regular views with all diagnosis codes (leave decimal if possible)


set @claim_diagnosis_code_views = replace('
create view %schema_name%.vw_sour_claims_diagnosis_code_00 as
select
	a.[bcbsa plan id] as bcbsa_plan_id,
	a.carrier_id as chp_carrier_id,
	a.[pdr product id] as pdr_product_id,
	a.[row number] as chp_row_id,
	a.[member id] as member_id,   
	a.[original claim number] as original_claim_number,
	a.[client claim number] as claim_number,
	a.[claim line number] as claim_line_number,
	a.[CLIENT DATE OF SERVICE] as date_of_service,
	a.[CLIENT ADMIT DATE] as admit_date,
	a.[CLIENT PAID DATE] as service_to_date,
	a.[CLIENT DISCHARGE DATE] as discharge_date,
	a.[CLIENT PAID DATE] as paid_date,
	a.[GROUP ID] as group_id,
	a.[original claim number] as claim_number_before_continuous_stay,
	b.primary_diagnosis_code,
	b.diagnosis_code_2,
	b.diagnosis_code_3,
	b.diagnosis_code_4,
	b.diagnosis_code_5,
	b.diagnosis_code_6,
	b.diagnosis_code_7,
	b.diagnosis_code_8,
	b.diagnosis_code_9,
	b.diagnosis_code_10,
	b.diagnosis_code_11,
	b.diagnosis_code_12,
	b.diagnosis_code_13,
	b.diagnosis_code_14,
	b.diagnosis_code_15,
	convert(varchar(10),concat(replicate(''0'', 4-len(a.[revenue code])), a.[revenue code])) as revenue_code,
	a.[CPT CODE] as procedure_code,
	a.[CPT MODIFIER CODE] as client_modifier,
	a.[CLIENT CLAIM TYPE CODE] as client_claim_type_code,
	a.[CLIENT CLAIM TYPE CODE]  as chp_claim_type_code,
	a.[CLAIMS STATUS] as claim_status,
	a.[CLIENT REASON ADJUSTMENT CODE] as reason_adjustment_code,
	a.[original claim number] as raw_claim_number,
	a.[INELIGIBLE NON COVERED AMOUNT] as ineligible_non_covered_amount
from xclaims_2020CY.%schema_name%.traceability_claims_table a
left join
%schema_name%.dedup_dx_code_proc_20_deduped b    
on b.chp_row_id = a.[row number]
','%schema_name%',@schema_name)


--for Plans with professional header dx codes

declare @apply_prof_header_dx_code varchar(50)
set @apply_prof_header_dx_code = (select flag_prof_header_dx_code from process.data_status_tracking where schema_name = @schema_name)

print '@apply_prof_header_dx_code = '+@apply_prof_header_dx_code

if @apply_prof_header_dx_code = 1 
begin

set @claim_diagnosis_code_views = replace('
create view %schema_name%.vw_sour_claims_diagnosis_code_00 as
select
	a.[bcbsa plan id] as bcbsa_plan_id,
	a.carrier_id as chp_carrier_id,
	a.[pdr product id] as pdr_product_id,
	a.[row number] as chp_row_id,
	a.[member id] as member_id,   
	a.[original claim number] as original_claim_number,
	a.[client claim number] as claim_number,
	a.[claim line number] as claim_line_number,
	a.[CLIENT DATE OF SERVICE] as date_of_service,
	a.[CLIENT ADMIT DATE] as admit_date,
	a.[CLIENT PAID DATE] as service_to_date,
	a.[CLIENT DISCHARGE DATE] as discharge_date,
	a.[CLIENT PAID DATE] as paid_date,
	a.[GROUP ID] as group_id,
	a.[original claim number] as claim_number_before_continuous_stay,
	b.primary_diagnosis_code,
	b.diagnosis_code_2,
	b.diagnosis_code_3,
	b.diagnosis_code_4,
	b.diagnosis_code_5,
	b.diagnosis_code_6,
	b.diagnosis_code_7,
	b.diagnosis_code_8,
	b.diagnosis_code_9,
	b.diagnosis_code_10,
	b.diagnosis_code_11,
	b.diagnosis_code_12,
	b.diagnosis_code_13,
	b.diagnosis_code_14,
	b.diagnosis_code_15,
	convert(varchar(10),concat(replicate(''0'', 4-len(a.[revenue code])), a.[revenue code])) as revenue_code,
	a.[CPT CODE] as procedure_code,
	a.[CPT MODIFIER CODE] as client_modifier,
	a.[CLIENT CLAIM TYPE CODE] as client_claim_type_code,
	a.[CLIENT CLAIM TYPE CODE]  as chp_claim_type_code,
	a.[CLAIMS STATUS] as claim_status,
	a.[CLIENT REASON ADJUSTMENT CODE] as reason_adjustment_code,
	a.[original claim number] as raw_claim_number,
	a.[INELIGIBLE NON COVERED AMOUNT] as ineligible_non_covered_amount
from xclaims_2020CY.%schema_name%.traceability_claims_table a
left join  
 %schema_name%.dedup_dx_code_proc_20_deduped_prof_header b
on b.chp_row_id = a.[row number]' ,'%schema_name%',@schema_name)

end


--print @claim_diagnosis_code_views




--Truncated code fix (5,6,7) for all plans
if   @apply_patch=1 
begin
set @claim_diagnosis_code_PATCH_views = replace('
create view %schema_name%.vw_sour_claims_diagnosis_code_PATCH_00 as
select
	a.bcbsa_plan_id,
	a.chp_carrier_id,
	a.pdr_product_id,
	a.chp_row_id,
	a.member_id,   
	a.original_claim_number,
	a.claim_number,
	a.claim_line_number,
	a.date_of_service,
	a.admit_date,
	a.service_to_date,
	a.discharge_date,
	a.paid_date,
	a.group_id,
	a.claim_number_before_continuous_stay,
	case when t1.icd_10_cm_code is not null then t1.icd_10_cm_code else a.primary_diagnosis_code end as primary_diagnosis_code,
    case when t2.icd_10_cm_code is not null then t2.icd_10_cm_code else a.diagnosis_code_2 end as diagnosis_code_2,
    case when t3.icd_10_cm_code is not null then t3.icd_10_cm_code else a.diagnosis_code_3 end as diagnosis_code_3,
    case when t4.icd_10_cm_code is not null then t4.icd_10_cm_code else a.diagnosis_code_4 end as diagnosis_code_4,
    case when t5.icd_10_cm_code is not null then t5.icd_10_cm_code else a.diagnosis_code_5 end as diagnosis_code_5,
    case when t6.icd_10_cm_code is not null then t6.icd_10_cm_code else a.diagnosis_code_6 end as diagnosis_code_6,
    case when t7.icd_10_cm_code is not null then t7.icd_10_cm_code else a.diagnosis_code_7 end as diagnosis_code_7,
    case when t8.icd_10_cm_code is not null then t8.icd_10_cm_code else a.diagnosis_code_8 end as diagnosis_code_8,
    case when t9.icd_10_cm_code is not null then t9.icd_10_cm_code else a.diagnosis_code_9 end as diagnosis_code_9,
    case when t10.icd_10_cm_code is not null then t10.icd_10_cm_code else a.diagnosis_code_10 end as diagnosis_code_10,
	case when t11.icd_10_cm_code is not null then t11.icd_10_cm_code else a.diagnosis_code_11 end as diagnosis_code_11,
    case when t12.icd_10_cm_code is not null then t12.icd_10_cm_code else a.diagnosis_code_12 end as diagnosis_code_12,
    case when t13.icd_10_cm_code is not null then t13.icd_10_cm_code else a.diagnosis_code_13 end as diagnosis_code_13,
    case when t14.icd_10_cm_code is not null then t14.icd_10_cm_code else a.diagnosis_code_14 end as diagnosis_code_14,
    case when t15.icd_10_cm_code is not null then t15.icd_10_cm_code else a.diagnosis_code_15 end as diagnosis_code_15,	
	convert(varchar(10),concat(replicate(''0'', 4-len(a.revenue_code)), a.revenue_code)) as revenue_code,
	a.procedure_code,
	a.client_modifier,
	a.client_claim_type_code,
	a.chp_claim_type_code,
	a.claim_status,
	a.reason_adjustment_code,
	a.raw_claim_number,
	a.ineligible_non_covered_amount
from %schema_name%.vw_sour_claims_diagnosis_code_00 a 
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t1     
on t1.truncated_dx_code = replace(a.primary_diagnosis_code,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t2     
on t2.truncated_dx_code = replace(a.diagnosis_code_2,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t3     
on t3.truncated_dx_code = replace(a.diagnosis_code_3,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t4     
on t4.truncated_dx_code = replace(a.diagnosis_code_4,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t5     
on t5.truncated_dx_code = replace(a.diagnosis_code_5,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t6     
on t6.truncated_dx_code = replace(a.diagnosis_code_6,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t7     
on t7.truncated_dx_code = replace(a.diagnosis_code_7,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t8     
on t8.truncated_dx_code = replace(a.diagnosis_code_8,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t9     
on t9.truncated_dx_code = replace(a.diagnosis_code_9,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t10     
on t10.truncated_dx_code = replace(a.diagnosis_code_10,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t11     
on t11.truncated_dx_code = replace(a.diagnosis_code_11,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t12     
on t12.truncated_dx_code = replace(a.diagnosis_code_12,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t13     
on t13.truncated_dx_code = replace(a.diagnosis_code_13,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t14     
on t14.truncated_dx_code = replace(a.diagnosis_code_14,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t15     
on t15.truncated_dx_code = replace(a.diagnosis_code_15,''.'','''')
','%schema_name%',@schema_name)
end

/*
----one of for Anthem CT, Deleting claims where primary diagnosis code is 9, not needed for CY21 (Delete)
select distinct chp_row_id, concat('CTB1', chp_row_id) as [New_id], diag_1_cd , proc_cd, CLAIM_TYPE 
into dbo.ctb1_dx_delete
from xclaims_2020CY.p888_CTB1.load_raw_claims where diag_1_cd ='9'
*/

--=================================================================================
--Claims Financial Fields Views 
--Get Non-Covered Amount from NDW stage_raw_claims for Reason Adjust Code 40
--=================================================================================



set @claim_financial_views = replace('
create view %schema_name%.vw_sour_claims_financial_00 as
select
	a.[BCBSA PLAN ID] as bcbsa_plan_id,
	a.[PDR PRODUCT ID] as pdr_product_id,
	a.[CARRIER_ID] as chp_carrier_id,
	a.[VQ_YEAR] as vq_year,
	a.[UPLOAD] as upload,
	a.[ROW NUMBER] as chp_row_id,
	a.[EXCLUSION FLAG (Y = EXCLUDE)] as atl_grouper_exclusion_flag,
	a.[EXCLUSION CODE] as atl_grouper_exclusion_code,
	a.[ORPHAN CLAIMS FLAG] as atl_grouper_orphan_claims_flag,
	case when a.[EXCLUSION CODE] is null or a.[EXCLUSION CODE] = ''80'' then ''N'' else ''Y'' end as exclusion_flag, 
	a.[MEMBER ID] as traceability_member_id,'+ CHAR(13)+CHAR(10) +
	case when @carrier_group_code = '702' then 's.member_id,' else 'a.[MEMBER ID] as member_id,' end + CHAR(13)+CHAR(10) + --source member_id from stage_standard_membership ONLY for Horizon to cut time
	'a.[ACCOUNT ID] as account_id,
	a.[GROUP ID] as group_id,
	a.[GROUP NAME] as group_name,
	a.[SUBGROUP] as subgroup,' +CHAR(13)+CHAR(10) +   
	case when @revised_data_source = 'BHI' then 'a.[ACCOUNT ID]' else 'a.[GROUP ID]' end+' as employer_id,' +CHAR(13)+CHAR(10) +'
	a.[YEAR MONTH] as year_month,
	a.MEMBERSHIP_home_hosted_indicator,
	a.[CLAIM TYPE] as claim_type,
	a.[CLIENT PLACE OF SERVICE CODE] as place_of_service,
	a.[SERVICE CATEGORY] as service_category,
	a.[CPT CODE] as procedure_code,
	a.[CPT MODIFIER CODE] as cpt_modifier_code,
	case when a.[claim type] =1 and [COVID INDICATOR]=''Y'' then ''YI'' when a.[claim type] in (2,3,4) and a.[COVID INDICATOR]=''Y'' then ''YN'' else ''NN'' end as Covid_Ind,
	a.[PROVIDER NETWORK INDICATOR] as claims_benefit_payment_status,
	a.[PROVIDER CONTRACTING STATUS] as provider_contracting_status,
	a.[PROVIDER NETWORK STATUS] as provider_network_status,
	a.[BENEFIT PAYMENT CONTRACT STATUS] as benefit_payment_contract_status,
	a.[SUBMITTED AMOUNT] as submitted_amount,'+ CHAR(13)+CHAR(10) +
	case when @schema_name  = 'p887_txb1' then 'case when  a.[CLIENT REASON ADJUSTMENT CODE] in (''BS'',''RC'') then a.[SUBMITTED AMOUNT] else coalesce(t.BilledAmt,t2.BilledAmt) end'
         when @carrier_group_code in ('680', '702') then 'Cast(a.[filler_10] as decimal (26,10))'  
	     else 'a.[Billed Amount]' end +' as billed_amount,
    a.[ADJUSTED BILLED AMOUNT] as adjusted_billed_amount,
	a.[ADJUSTED ALLOWED AMOUNT]  as adjusted_allowed_amount,'+ CHAR(13)+CHAR(10) + 
    case when @schema_name = 'p1017_WAB1' then 'cast(t.ORIG_ALLOWED_AMT as decimal (26,10))' 
	     else 'a.[ALLOWED AMOUNT]'end+' as allowed_amount,'+ CHAR(13)+CHAR(10) + 
	'a.[OTHER PROVIDER PAYMENT DIRECT] as other_provider_payment_direct,   
	a.[OTHER PROVIDER PAYMENT INDIRECT] as other_provider_payment_indirect,
	a.[Paid Amount] as paid_amount,
	a.[PAID AMOUNT] as adjusted_paid_amount, 
	a.[COB AMOUNT] as cob_amount,
	a.[COPAYMENT AMOUNT] as copayment_amount,
	a.[COINSURANCE AMOUNT] as coinsurance_amount,
	a.[DEDUCTIBLE AMOUNT] as deductible_amount,
    a.[ADMITS] as admits,
    a.[INPATIENT DAYS] as inpatient_days, 
	a.[COST MODEL UTILIZATION]  as cost_model_utilization, 
	a.[UTILIZATION WO EXCLUSION] as utilization_wo_exclusion, 
    a.[ADMITS] as adjusted_admits, 
	a.[INPATIENT DAYS] as adjusted_inpatient_days, 
	a.[COST MODEL UTILIZATION] as adjusted_cost_model_utilization, 
	a.[UTILIZATION WO EXCLUSION] as adjusted_utilization_wo_exclusion,
	a.[PRIMARY ICD PROCEDURE CODE] as primary_icd_procedure_code,
	a.[CLIENT DISCHARGE STATUS] as discharge_status,
	a.[ORIGINAL CLAIM NUMBER] as original_claim_number,
	a.[CLIENT PAID DATE] as paid_date,
	convert(varchar(10),concat(replicate(''0'', 4-len(a.[REVENUE CODE])), a.[REVENUE CODE])) as revenue_code  
from '+ CHAR(13)+CHAR(10) +
'xclaims_2020CY.%schema_name%.traceability_claims_table a 
'+char(13)+char(10)+
case when @schema_name='p899_FLB1' then 'where not exists ( select * from dbo.FLB1_surrogate_to_exclude ---deleting  highmark surrogate data
where a.[member id]=[member id])' 
 when @schema_name='p888_CTB1' then 'where not exists (select chp_row_id from dbo.ctb1_dx_delete  ---deleting Anthem CT rxc laims where primary dx code is 9
where a.[row number]=chp_row_id)' else ' 'end+'
','%schema_name%',@schema_name)


if @schema_name in ('p880_NJB1', 'p880_NJL2','p880_NJ3E' )   --Horizon to get consistent member_id
set @claim_financial_views = @claim_financial_views + replace(' 
left join
xclaims_2020CY.%schema_name%.stage_standard_claims s
on s.chp_row_id = a.[ROW NUMBER]
','%schema_name%',@schema_name)

if @schema_name in ('p1017_WAB1','p887_TXB1')   -- adjustments
set @claim_financial_views = @claim_financial_views + replace('
left join
xClaims_2020CY.%schema_name%.load_raw_claims T
on t.chp_row_id = a.[ROW NUMBER]
','%schema_name%',@schema_name)


if @schema_name in ('p887_TXB1')   -- adjustments
set @claim_financial_views = @claim_financial_views + replace('
left join
xClaims_2020CY.%schema_name%.load_raw_claims2 T2
on t2.chp_row_id = a.[ROW NUMBER]
','%schema_name%',@schema_name)




--SELECT CAST('<root><![CDATA[' + @claim_financial_views + ']]></root>' AS XML)

--=================================================================================
--Claims Views of both Diagnosis Codes and Financial Fields
--single source for the process
--2018-10-09 source all the fields that logic needs to apply from traceability, this is to 
--handle the custom process that is needed on traceability tables
--=================================================================================
set @claim_views = replace('
create view %schema_name%.vw_sour_claims_all_00_base as
select
	f.bcbsa_plan_id,
	f.pdr_product_id,
	f.chp_carrier_id,
	f.vq_year,
	f.upload,
	f.chp_row_id,
	f.MEMBERSHIP_home_hosted_indicator,
	f.atl_grouper_exclusion_flag,
	f.atl_grouper_exclusion_code,
	f.atl_grouper_orphan_claims_flag,
	f.exclusion_flag,
	f.traceability_member_id,
	f.member_id,
	d.raw_claim_number,
	f.original_claim_number,
	d.claim_number,
	d.claim_line_number,
	d.date_of_service,
	d.admit_date,
	d.service_to_date,
	d.discharge_date,
	f.paid_date,
	f.account_id,
	f.group_id,
	f.group_name,
	f.subgroup,
	f.employer_id,
	d.claim_status,
	d.reason_adjustment_code,
	f.year_month,
	f.claim_type,
	f.covid_Ind,
	f.place_of_service,
	f.service_category,
	f.revenue_code,
	f.procedure_code,
	f.cpt_modifier_code,
	f.claims_benefit_payment_status,
	f.provider_contracting_status,
	f.provider_network_status,
	f.benefit_payment_contract_status,
	f.submitted_amount,
	d.ineligible_non_covered_amount as non_covered_amount,
	f.billed_amount,
	f.adjusted_billed_amount,
	f.allowed_amount,
	f.adjusted_allowed_amount,
	f.other_provider_payment_direct,
	f.other_provider_payment_indirect,
	f.paid_amount,
	f.adjusted_paid_amount,
	f.cob_amount,
	f.copayment_amount,
	f.coinsurance_amount,
	f.deductible_amount,
	f.admits,
	f.inpatient_days,
	f.cost_model_utilization,
	f.utilization_wo_exclusion,
	f.adjusted_admits,
	f.adjusted_inpatient_days,
	f.adjusted_cost_model_utilization,
	f.adjusted_utilization_wo_exclusion,
	f.primary_icd_procedure_code,
	f.discharge_status,
	/* diagnosis code fields */
	d.primary_diagnosis_code,
	d.diagnosis_code_2,
	d.diagnosis_code_3,
	d.diagnosis_code_4,
	d.diagnosis_code_5,
	d.diagnosis_code_6,
	d.diagnosis_code_7,
	d.diagnosis_code_8,
	d.diagnosis_code_9,
	d.diagnosis_code_10,
	d.diagnosis_code_11,
	d.diagnosis_code_12,
	d.diagnosis_code_13,
	d.diagnosis_code_14,
	d.diagnosis_code_15
from %schema_name%.vw_sour_claims_financial_00 f
left join
%schema_name%.','%schema_name%',@schema_name)+case when @apply_patch = 0 then 'vw_sour_claims_diagnosis_code_00 d' else 'vw_sour_claims_diagnosis_code_PATCH_00 d' end + CHAR(13)+CHAR(10) +
'on d.chp_row_id = f.chp_row_id'


--update process.data_status_tracking
--set diag_patch_applied=0
--WHERE chp_carrier_id=899
--select * FROM process.data_status_tracking
--WHERE include_in_uds_pmpm=1

----------->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> finish views

--print code if debug is on


if @p_debug = 'Y' 
begin

select
(select 
	@membership_views 
	for XML path(''), TYPE).value('.','nvarchar(max)') as membership_views

select
(select 
	@claim_diagnosis_code_views 
	for XML path(''), TYPE).value('.','nvarchar(max)') as claim_diagnosis_code_views


select
(select 
	@claim_diagnosis_code_PATCH_views 
	for XML path(''), TYPE).value('.','nvarchar(max)') as claim_diagnosis_code_PATCH_views


select
(select 
	@claim_financial_views 
	for XML path(''), TYPE).value('.','nvarchar(max)') as claim_financial_views


	select
(select 
	@claim_views 
	for XML path(''), TYPE).value('.','nvarchar(max)') as claim_views_Final
	
end



if @p_debug = 'N' 
begin

      if not exists (select * from INFORMATION_SCHEMA.VIEWS where TABLE_SCHEMA = @schema_name and TABLE_NAME = 'vw_sour_membership_00_base')
	    begin
		print @schema_name+'- vw_sour_membership_00_base view is created'
	  	  exec sp_executesql @membership_views
        end
        else if @p_replace_existing = 'Y'
		       begin set @sql_temp = 'drop view ' + @schema_name + '.vw_sour_membership_00_base'
                     exec (@sql_temp) 
					 print @schema_name+'- vw_sour_membership_00_base view is created'
		             exec sp_executesql @membership_views
		       end

      if not exists (select * from INFORMATION_SCHEMA.TABLES where TABLE_SCHEMA = @schema_name and TABLE_NAME = 'vw_sour_claims_financial_00')
	    begin
		print @schema_name+'- vw_sour_claims_financial_00 view is created'
	  	  exec sp_executesql @claim_financial_views
        end
        else if @p_replace_existing = 'Y'
		       begin set @sql_temp = 'drop view ' + @schema_name + '.vw_sour_claims_financial_00'
                     exec (@sql_temp) 
					print @schema_name+'- vw_sour_claims_financial_00 view is created'
		             exec sp_executesql @claim_financial_views
					  
					
		       end

      if not exists (select * from INFORMATION_SCHEMA.VIEWS where TABLE_SCHEMA = @schema_name and TABLE_NAME = 'vw_sour_claims_diagnosis_code_00')
	    begin
		print @schema_name+'- vw_sour_claims_diagnosis_code_00 view is created'
	  	  exec sp_executesql @claim_diagnosis_code_views
        end
        else if @p_replace_existing = 'Y'
		       begin set @sql_temp = 'drop view ' + @schema_name + '.vw_sour_claims_diagnosis_code_00'
                     
					 exec (@sql_temp) 
					print @schema_name+'- vw_sour_claims_diagnosis_code_00 view is created'
		             exec sp_executesql @claim_diagnosis_code_views
		       end

      if not exists (select * from INFORMATION_SCHEMA.TABLES where TABLE_SCHEMA = @schema_name and TABLE_NAME = 'vw_sour_claims_diagnosis_code_PATCH_00')
	    begin

			if @apply_patch = 1
			begin
			print @schema_name+'- Plan has diagnosis patch file and PATCH view is created'
	  	    exec sp_executesql @claim_diagnosis_code_PATCH_views
			end
        end
        else if @p_replace_existing = 'Y'
		       begin set @sql_temp = 'drop view ' + @schema_name + '.vw_sour_claims_diagnosis_code_PATCH_00'
                     exec (@sql_temp) 
						
						if @apply_patch = 1
						begin
						print @schema_name+'- Plan has diagnosis patch file and PATCH view is created'
	  					exec sp_executesql @claim_diagnosis_code_PATCH_views
						end		       
			   end

 

      if not exists (select * from INFORMATION_SCHEMA.VIEWS where TABLE_SCHEMA = @schema_name and TABLE_NAME = 'vw_sour_claims_all_00_base')
		begin 
		print @schema_name+'- vw_sour_claims_all_00_base view is created'
			exec sp_executesql @claim_views
        end
        else if @p_replace_existing = 'Y'
		  begin
			  set @sql_temp = 'drop view ' + @schema_name + '.vw_sour_claims_all_00_base'
			  exec (@sql_temp) 
			  		print @schema_name+'- vw_sour_claims_all_00_base view is created'

			  exec sp_executesql @claim_views
		  end


end

	  fetch next from cur_schema_source into @schema_name, @apply_patch, @data_source, @carrier_group_code,@do_not_apply_patch,@revised_data_source

    end

  close cur_schema_source
  deallocate cur_schema_source



end/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/




GO
/****** Object:  StoredProcedure [dbo].[sp_base_1_source1_reassign_products_for_members_changed_products]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_base_1_source1_reassign_products_for_members_changed_products]
/*****************************************************************************
 Description: 
    Process to reassign members who changed products to a final product


 Parameters:
    schema_name - the plan product to run

 Return:

 Notes:
	for carriers with PPO and ALT, left join to the table with members who changed
	products and move member records around
	chp_row_id needs to concat with pdr_product_id to be unique as of CY2016 process

 Change History:
	CY2016
	2017-10-18 SL - initial version 
	                move the clean up of member months up to 12 to later step - need to determine the appropriate employer
	2017-10-30 SL - create membership view union products for one carrier to calculate group size
 
*****************************************************************************/
                               @p_replace_existing          varchar(1) = 'Y',
							   @p_debug						varchar(1) = 'N',
							   @p_schema_name	            varchar(100) = null
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = '@p_schema_name'
	SET @Logging_Values = ISNULL(CAST(@p_schema_name AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/

begin


  declare
	@schema_name varchar(25),
    @carrier_id_combo	varchar(10),
	@chp_carrier_id varchar(10),
	@pdr_product_id varchar(20),
	@flag_multi_prod varchar(20)


  declare cur_schema_source cursor for
	select 
		schema_name, chp_carrier_id, pdr_product_id, carrier_id_combo, flag_multi_prod
	from process.data_status_tracking a
	where include_in_uds_pmpm = 1 
	--and flag_multi_prod = 'Y' 
	  --and exists (select * from xClaims_2019CY.INFORMATION_SCHEMA.tables where TABLE_NAME = 'stage_raw_claims' and TABLE_SCHEMA = a.schema_name) 
	and schema_name = isnull(@p_schema_name, schema_name)

  open cur_schema_source
  fetch next from cur_schema_source into @schema_name, @chp_carrier_id, @pdr_product_id, @carrier_id_combo, @flag_multi_prod

  while ( @@FETCH_STATUS = 0 )
    begin


--=================================================================================
--Dynamic SQL to union membership base views
--=================================================================================


declare 
		@sql_temp nvarchar(max),
		@dynSQL nvarchar(max),
		@dynUnionMbr nvarchar(max),
		@dynUnionClm nvarchar(max),
		@membership_views nvarchar(max),
		@claim_views nvarchar(max),
		@membership_views_carrier nvarchar(max)



set @dynUnionMbr = ''


	select @dynUnionMbr = coalesce(@dynUnionMbr,'') + 
'select *
from '+schema_name+'.vw_sour_membership_00_base
union all
'
	from 
	(select 
		carrier_id_combo,
		chp_carrier_id,
		pdr_product_id,
		schema_name,
		carrier_group_code,
		carrier_group_name 
	from process.data_status_tracking 
	where include_in_uds_pmpm = 1 
	--and flag_multi_prod = 'Y'
	) a
	where carrier_id_combo = @carrier_id_combo
	order by pdr_product_id

--print @dynUnionMbr

	set @dynUnionMbr = left(@dynUnionMbr, len(@dynUnionMbr)-13)

	print @dynUnionMbr

--=================================================================================
--Dynamic SQL to union claims base views
--=================================================================================


set @dynUnionClm = ''


	select @dynUnionClm = coalesce(@dynUnionClm,'') + 
'select *
from '+schema_name+'.vw_sour_claims_all_00_base
union all
'
	from 
	(select 
		carrier_id_combo,
		chp_carrier_id,
		pdr_product_id,
		schema_name,
		carrier_group_code,
		carrier_group_name 
	from process.data_status_tracking 
	where include_in_uds_pmpm = 1 
	--and flag_multi_prod = 'Y'
	) a
	where carrier_id_combo = @carrier_id_combo
	order by pdr_product_id

--print @dynUnionMbr

	set @dynUnionClm = left(@dynUnionClm, len(@dynUnionClm)-13)

	print @dynUnionClm





--=================================================================================
--HERE BEGIN CREATING OF VIEWS ...
--=================================================================================




--Reassign the Products for Members who changed products

--membership view

set @membership_views = replace('
create view %schema_name%.vw_sour_membership_00 as
with base_data as
('+@dynUnionMbr+')
select 
	m.bcbsa_plan_id,
	m.pdr_product_id as original_pdr_product_id,'+ CHAR(13)+CHAR(10) +
	case when @flag_multi_prod = 'Y' then 'coalesce(p.[PDR PRODUCT ID], m.pdr_product_id) as pdr_product_id,    --2017-10-18 this is the pdr product id after reassign the members who changed product to final product which they enrolled' else 'm.pdr_product_id,' end + CHAR(13)+CHAR(10) +
	case when @chp_carrier_id in (958, 1420) then 'case when p.[PDR PRODUCT ID] = ''PAB1'' then 958 when p.[PDR PRODUCT ID] = ''PAL6'' then 1420 else m.chp_carrier_id end as chp_carrier_id,    --2017-10-18 this is the chp_carrier_id after reassign the members who changed product to final product which they enrolled' else 'm.chp_carrier_id,' end + CHAR(13)+CHAR(10) +
	'm.vq_year,
	m.upload,
	m.home_hosted_indicator,
	m.line_of_business,
	concat(m.pdr_product_id, m.chp_row_id) as chp_row_id,
	m.atl_grouper_exclusion_flag,
	m.atl_grouper_exclusion_code,
	m.year_month,
	m.member_months,
	m.traceability_member_id,
	m.member_id,
	m.zip3,
	m.client_zip_code,
	m.account_id,
	m.group_id,
	m.group_name,
	m.SUBGROUP,
	m.employer_id,
	m.member_gender,
	m.member_age,
	m.Member_DOB,
	m.member_age_calculated,
	m.member_relationship_code,
	m.member_funding_arrangements,
	m.member_eligibility_status,
	m.effective_date_of_coverage,
	m.termination_date_of_coverage,
	m.contract_id
from base_data m
','%schema_name%',@schema_name) + CHAR(13)+CHAR(10) +
case when @flag_multi_prod = 'Y' then '
left join
process.Mbr_Chg_Products_proc_20_final_product_ALL_member p
on p.[Member ID] = m.traceability_member_id
and p.carrier_id_combo = case when m.chp_carrier_id = 1420 then 958 else m.chp_carrier_id end
where coalesce(p.[PDR PRODUCT ID], m.pdr_product_id) = '''+@pdr_product_id+''''
else '' end


--Reassign the Products for Members who changed products

--Claims view

set @claim_views = replace('
create view %schema_name%.vw_sour_claims_all_00 as
with base_data as
('+@dynUnionClm+')
select 
	c.bcbsa_plan_id,
	c.pdr_product_id as original_pdr_product_id,'+ CHAR(13)+CHAR(10) +
	case when @flag_multi_prod = 'Y' then 'coalesce(p.[PDR PRODUCT ID], c.pdr_product_id) as pdr_product_id,    --2017-10-18 this is the pdr product id after reassign the members who changed product to final product which they enrolled' else 'c.pdr_product_id,' end + CHAR(13)+CHAR(10) +
	case when @chp_carrier_id in (958, 1420) then 'case when p.[PDR PRODUCT ID] = ''PAB1'' then 958 when p.[PDR PRODUCT ID] = ''PAL6'' then 1420 else c.chp_carrier_id end as chp_carrier_id,    --2017-10-18 this is the chp_carrier_id after reassign the members who changed product to final product which they enrolled' else 'c.chp_carrier_id,' end + CHAR(13)+CHAR(10) +	
	'c.vq_year,
	c.upload,
	concat(c.pdr_product_id, c.chp_row_id) as chp_row_id,
	c.atl_grouper_exclusion_flag,
	c.atl_grouper_exclusion_code,
	c.atl_grouper_orphan_claims_flag,
	c.exclusion_flag,
	c.traceability_member_id,
	c.member_id,
	c.raw_claim_number,
	c.original_claim_number,
	c.claim_number,
	c.claim_line_number,
	c.date_of_service,
	c.admit_date,
	c.service_to_date,
	c.discharge_date,
	c.paid_date,
	c.account_id,
	c.group_id,
	c.group_name,
	c.subgroup,
	c.employer_id,
	c.claim_status,
	c.reason_adjustment_code,
	c.year_month,
	c.covid_Ind,
	c.claim_type,
	c.place_of_service,
	c.service_category,
	c.revenue_code,
	c.procedure_code,
	c.cpt_modifier_code,
	c.claims_benefit_payment_status,
	c.provider_contracting_status,
	c.provider_network_status,
	c.benefit_payment_contract_status,
	c.submitted_amount,
	c.non_covered_amount,
	c.billed_amount,
	c.adjusted_billed_amount,
	c.allowed_amount,
	c.adjusted_allowed_amount,
	c.other_provider_payment_direct,
	c.other_provider_payment_indirect,
	c.paid_amount,
	c.adjusted_paid_amount,
	c.cob_amount,
	c.copayment_amount,
	c.coinsurance_amount,
	c.deductible_amount,
	c.admits,
	c.inpatient_days,
	c.cost_model_utilization,
	c.utilization_wo_exclusion,
	c.adjusted_admits,
	c.adjusted_inpatient_days,
	c.adjusted_cost_model_utilization,
	c.adjusted_utilization_wo_exclusion,
	c.primary_icd_procedure_code,
	c.discharge_status,
	c.primary_diagnosis_code,
	c.diagnosis_code_2,
	c.diagnosis_code_3,
	c.diagnosis_code_4,
	c.diagnosis_code_5,
	c.diagnosis_code_6,
	c.diagnosis_code_7,
	c.diagnosis_code_8,
	c.diagnosis_code_9,
	c.diagnosis_code_10,
	c.diagnosis_code_11,
	c.diagnosis_code_12,
	c.diagnosis_code_13,
	c.diagnosis_code_14,
	c.diagnosis_code_15
from base_data c
','%schema_name%',@schema_name) + CHAR(13)+CHAR(10) +
case when @flag_multi_prod = 'Y' then '
left join
process.Mbr_Chg_Products_proc_20_final_product_ALL_member p
on p.[Member ID] = c.traceability_member_id
and p.carrier_id_combo = case when c.chp_carrier_id = 1420 then 958 else c.chp_carrier_id end
where coalesce(p.[PDR PRODUCT ID], c.pdr_product_id) = '''+@pdr_product_id+''''
else '' end


----------->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> finish views


if @p_debug = 'Y' 
begin



select
(select 
	@membership_views 
	for XML path(''), TYPE).value('.','nvarchar(max)') as membership_views

select
(select 
	@claim_views 
	for XML path(''), TYPE).value('.','nvarchar(max)') as claim_views



end



if @p_debug = 'N' 
begin

   

      if not exists (select * from INFORMATION_SCHEMA.VIEWS where TABLE_SCHEMA = @schema_name and TABLE_NAME = 'vw_sour_membership_00')
	    begin
		print @schema_name+ '-vw_sour_membership_00 view is created'
	  	  exec sp_executesql @membership_views
        end
        else if @p_replace_existing = 'Y'
		       begin set @sql_temp = 'drop view ' + @schema_name + '.vw_sour_membership_00'
			          print @schema_name+ '-vw_sour_membership_00 view is created'
                     exec (@sql_temp) 
		             exec sp_executesql @membership_views
		       end



      if not exists (select * from INFORMATION_SCHEMA.VIEWS where TABLE_SCHEMA = @schema_name and TABLE_NAME = 'vw_sour_claims_all_00')
		begin 
		  print @schema_name+ '-vw_sour_claims_all_00 view is created'
			exec sp_executesql @claim_views
        end
        else if @p_replace_existing = 'Y'
		  begin
			  set @sql_temp = 'drop view ' + @schema_name + '.vw_sour_claims_all_00'
			  print @schema_name+ '-vw_sour_claims_all_00 view is created'
			  exec (@sql_temp) 
			  exec sp_executesql @claim_views
		  end


end





	  fetch next from cur_schema_source into @schema_name, @chp_carrier_id, @pdr_product_id, @carrier_id_combo, @flag_multi_prod

    end

  close cur_schema_source
  deallocate cur_schema_source



end/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/

GO
/****** Object:  StoredProcedure [dbo].[sp_base_11_build_views_all_plans_detail]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_base_11_build_views_all_plans_detail]
/*****************************************************************************
 Description: 
    Create Views for All Plans financial detail and membership detail
	This is needed to aggregate host data for CY15 resubmission of including Anthem
		internally hosted members


 Parameters:

 Return:

 Notes:

 Change History:
	2017-05-15 SL - initial version
 
*****************************************************************************/
										@p_replace_existing varchar(5) = 'Y'
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = NULL
	SET @Logging_Values = NULL
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/
begin


declare 
	@sql_temp nvarchar(max), 
	@membership_views nvarchar(max), 
	@condition_views nvarchar(max),
	@claims_views nvarchar(max)


--membership

--create view for proc_membership_ccsr_conditions_20_member_risk_score

set @membership_views = '
create view all_plans.vw_proc_membership_ccsr_conditions_20_member_risk_score_b4_exclusion as
select * from p1017_WAB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p1395_WAB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p1420_PAL6.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p880_NJB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p880_NJL2.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p880_NJ3E.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p881_MIB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p884_MAB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p885_ILB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p886_INB2.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p887_TXB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p888_CTB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p890_INB2.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p891_ALB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p893_AZB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p893_AZL1.proc_membership_ccsr_conditions_20_member_risk_score   
union all
select * from p894_ARB2.proc_membership_ccsr_conditions_20_member_risk_score 
union all
select * from p895_CAB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p895_CAL3.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p896_COB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p897_DEB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p898_DCB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p898_DCL2.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p899_FLB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p899_FLL2.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p900_GAB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p900_GAP3.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p902_IDB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p903_IDB2.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p905_IAB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p907_INB2.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p908_LAB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p909_MEB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p911_MNB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p913_MOL1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p914_INB2.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p914_MOL6.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p914_P3MO.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p915_MTB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p917_WAB2.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p918_OKB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p918_OKL3.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p918_OKL8.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p920_ORB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p921_NVB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p922_NHB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p922_P1NH.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p924_NMB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p925_PAB6.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p928_PAB9.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p930_NYB3.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p938_INB2.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p938_WIL2.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p940_NCB2.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p946_RIB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p947_SCB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p948_SDB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p950_TNB2.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p950_TNL2.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p952_UTB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p954_VAB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p957_CAB2.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p958_PAB1.proc_membership_ccsr_conditions_20_member_risk_score
union all
select * from p906_KSB1.proc_membership_ccsr_conditions_20_member_risk_score
'

--create view for proc_membership_ccsr_conditions_10

set @condition_views = '
create view all_plans.vw_proc_membership_ccsr_conditions_10_b4_exclusion as
select * from p1017_WAB1.proc_membership_ccsr_conditions_10
union all
select * from p1395_WAB1.proc_membership_ccsr_conditions_10
union all
select * from p1420_PAL6.proc_membership_ccsr_conditions_10
union all
select * from p880_NJB1.proc_membership_ccsr_conditions_10
union all
select * from p880_NJL2.proc_membership_ccsr_conditions_10
union all
select * from p880_NJ3E.proc_membership_ccsr_conditions_10
union all
select * from p881_MIB1.proc_membership_ccsr_conditions_10
union all
select * from p884_MAB1.proc_membership_ccsr_conditions_10
union all
select * from p885_ILB1.proc_membership_ccsr_conditions_10
union all
select * from p886_INB2.proc_membership_ccsr_conditions_10
union all
select * from p887_TXB1.proc_membership_ccsr_conditions_10
union all
select * from p888_CTB1.proc_membership_ccsr_conditions_10
union all
select * from p890_INB2.proc_membership_ccsr_conditions_10
union all
select * from p891_ALB1.proc_membership_ccsr_conditions_10
union all
select * from p893_AZB1.proc_membership_ccsr_conditions_10
union all
select * from p893_AZL1.proc_membership_ccsr_conditions_10
union all
select * from p894_ARB2.proc_membership_ccsr_conditions_10  
union all
select * from p895_CAB1.proc_membership_ccsr_conditions_10
union all
select * from p895_CAL3.proc_membership_ccsr_conditions_10
union all
select * from p896_COB1.proc_membership_ccsr_conditions_10
union all
select * from p897_DEB1.proc_membership_ccsr_conditions_10
union all
select * from p898_DCB1.proc_membership_ccsr_conditions_10
union all
select * from p898_DCL2.proc_membership_ccsr_conditions_10
union all
select * from p899_FLB1.proc_membership_ccsr_conditions_10
union all
select * from p899_FLL2.proc_membership_ccsr_conditions_10
union all
select * from p900_GAB1.proc_membership_ccsr_conditions_10
union all
select * from p900_GAP3.proc_membership_ccsr_conditions_10
union all
select * from p902_IDB1.proc_membership_ccsr_conditions_10
union all
select * from p903_IDB2.proc_membership_ccsr_conditions_10
union all
select * from p905_IAB1.proc_membership_ccsr_conditions_10
union all
select * from p907_INB2.proc_membership_ccsr_conditions_10
union all
select * from p908_LAB1.proc_membership_ccsr_conditions_10
union all
select * from p909_MEB1.proc_membership_ccsr_conditions_10
union all
select * from p911_MNB1.proc_membership_ccsr_conditions_10
union all
select * from p913_MOL1.proc_membership_ccsr_conditions_10
union all
select * from p914_INB2.proc_membership_ccsr_conditions_10
union all
select * from p914_MOL6.proc_membership_ccsr_conditions_10
union all
select * from p914_P3MO.proc_membership_ccsr_conditions_10
union all
select * from p915_MTB1.proc_membership_ccsr_conditions_10
union all
select * from p917_WAB2.proc_membership_ccsr_conditions_10
union all
select * from p918_OKB1.proc_membership_ccsr_conditions_10
union all
select * from p918_OKL3.proc_membership_ccsr_conditions_10
union all
select * from p918_OKL8.proc_membership_ccsr_conditions_10
union all
select * from p920_ORB1.proc_membership_ccsr_conditions_10
union all
select * from p921_NVB1.proc_membership_ccsr_conditions_10
union all
select * from p922_NHB1.proc_membership_ccsr_conditions_10
union all
select * from p922_P1NH.proc_membership_ccsr_conditions_10
union all
select * from p924_NMB1.proc_membership_ccsr_conditions_10
union all
select * from p925_PAB6.proc_membership_ccsr_conditions_10
union all
select * from p928_PAB9.proc_membership_ccsr_conditions_10
union all
select * from p930_NYB3.proc_membership_ccsr_conditions_10
union all
select * from p938_INB2.proc_membership_ccsr_conditions_10
union all
select * from p938_WIL2.proc_membership_ccsr_conditions_10
union all
select * from p940_NCB2.proc_membership_ccsr_conditions_10
union all
select * from p946_RIB1.proc_membership_ccsr_conditions_10
union all
select * from p947_SCB1.proc_membership_ccsr_conditions_10
union all
select * from p948_SDB1.proc_membership_ccsr_conditions_10
union all
select * from p950_TNB2.proc_membership_ccsr_conditions_10
union all
select * from p950_TNL2.proc_membership_ccsr_conditions_10
union all
select * from p952_UTB1.proc_membership_ccsr_conditions_10
union all
select * from p954_VAB1.proc_membership_ccsr_conditions_10
union all
select * from p957_CAB2.proc_membership_ccsr_conditions_10
union all
select * from p958_PAB1.proc_membership_ccsr_conditions_10
union all
select * from p906_KSB1.proc_membership_ccsr_conditions_10
'

--claims
--create view for Financial 20 detail 


set @claims_views = '
create view all_plans.vw_proc_claims_financial_20_detail_b4_exclusion as
select * from p1017_WAB1.vw_proc_claims_financial_20_detail
union all
select * from p1395_WAB1.vw_proc_claims_financial_20_detail
union all
select * from p1420_PAL6.vw_proc_claims_financial_20_detail
union all
select * from p880_NJB1.vw_proc_claims_financial_20_detail
union all
select * from p880_NJL2.vw_proc_claims_financial_20_detail
union all
select * from p880_NJ3E.vw_proc_claims_financial_20_detail
union all
select * from p881_MIB1.vw_proc_claims_financial_20_detail
union all
select * from p884_MAB1.vw_proc_claims_financial_20_detail
union all
select * from p885_ILB1.vw_proc_claims_financial_20_detail
union all
select * from p886_INB2.vw_proc_claims_financial_20_detail
union all
select * from p887_TXB1.vw_proc_claims_financial_20_detail
union all
select * from p888_CTB1.vw_proc_claims_financial_20_detail
union all
select * from p890_INB2.vw_proc_claims_financial_20_detail
union all
select * from p891_ALB1.vw_proc_claims_financial_20_detail
union all
select * from p893_AZB1.vw_proc_claims_financial_20_detail
union all
select * from p893_AZL1.vw_proc_claims_financial_20_detail
union all
select * from p894_ARB2.vw_proc_claims_financial_20_detail  
union all
select * from p895_CAB1.vw_proc_claims_financial_20_detail
union all
select * from p895_CAL3.vw_proc_claims_financial_20_detail
union all
select * from p896_COB1.vw_proc_claims_financial_20_detail
union all
select * from p897_DEB1.vw_proc_claims_financial_20_detail
union all
select * from p898_DCB1.vw_proc_claims_financial_20_detail
union all
select * from p898_DCL2.vw_proc_claims_financial_20_detail
union all
select * from p899_FLB1.vw_proc_claims_financial_20_detail
union all
select * from p899_FLL2.vw_proc_claims_financial_20_detail
union all
select * from p900_GAB1.vw_proc_claims_financial_20_detail
union all
select * from p900_GAP3.vw_proc_claims_financial_20_detail
union all
select * from p902_IDB1.vw_proc_claims_financial_20_detail
union all
select * from p903_IDB2.vw_proc_claims_financial_20_detail
union all
select * from p905_IAB1.vw_proc_claims_financial_20_detail
union all
select * from p907_INB2.vw_proc_claims_financial_20_detail
union all
select * from p908_LAB1.vw_proc_claims_financial_20_detail
union all
select * from p909_MEB1.vw_proc_claims_financial_20_detail
union all
select * from p911_MNB1.vw_proc_claims_financial_20_detail
union all
select * from p913_MOL1.vw_proc_claims_financial_20_detail
union all
select * from p914_INB2.vw_proc_claims_financial_20_detail
union all
select * from p914_MOL6.vw_proc_claims_financial_20_detail
union all
select * from p914_P3MO.vw_proc_claims_financial_20_detail
union all
select * from p915_MTB1.vw_proc_claims_financial_20_detail
union all
select * from p917_WAB2.vw_proc_claims_financial_20_detail
union all
select * from p918_OKB1.vw_proc_claims_financial_20_detail
union all
select * from p918_OKL3.vw_proc_claims_financial_20_detail
union all
select * from p918_OKL8.vw_proc_claims_financial_20_detail
union all
select * from p920_ORB1.vw_proc_claims_financial_20_detail
union all
select * from p921_NVB1.vw_proc_claims_financial_20_detail
union all
select * from p922_NHB1.vw_proc_claims_financial_20_detail
union all
select * from p922_P1NH.vw_proc_claims_financial_20_detail
union all
select * from p924_NMB1.vw_proc_claims_financial_20_detail
union all
select * from p925_PAB6.vw_proc_claims_financial_20_detail
union all
select * from p928_PAB9.vw_proc_claims_financial_20_detail
union all
select * from p930_NYB3.vw_proc_claims_financial_20_detail
union all
select * from p938_INB2.vw_proc_claims_financial_20_detail
union all
select * from p938_WIL2.vw_proc_claims_financial_20_detail
union all
select * from p940_NCB2.vw_proc_claims_financial_20_detail
union all
select * from p946_RIB1.vw_proc_claims_financial_20_detail
union all
select * from p947_SCB1.vw_proc_claims_financial_20_detail
union all
select * from p948_SDB1.vw_proc_claims_financial_20_detail
union all
select * from p950_TNB2.vw_proc_claims_financial_20_detail
union all
select * from p950_TNL2.vw_proc_claims_financial_20_detail
union all
select * from p952_UTB1.vw_proc_claims_financial_20_detail
union all
select * from p954_VAB1.vw_proc_claims_financial_20_detail
union all
select * from p957_CAB2.vw_proc_claims_financial_20_detail
union all
select * from p958_PAB1.vw_proc_claims_financial_20_detail
union all
select * from p906_KSB1.vw_proc_claims_financial_20_detail
'


      if not exists (select * from INFORMATION_SCHEMA.VIEWS where TABLE_SCHEMA = 'all_plans' and TABLE_NAME = 'vw_proc_membership_ccsr_conditions_20_member_risk_score_b4_exclusion')
	    begin
	  	  exec sp_executesql @membership_views
        end
        else if @p_replace_existing = 'Y'
		       begin set @sql_temp = 'drop view all_plans.vw_proc_membership_ccsr_conditions_20_member_risk_score_b4_exclusion' 
                     exec (@sql_temp) 
		             exec sp_executesql @membership_views
		       end


      if not exists (select * from INFORMATION_SCHEMA.VIEWS where TABLE_SCHEMA = 'all_plans' and TABLE_NAME = 'vw_proc_membership_ccsr_conditions_10_b4_exclusion')
	    begin
	  	  exec sp_executesql @condition_views
        end
        else if @p_replace_existing = 'Y'
		       begin set @sql_temp = 'drop view all_plans.vw_proc_membership_ccsr_conditions_10_b4_exclusion' 
                     exec (@sql_temp) 
		             exec sp_executesql @condition_views
		       end

      if not exists (select * from INFORMATION_SCHEMA.VIEWS where TABLE_SCHEMA = 'all_plans' and TABLE_NAME = 'vw_proc_claims_financial_20_detail_b4_exclusion')
	    begin
	  	  exec sp_executesql @claims_views
        end
        else if @p_replace_existing = 'Y'
		       begin set @sql_temp = 'drop view all_plans.vw_proc_claims_financial_20_detail_b4_exclusion' 
                     exec (@sql_temp) 
		             exec sp_executesql @claims_views
		       end



end/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/


GO
/****** Object:  StoredProcedure [dbo].[sp_base_2_apply_membership_exclusions]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  procedure [dbo].[sp_base_2_apply_membership_exclusions]
/*****************************************************************************
 Description: 
    Common process of applying membership exclusion
	Happen in each schema (also materialize view into table)


 Parameters:
    schema_name - the plan product to run

 Return:

 Notes:

 Change History:
	2016-07-11 SL - initial version (start from CY15)
	2016-07-12 SL - add CLUSTERED COLUMNSTORE index
	2016-08-10 SL - add medical coverage indicator filter

	2017-05-12 SL - add subgroup to enable more granular control of groups
	CY2016
	2017-10-19 SL - move COB exclusion logic here (used to be in mbr views) due to handling of members changed products
	                remove the old logic (if one home month then home) host/hosted assignment from here
					move the clean up of the member months up to 12 months and assignment of unique member attributes here (including home/hosted)
	CY2017
	2018-07-02 SL - implement COB exclusion for NDW plans at member level
	2020-05-21 TK - Per Ankita, COB issue has been fixed. SP to identify COB members no longer needed therefore the exclusion code will only identify members who were excluded due to 65 and older. 
	              as the code already filters out members that are excluded in traceablity which now correctly identifies all cob members. 
	

*****************************************************************************/
                                     @p_schema_name    varchar(50) = null,
									 @p_create_CCI     varchar(1) = null
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = '@p_schema_name'
	SET @Logging_Values = ISNULL(CAST(@p_schema_name AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/
begin


declare @schema_name varchar(100),
	    @dynSQL nvarchar(max),
		--@customSQL nvarchar(max),
        @row_count int,
		@indexName varchar(255),
		@indexSQL nvarchar(max)


set @schema_name = @p_schema_name




--1. Pull base membership data
--Implement members 65 at the end period 

set @dynSQL = replace('

if object_id (''%schema_name%.proc_membership_source_00_base'', ''U'') is not null
drop table %schema_name%.proc_membership_source_00_base;

;with member_age_end_of_period as
(select
	member_id,
	max(coalesce(member_age_calculated, member_age)) as member_age_max
from %schema_name%.vw_sour_membership_00
group by
	member_id
)
select
	a.bcbsa_plan_id,
	a.original_pdr_product_id, 
	a.pdr_product_id,
	a.chp_carrier_id,
	a.vq_year,
	a.upload,
	a.home_hosted_indicator,                                                                            
	a.line_of_business,
	a.chp_row_id,
	a.atl_grouper_exclusion_flag,
	a.atl_grouper_exclusion_code,
	case when cast(c.member_age_max as int) >= 65 then ''65'' else null end as exclusion_code,
	a.year_month,
	a.member_months,
	a.member_id,
	a.zip3,
	a.client_zip_code,
	a.employer_id,
	a.group_id,
	a.account_id,
	a.subgroup,   
	a.group_name,
	a.member_gender,
	a.member_age,
	a.Member_DOB,
	a.member_age_calculated,
	cast(c.member_age_max as int) as member_age_max,
	case when cast(c.member_age_max as int) >= 65 then ''Y''  else ''N'' end as flag_member_65_older, 
	a.member_relationship_code,
	a.member_funding_arrangements,
	a.effective_date_of_coverage,
	a.termination_date_of_coverage,
	a.contract_id
into %schema_name%.proc_membership_source_00_base
from %schema_name%.vw_sour_membership_00 a
left join 
member_age_end_of_period c
on c.member_id = a.member_id
where  a.atl_grouper_exclusion_flag = ''N''




--2017-10-23 add clean up of member months (up to 12) and assign unique member attributes here (funding arrangmenet, zip code, group, etc)

if object_id (''%schema_name%.proc_membership_source_10_assign_mbr_attributes'', ''U'') is not null
drop table %schema_name%.proc_membership_source_10_assign_mbr_attributes;
select 
	bcbsa_plan_id,
	original_pdr_product_id,
	pdr_product_id,
	chp_carrier_id,
	vq_year,
	upload,
	home_hosted_indicator,
	line_of_business,
	chp_row_id,
	atl_grouper_exclusion_flag,
	atl_grouper_exclusion_code,
	case when row_number() over (partition by member_id, year_month order by effective_date_of_coverage desc, termination_date_of_coverage desc, employer_id,home_hosted_indicator asc) > 1 then 1000 else exclusion_code end as exclusion_code,
	year_month,
	member_months,
	member_id,
	zip3,
	client_zip_code,
	employer_id,
	group_id,
	account_id,
	subgroup,
	group_name,
	member_gender,
	member_age,
	Member_DOB,
	member_age_calculated,
	member_age_max,
	flag_member_65_older,
	member_relationship_code,
	member_funding_arrangements,
	effective_date_of_coverage,
	termination_date_of_coverage,
	contract_id,
	row_number() over (partition by member_id order by year_month desc, effective_date_of_coverage desc, termination_date_of_coverage desc, employer_id, group_id) as rank_final_enrollment
into %schema_name%.proc_membership_source_10_assign_mbr_attributes
from %schema_name%.proc_membership_source_00_base 


--keep the reassigned member attributes

if object_id (''%schema_name%.proc_membership_source_20_unique_mbr_attributes'', ''U'') is not null
drop table %schema_name%.proc_membership_source_20_unique_mbr_attributes;
select
	*
into %schema_name%.proc_membership_source_20_unique_mbr_attributes
from %schema_name%.proc_membership_source_10_assign_mbr_attributes
where rank_final_enrollment = 1



if object_id (''%schema_name%.proc_membership_source_00'', ''U'') is not null
drop table %schema_name%.proc_membership_source_00;
select
	a.bcbsa_plan_id,
	a.original_pdr_product_id,
	a.pdr_product_id,
	a.chp_carrier_id,
	a.vq_year,
	a.upload,
	a.home_hosted_indicator,                                --member month level as in VQ process
	c.home_hosted_indicator as home_hosted_indicator_v2,    --member level by last enrollment month zip code
	a.line_of_business,
	a.chp_row_id,
	a.atl_grouper_exclusion_flag,
	a.atl_grouper_exclusion_code,
	a.exclusion_code,
	a.year_month,
	a.member_months,
	a.member_id,
	a.zip3,
	a.client_zip_code,
	a.employer_id,
	a.group_id,
	a.account_id,
	a.subgroup,
	a.group_name,
	a.member_gender,
	a.member_age,
	a.Member_DOB,
	a.member_age_calculated,
	a.member_age_max,
	a.flag_member_65_older,
	a.member_relationship_code,
	a.member_funding_arrangements,
	a.effective_date_of_coverage,
	a.termination_date_of_coverage,
	a.contract_id
into %schema_name%.proc_membership_source_00
from %schema_name%.proc_membership_source_10_assign_mbr_attributes a
left join
%schema_name%.proc_membership_source_20_unique_mbr_attributes c
on c.member_id = a.member_id



--clean up intermediate tables

drop table %schema_name%.proc_membership_source_00_base
drop table %schema_name%.proc_membership_source_10_assign_mbr_attributes


','%schema_name%',@schema_name)

 print @schema_name+ '-proc_membership_source_00 table is created'
exec sp_executesql @dynSQL





set @row_count = @@ROWCOUNT

exec Log.SpLogTableRowCounts @CallId = @CallId, @schema_name = @schema_name, @table_name = 'proc_membership_source_00', @row_count = @row_count


--create clustered columnstore index
if @p_create_CCI = 'Y'
begin
	select @indexName = name from sys.indexes where object_id = object_id(@schema_name + '.proc_membership_source_00') and type_desc = 'CLUSTERED COLUMNSTORE'
	if @indexName is not null 
		begin 
		set @indexSQL = 'drop index ' + @indexName + ' on ' + @schema_name + '.proc_membership_source_00' 
		exec sp_executesql @indexSQL 
		end

			
	set @indexSQL = 'create clustered columnstore index idx_' + @schema_name + '_proc_membership_source_00 on ' + @schema_name + '.proc_membership_source_00 with (MAXDOP = 4)'
	exec sp_executesql @indexSQL 
end


end

/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/

---excluding Surrogate data for FLB1 which should not have been included in CY20 traceability
delete from p899_FLB1.proc_membership_source_20_unique_mbr_attributes
where member_id in (select * from dbo.FLB1_surrogate_to_exclude)

delete  from p899_FLl2.proc_membership_source_20_unique_mbr_attributes
where member_id in (select * from dbo.FLB1_surrogate_to_exclude)


delete from p899_FLB1.proc_membership_source_00
where member_id in (select * from dbo.FLB1_surrogate_to_exclude)

delete  from p899_FLl2.proc_membership_source_00
where member_id in (select * from dbo.FLB1_surrogate_to_exclude)

GO
/****** Object:  StoredProcedure [dbo].[sp_base_3_process_claims_financial_step_1]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_base_3_process_claims_financial_step_1]
/*****************************************************************************
 Description: 
    Common process of processing claims with financial data
	All common process happen in dbo (results refreshed when a plan product is run)


 Parameters:
    schema_name - the plan product to run

 Return:

 Notes:

 Change History:
	2015-10-22 SL - initial version
	2015-10-26 SL - source from views
	2015-10-29 SL - try create CCI to test process speed
	2015-11-02 SL - remove create CCI, comparison of process time indicates it
		generally takes longer to create CCI than what it saves
	2015-11-10 SL - move savings and ucr amount to later step
	2016-01-27 SL - move allowed_amount_uds_pmpm here so that high_claimant_flag matches the data
	2016-07-12 SL - Implemented new logic of Appendix E exclusion according to data specs
					add CLUSTERED COLUMNSTORE index
	2016-07-20 SL - Implement adjusted paid for MN due to addition of delta cause too many negatives (P4P and Provider Tax)
					For MI also due to negatives
	2016-07-27 SL - when pull eligible claims, add employer id match to help fix paid to allowed ratio of NA in claims
	2016-08-10 SL - add medical coverage indicator filter
	2016-09-20 SL - apply additional completion factor for BCBS FL facility claims
	CY2016

	2017-10-04 SL - remove the completion factor due to 3 months runout
	2017-10-23 SL - populate UDS PMPM Allowed Amount using Allowed Amount (adjustment of Other Provider Payments in separate schedule in CY16)
	2017-11-18 SL - remove employer_id match when pulling claims due to claims table begins to source employer_id from membership file for consistenty, downstream process should be all match. Needed also to fix IBC issue where Account ID is not requested in the claim file, so when mapping Account ID to employer_id, it interupt some processes
	2018-02-22 SL - add other_provider_payment
	2020-05-22 TK - added noncontracted_savings_indicator field. Changed m.exclusion_code in (65, 35) to just 65 as COB exclusion is now part of the VQ exclusions
	2020-07-20 TK  -Added second logic for covid indicator


*****************************************************************************/
                                     @p_schema_name    varchar(50) = null,
									 @p_create_CCI     varchar(1) = 'Y'
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = '@p_schema_name'
	SET @Logging_Values = ISNULL(CAST(@p_schema_name AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/
begin

declare @schema_name varchar(100),
	    @dynSQL nvarchar(max),
		@indexName varchar(255),
		@indexSQL nvarchar(max),
		@carrier_group_code varchar(5)


declare cur_schema cursor local for
	select 
		schema_name, carrier_group_code
	from process.data_status_tracking
	  where include_in_uds_pmpm = 1
	  and schema_name = isnull(@p_schema_name, schema_name)
	  order by case when chp_carrier_id in (895, 881, 885, 887) then 9999 else chp_carrier_id end

	  


  open cur_schema
  fetch next from cur_schema into @schema_name, @carrier_group_code 

  while ( @@FETCH_STATUS = 0 )
    begin



--1. This code creates exclusion flags for Appendix E which will exclude the whole claim line(exclude_medical_benefit_flag_step1), appendix d which will exclude the revenue or diagnosis code from the
  --risk score(flag_exclude_diagnosis_code). it also flags member exclusion (cob, age separately) and other member exclusions

set @dynSQL = replace('
if object_id (''%schema_name%.proc_claims_financial_00'', ''U'') is not null
drop table %schema_name%.proc_claims_financial_00;

select
	case when CPT_Exclusion.cpt_hcpcs_code is not null or REV_Exclusion.revenue_code is not null then ''Y'' else ''N'' end as flag_exclude_diagnosis_code,
	case when coalesce(EXCLUDE_diag.cpt_rev_diag_code, EXCLUDE_rev.cpt_rev_diag_code, EXCLUDE_cpt.cpt_rev_diag_code) is not null then ''Y'' else ''N'' end as exclude_medical_benefit_flag_step1,
	case when m.exclusion_code = 65 then m.exclusion_code     --claims from members excluded from 65+ 
		 when EXCLUDE_diag.cpt_rev_diag_code is not null then 10
	     when EXCLUDE_cpt.code_range = ''JXXXX'' then 20
		 when coalesce(EXCLUDE_rev.cpt_rev_diag_code, EXCLUDE_cpt.cpt_rev_diag_code) is not null then 30
		 when c.atl_grouper_orphan_claims_flag = ''Y'' and c.exclusion_flag = ''N'' then 40    --Per Josh on 10-27-15, it is OK if we report 0 in Appendix H
		 else null end as reconciliation_code,
    c.bcbsa_plan_id,
    c.pdr_product_id,
    c.chp_carrier_id,
    c.vq_year,
	c.year_month,
    c.upload,
    c.chp_row_id,
    c.atl_grouper_exclusion_flag,
    c.atl_grouper_exclusion_code,
    c.atl_grouper_orphan_claims_flag,
    case when m1.member_id is null then ''Y'' else c.exclusion_flag end as exclusion_flag,
    c.member_id,
	c.raw_claim_number,
    c.original_claim_number,
    c.claim_number,
    c.claim_line_number,
    c.date_of_service,
    c.admit_date,
    c.discharge_date,
    c.paid_date,
    c.account_id,
    c.group_id,
    c.group_name,
    c.subgroup,
	c.employer_id,
    c.claim_status,
    c.reason_adjustment_code,
    c.claim_type,
	c.covid_ind,
    c.service_category,
	c.primary_diagnosis_code,
    c.diagnosis_code_2,
    c.diagnosis_code_3,
    c.diagnosis_code_4,
    c.diagnosis_code_5,
    c.diagnosis_code_6,
    c.diagnosis_code_7,
    c.diagnosis_code_8,
    c.diagnosis_code_9,
    c.diagnosis_code_10,
    c.diagnosis_code_11,
    c.diagnosis_code_12,
    c.diagnosis_code_13,
    c.diagnosis_code_14,
    c.diagnosis_code_15,
    c.revenue_code,
    c.procedure_code,
    c.cpt_modifier_code,
    c.claims_benefit_payment_status,
    c.provider_contracting_status,
    c.provider_network_status,
    c.benefit_payment_contract_status,
    c.submitted_amount,
    c.non_covered_amount,
    c.billed_amount,
    c.adjusted_billed_amount,         
    c.allowed_amount,
    c.adjusted_allowed_amount,
	c.other_provider_payment_direct,
	c.other_provider_payment_indirect,
    c.paid_amount,
	c.adjusted_paid_amount,
    c.cob_amount,
    c.copayment_amount,
    c.coinsurance_amount,
    c.deductible_amount,
    c.admits,
    c.inpatient_days,
    c.cost_model_utilization,
	case when c.service_category in (''5'', ''6'', ''11.2'', ''35'') then c.cost_model_utilization else c.utilization_wo_exclusion end as utilization,
	c.adjusted_admits,
    c.adjusted_inpatient_days,
    c.adjusted_cost_model_utilization,
    case when c.service_category in (''5'', ''6'', ''11.2'', ''35'') then c.adjusted_cost_model_utilization else c.adjusted_utilization_wo_exclusion end as adjusted_utilization
into %schema_name%.proc_claims_financial_00
from %schema_name%.vw_sour_claims_all_00 c
/*********** Appendix E exclusion - Medical claims exclusion - Step 1 ************/
left join
reference.ref_medical_benefit_exclusion_list_appendix_e EXCLUDE_diag       --exclude for all claim types based on primary diagnosis code
on EXCLUDE_diag.cpt_rev_diag_code = left(c.primary_diagnosis_code,3) 
and EXCLUDE_diag.code_type = 10
left join
reference.ref_medical_benefit_exclusion_list_appendix_e EXCLUDE_rev        --exclude for Non-IP claim type
on EXCLUDE_rev.cpt_rev_diag_code = c.revenue_code
and EXCLUDE_rev.code_type = 20
and c.claim_type <> 1
left join
reference.ref_medical_benefit_exclusion_list_appendix_e EXCLUDE_cpt		 --exclude for Non-IP claim type
on EXCLUDE_cpt.cpt_rev_diag_code = case when left(c.procedure_code,1) in (''D'', ''J'') then concat(left(c.procedure_code,1),''XXXX'') else c.procedure_code end
and EXCLUDE_cpt.code_type = 30
and c.claim_type <> 1
/*********** Appendix D exclusion - claim line diagnosis code ************/
left join
reference.ref_diagnosis_code_exclusion_list_appendix_d_cpt CPT_Exclusion
on CPT_Exclusion.cpt_hcpcs_code = c.procedure_code
left join
reference.ref_diagnosis_code_exclusion_list_appendix_d_revenue REV_Exclusion
on REV_Exclusion.revenue_code = c.revenue_code
/*********** Apply Member exclusion and populate reconciliation code ************/
left join
(select 
	member_id, 
	max(exclusion_code) as exclusion_code
from %schema_name%.proc_membership_source_00 
group by
	member_id ) m   
on m.member_id = c.member_id

left join
(select 
	member_id
from %schema_name%.proc_membership_source_00 
where exclusion_code is null
group by
member_id ) m1
on m1.member_id = c.member_id
where c.exclusion_flag = ''N''
and c.paid_date <= convert(date, ''2021-03-31'')
and exists (select * from %schema_name%.proc_membership_source_00       
where member_id = c.member_id );    
','%schema_name%',@schema_name)

exec sp_executesql @dynSQL
PRINT (@dynSQL)

--=====================================================================================================
--2021-06-29 (TK) Creating temp table for covid- related fireld to assign one value per member
--with the hierachy of YI, YN and lastly NN
--final Covid indicator  logic is done at this step because it's after the members have changed products
--======================================================================================================
set @dynSQL = replace('
if object_id (''%schema_name%.Covid_Indicator_Membership'', ''U'') is not null
drop table %schema_name%.Covid_Indicator_Membership

Select * 
into %schema_name%.Covid_Indicator_Membership
from (select member_id
            ,Covid_Ind 
			,ROW_NUMBER () over (partition by member_id order by case when Covid_Ind=''YI'' then 1 when  Covid_Ind=''YN'' then 2 else 3 end) as Covid_Related_Indicator
     from (select distinct member_id ,Covid_Ind  from %schema_name%.proc_claims_financial_00 )a
)x
where Covid_Related_Indicator=1 
','%schema_name%',@schema_name)

exec sp_executesql @dynSQL
print (@dynSQL)

/*
----one of for Anthem CT, Deleting claims where primary diagnosis code is 9, not needed for CY21 (Delete)
select distinct chp_row_id, concat('CTB1', chp_row_id) as [New_id], diag_1_cd , proc_cd, CLAIM_TYPE into #delete
from xclaims.p888_CTB1.load_raw_claims where diag_1_cd ='9'

Delete from  p888_CTB1.proc_claims_financial_00 where chp_row_id in (select [New_id] from #delete)

*/


--3. apply completion factors BEFORE the remapping (to utilization as well?)
--re-categorize OP and Prof for claim lines with revenue codes between 960 and 989
--re-categorize prof other (34-37) into OP Ancillary
--calculate R&C cutback
--evaluating at a claim level if the eligble billed is >0 when the claim line based on appendix E is excluded

set @dynSQL = replace('
if object_id (''%schema_name%.proc_claims_financial_10'', ''U'') is not null
drop table %schema_name%.proc_claims_financial_10

select
	case when b.claim_tot_billed = 0 and b.claim_tot_adj_billed = 0 then ''Y'' else a.exclude_medical_benefit_flag_step1 end as exclude_medical_benefit_flag,   --08-08-2016 for the excluded claim lines, they are still excluded
	b.cnt_clm_line,
	b.claim_tot_billed,
	b.claim_tot_allowed,
	a.exclude_medical_benefit_flag_step1,
	a.flag_exclude_diagnosis_code,
	a.reconciliation_code,
	a.bcbsa_plan_id,
	a.pdr_product_id,
	a.chp_carrier_id,
	a.vq_year,
	a.year_month,
	a.upload,
	a.chp_row_id,
	a.atl_grouper_exclusion_flag,
	a.atl_grouper_exclusion_code,
	a.atl_grouper_orphan_claims_flag,
	a.exclusion_flag,
	a.member_id,
	a.raw_claim_number,
	a.original_claim_number,
	claim_line_number,
	claim_status,
	admit_date,
	date_of_service,
	paid_date,
	/***************** Pull Member Group Information here ****************/
	a.account_id as account_id_in_claims,
	a.group_id as group_id_in_claims,
	a.employer_id as employer_id_in_claims,
	a.group_name as group_name_in_claims,
	a.subgroup as subgroup_in_claims,
	m.home_hosted_indicator,
	m.account_id,
    m.group_id,
	m.employer_id,
    m.group_name,
    m.subgroup,
	/*******************************************************************/
	a.claim_type as atl_grouper_claim_type,
	/* CY14 UDS PMPM Spec page 12
For claim lines coded with Revenue Codes 960-989, the following criteria should be used to
determine if the claim line should be included in Outpatient Facility or Professional claims:
If the claim line has a Revenue Code between 960 and 989 AND has a CPT/HCPCS code
coded on the claim line, the claim line should be included as a Professional claim and the
CPT/HCPCS code should be reported as prescribed for Professional claims
Otherwise, the claim should be categorized as an Outpatient Facility claims*/
	case when cast(revenue_code as int) between 960 and 989 then
				case when a.claim_type = 2 and nullif(procedure_code,'''') is not null then 3
					 when a.claim_type = 3 and nullif(procedure_code,'''') is null then 2
					 else a.claim_type end
		 else a.claim_type end as claim_type,
	service_category as alt_grouper_service_category,
	case when cast(revenue_code as int) between 960 and 989 and a.claim_type = 3 and nullif(procedure_code,'''') is null then
				case when service_category = ''32'' then ''7''
				     when service_category = ''33'' then ''8''
					 else ''11'' end
		 else service_category end as service_category,   --did not flip for claim lines that are remapped to Prof from OP, OK since final claims data does not require service category for professional claims
	procedure_code,
	cpt_modifier_code,
	primary_diagnosis_code,
    diagnosis_code_2,
    diagnosis_code_3,
    diagnosis_code_4,
    diagnosis_code_5,
    diagnosis_code_6,
    diagnosis_code_7,
    diagnosis_code_8,
    diagnosis_code_9,
    diagnosis_code_10,
    diagnosis_code_11,
    diagnosis_code_12,
    diagnosis_code_13,
    diagnosis_code_14,
    diagnosis_code_15,
	revenue_code,
	a.covid_ind,
    c.covid_Ind as Covid_Related_Indicator,
	a.claims_benefit_payment_status,
	a.provider_contracting_status,
	a.provider_network_status,
	a.benefit_payment_contract_status,
	reason_adjustment_code,
	submitted_amount,
	billed_amount,  
	adjusted_billed_amount,
	allowed_amount,
	adjusted_allowed_amount,
	other_provider_payment_direct,
	other_provider_payment_indirect,
	adjusted_allowed_amount as allowed_amount_uds_pmpm,   
	case when r.flag_calculate_RnC_cutback_amount = 1 then (coalesce(billed_amount,0)-coalesce(allowed_amount,0)) else 0 end as RnC_cutback_amount,
	case when r.flag_realize_discount = 1 then (coalesce(billed_amount,0)-coalesce(allowed_amount,0)) else 0 end as savings_amount,	
	case when a.benefit_payment_contract_status in (''IX'',''OX'') and r.flag_realize_discount =1 then ''Y'' ELSE ''N'' end as noncontracted_savings_inidcator,
	paid_amount,
	adjusted_paid_amount,
	a.cob_amount,
	non_covered_amount,
	copayment_amount,
	coinsurance_amount,
	deductible_amount,
	admits,
	inpatient_days,
	cost_model_utilization,
	utilization,
	adjusted_admits,
	adjusted_inpatient_days,
	adjusted_cost_model_utilization,
	adjusted_utilization
into %schema_name%.proc_claims_financial_10
from %schema_name%.proc_claims_financial_00 a
left join
(select
	original_claim_number,
	count(*) as cnt_clm_line,
	sum(billed_amount) as claim_tot_billed,
	sum(adjusted_billed_amount) as claim_tot_adj_billed,   
	sum(allowed_amount) as claim_tot_allowed
from %schema_name%.proc_claims_financial_00
where exclude_medical_benefit_flag_step1 = ''N''
group by
	original_claim_number
) b
on b.original_claim_number = a.original_claim_number
left join
reference.ref_enhanced_four_bucket_rules r
on r.claims_benefit_payment_status = a.claims_benefit_payment_status
and r.provider_network_status = a.provider_network_status
and r.provider_contracting_status = a.provider_contracting_status
left join
%schema_name%.proc_membership_source_20_unique_mbr_attributes m
on m.member_id = a.member_id
left join
%schema_name%.Covid_Indicator_Membership C
on a.member_id=c.member_id
','%schema_name%',@schema_name)



exec sp_executesql @dynSQL
print (@dynSQL)






--create clustered columnstore index
if @p_create_CCI = 'Y'
begin
	select @indexName = name from sys.indexes where object_id = object_id(@schema_name + '.proc_claims_financial_10') and type_desc = 'CLUSTERED COLUMNSTORE'
	if @indexName is not null 
		begin 
		set @indexSQL = 'drop index ' + @indexName + ' on ' + @schema_name + '.proc_claims_financial_10' 
		exec sp_executesql @indexSQL 
		end

			
	set @indexSQL = 'create clustered columnstore index idx_' + @schema_name + 'proc_claims_financial_10 on ' + @schema_name + '.proc_claims_financial_10 with (MAXDOP = 4)'
	exec sp_executesql @indexSQL 
end




----drop intermediate table to cut space
set @dynSQL = replace('
 drop table %schema_name%.proc_claims_financial_00
 drop table %schema_name%.Covid_Indicator_Membership
 drop table %schema_name%.diagnosis_code_proc_03

','%schema_name%',@schema_name)

exec sp_executesql @dynSQL
PRINT (@dynSQL)

	  fetch next from cur_schema into @schema_name,@carrier_group_code

    end

  close cur_schema
  deallocate cur_schema



end/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/

delete from p899_FLB1.proc_claims_financial_10
where member_id in ( select * from dbo.FLB1_surrogate_to_exclude)

delete  from p899_FLl2.proc_claims_financial_10
where member_id in ( select * from dbo.FLB1_surrogate_to_exclude)


GO
/****** Object:  StoredProcedure [dbo].[sp_base_5_process_claims_diagnosis_codes]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_base_5_process_claims_diagnosis_codes]
/*****************************************************************************
 Description: 
    Common process of processing claims with diagnosis codes
	All common process happen in dbo (results refreshed when a plan product is run)


 Parameters:
    schema_name - the plan product to run

 Return:

 Notes:

 Change History:
	2015-10-19 SL - initial version
	2015-10-26 SL - source from views
	2015-11-15 SL - add "join to financial_00" to remove claims from Appendix E 
					when pulling diagnosis codes
	2016-06-01 SL - starting from dx codes with patch applied upfront, also with professional headers applied
	2016-06-24 SL - use unpivot coding to replace previously used union coding
	CY2016
	2017-10-06 SL - revise limit to 9 or 4 dx codes in the first step
	                cleanup unnecessary processes to improve performance
	2021-07-06 TK - Changes made to code to incooperate new changes to the mapping catgories for conditions (CCS to CCSR). Changes made include setting valid codes
	                as 1000 and invalid (can't be mapped) to 9999. 1000 won't be used downstream, it's just a means of setting the unmapped codes to 9999
	2021-07-13 TK  - Added new logic and tables to unpivot CCSR codes, to select distict condition per member in the downstream process
	2021-07-13 TK -  Deleted duplicated unused fields  of submitted_diagnosis_code
**************************************************************************************************************************************************/
                                     @p_schema_name    varchar(50) = null,
									 @p_create_CCI     varchar(1) = 'Y'
									
									 
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = '@p_schema_name'
	SET @Logging_Values = ISNULL(CAST(@p_schema_name AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/
begin


declare @schema_name varchar(100),
	    @dynSQL nvarchar(max),
		@indexName varchar(255),
		@indexSQL nvarchar(max)


set @schema_name = @p_schema_name




set @dynSQL = replace('
--1. Unpivot the diagnosis code

if object_id (''%schema_name%.proc_claims_diagnosis_code_10'', ''U'') is not null
drop table %schema_name%.proc_claims_diagnosis_code_10;

select 
	*
into %schema_name%.proc_claims_diagnosis_code_10
from 
(
select
	bcbsa_plan_id,
	chp_carrier_id,
	pdr_product_id,
	chp_row_id,
	procedure_code,
	revenue_code,
	flag_exclude_diagnosis_code,
	member_id,
	claim_type,
	original_claim_number,
	claim_line_number,
	case when right(col,2) = ''de'' then 1 else replace(right(col,2),''_'','''') end as pos_diag_code,
	replace(value,''.'','''') as diagnosis_code
from
(select
	bcbsa_plan_id,
	chp_carrier_id,
	pdr_product_id,
	chp_row_id,
	procedure_code,
	revenue_code,
	flag_exclude_diagnosis_code,
	member_id,
	claim_type,
	original_claim_number,
	claim_line_number,
	primary_diagnosis_code,
	diagnosis_code_2,
	diagnosis_code_3,
	diagnosis_code_4,
	diagnosis_code_5,
	diagnosis_code_6,
	diagnosis_code_7,
	diagnosis_code_8,
	diagnosis_code_9
from %schema_name%.proc_claims_financial_10
where exclusion_flag = ''N''  
and exclude_medical_benefit_flag = ''N'') src
unpivot
(
value
for col in (primary_diagnosis_code, diagnosis_code_2, diagnosis_code_3, diagnosis_code_4, diagnosis_code_5, diagnosis_code_6, diagnosis_code_7, diagnosis_code_8, diagnosis_code_9)
) unpiv
) a
where (claim_type <> 3 and pos_diag_code <= 9 or claim_type = 3 and pos_diag_code <= 4)
and len(diagnosis_code) > 0


--2. select DISTINCT member_id and diagnosis_code


if object_id (''%schema_name%.proc_claims_diagnosis_code_20'', ''U'') is not null
drop table %schema_name%.proc_claims_diagnosis_code_20;

;with CDR_diagnosis_code as
(
select
	bcbsa_plan_id,
	chp_carrier_id,
	pdr_product_id,
	chp_row_id,
	procedure_code,
	revenue_code,
	flag_exclude_diagnosis_code,
	member_id,
	claim_type,
	original_claim_number,
	claim_line_number,
	pos_diag_code,
	diagnosis_code,
	case when row_number() over (partition by chp_carrier_id, pdr_product_id, member_id, diagnosis_code order by flag_exclude_diagnosis_code, pos_diag_code, chp_row_id) > 1 then ''Y'' else ''N'' end as flag_dup_mbr_diag_code 
from %schema_name%.proc_claims_diagnosis_code_10)

select
	bcbsa_plan_id,
	chp_carrier_id,
	pdr_product_id,
	chp_row_id,
	procedure_code,
	revenue_code,
	flag_exclude_diagnosis_code,
	member_id,
	claim_type,
	original_claim_number,
	claim_line_number,
	pos_diag_code,
	diagnosis_code,
	flag_dup_mbr_diag_code
into %schema_name%.proc_claims_diagnosis_code_20
from CDR_diagnosis_code 
where flag_dup_mbr_diag_code = ''N''

','%schema_name%',@schema_name)


exec sp_executesql @dynSQL


--4. Map Diagnosis Code to CCSR Category
--assign CCSR conditions at this step
set @dynSQL = replace('

if object_id (''%schema_name%.proc_claims_diagnosis_code_30'', ''U'') is not null
drop table %schema_name%.proc_claims_diagnosis_code_30;
select
	a.bcbsa_plan_id,
	a.chp_carrier_id,
	a.pdr_product_id,
	a.chp_row_id,
	a.procedure_code,
	a.revenue_code,
	a.flag_exclude_diagnosis_code,
	case when a.pos_diag_code > 3 then ''Y'' else a.flag_exclude_diagnosis_code end as flag_exclude_diagnosis_code_3dx,
	a.member_id,
	a.pos_diag_code,
	a.diagnosis_code,
	c.ccsr_cat_1,
	c.ccsr_cat_2,
	c.ccsr_cat_3,
	c.ccsr_cat_4,
	c.ccsr_cat_5,
	case when (c.ccsr_cat_1 is null and c.ccsr_cat_2 is null and c.ccsr_cat_3 is null and c.ccsr_cat_4 is null and c.ccsr_cat_5 is null)
	     then ''9999'' else ''1000'' end as ccs_category_code,
	case when c.icd_10_cm_code is not null then 1	                    
	     when c.icd_10_cm_code is null then 20		                    --9999 could not be mapped to valid diagnosis code
	     else 30 end as diagnosis_code_record_indicator
into %schema_name%.proc_claims_diagnosis_code_30
from %schema_name%.proc_claims_diagnosis_code_20 a
left join
reference.ref_icd_10_cm_ccsr_mapping c
on c.icd_10_cm_code = a.diagnosis_code
;


if object_id (''%schema_name%.proc_claims_diagnosis_code_30_unpivot_1'', ''U'') is not null
drop table %schema_name%.proc_claims_diagnosis_code_30_unpivot_1;
select  distinct 
    member_id,
	diagnosis_code,
    ccsr_cat_1,
	ccsr_cat_2,
	ccsr_cat_3,
	ccsr_cat_4,
	ccsr_cat_5
into %schema_name%.proc_claims_diagnosis_code_30_unpivot_1
from %schema_name%.proc_claims_diagnosis_code_30
;



if object_id (''%schema_name%.proc_claims_diagnosis_code_30_unpivot_2'', ''U'') is not null
drop table %schema_name%.proc_claims_diagnosis_code_30_unpivot_2;
SELECT Member_id
     ,diagnosis_code 
	 ,ccsr_cat 
	 ,ccsr
into %schema_name%.proc_claims_diagnosis_code_30_unpivot_2
FROM %schema_name%.proc_claims_diagnosis_code_30_unpivot_1

UNPIVOT
(
	CCSR
	FOR ccsr_cat in (ccsr_cat_1, ccsr_cat_2, ccsr_cat_3, ccsr_cat_4,ccsr_cat_5)
) AS ccsr
where len(ccsr)>0
;


--5. RE-Rank to get distinct member_id and CCSR conditions (also include logic to remove potential duplicates from mapping invalid diagnosis codes in above step)


if object_id (''%schema_name%.proc_claims_diagnosis_code_40'', ''U'') is not null
drop table %schema_name%.proc_claims_diagnosis_code_40;

select
	bcbsa_plan_id,
	chp_carrier_id,
	pdr_product_id,
	chp_row_id,
	procedure_code,
	revenue_code,
	flag_exclude_diagnosis_code,
	flag_exclude_diagnosis_code_3dx,
	a.member_id,
	pos_diag_code,
	a.diagnosis_code,
	coalesce(b.ccsr, a.ccs_category_code) as ccsr_category_code,
	b.ccsr_cat,
	diagnosis_code_record_indicator,
	case when row_number() over (partition by chp_carrier_id, pdr_product_id, a.member_id, ccsr order by flag_exclude_diagnosis_code, diagnosis_code_record_indicator, pos_diag_code, a.diagnosis_code, chp_row_id) > 1 then ''Y'' else ''N'' end as flag_dup_member_condition,
	case when row_number() over (partition by chp_carrier_id, pdr_product_id, a.member_id, ccsr order by flag_exclude_diagnosis_code_3dx, diagnosis_code_record_indicator, pos_diag_code, a.diagnosis_code, chp_row_id) > 1 then ''Y'' else ''N'' end as flag_dup_member_condition_3dx
into %schema_name%.proc_claims_diagnosis_code_40	
from %schema_name%.proc_claims_diagnosis_code_30 a
left join  %schema_name%.proc_claims_diagnosis_code_30_unpivot_2 b
on a.member_id=b.member_id
and a.diagnosis_code=b.diagnosis_code

','%schema_name%',@schema_name);

print (@dynsql)
exec sp_executesql @dynSQL




--create clustered columnstore index
if @p_create_CCI = 'Y'
begin
	select @indexName = name from sys.indexes where object_id = object_id(@schema_name + '.proc_claims_diagnosis_code_40') and type_desc = 'CLUSTERED COLUMNSTORE'
	if @indexName is not null 
		begin 
		set @indexSQL = 'drop index ' + @indexName + ' on ' + @schema_name + '.proc_claims_diagnosis_code_40' 
		exec sp_executesql @indexSQL 
		end

			
	set @indexSQL = 'create clustered columnstore index idx_' + @schema_name + 'proc_claims_diagnosis_code_40 on ' + @schema_name + '.proc_claims_diagnosis_code_40 with (MAXDOP = 4)'
	exec sp_executesql @indexSQL 
end


--drop intermediate table to cut space
set @dynSQL = replace('
drop table %schema_name%.proc_claims_diagnosis_code_10
drop table %schema_name%.proc_claims_diagnosis_code_20
drop table %schema_name%.proc_claims_diagnosis_code_30
drop table %schema_name%.proc_claims_diagnosis_code_30_unpivot_1
drop table %schema_name%.proc_claims_diagnosis_code_30_unpivot_2
','%schema_name%',@schema_name)

exec sp_executesql @dynSQL



end/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/




GO
/****** Object:  StoredProcedure [dbo].[sp_base_5_process_claims_diagnosis_codes_2019]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_base_5_process_claims_diagnosis_codes_2019]
/*****************************************************************************
 Description: 
    Common process of processing claims with diagnosis codes
	All common process happen in dbo (results refreshed when a plan product is run)


 Parameters:
    schema_name - the plan product to run

 Return:

 Notes:

 Change History:
	2015-10-19 SL - initial version
	2015-10-26 SL - source from views
	2015-11-15 SL - add "join to financial_00" to remove claims from Appendix E 
					when pulling diagnosis codes
	2016-06-01 SL - starting from dx codes with patch applied upfront, also with professional headers applied
	2016-06-24 SL - use unpivot coding to replace previously used union coding
	CY2016
	2017-10-06 SL - revise limit to 9 or 4 dx codes in the first step
	                cleanup unnecessary processes to improve performance
	2020-07-21 TK  - made minor updates to table name. This specific sp is only needed for CY20 to create the risk scores for CY20 using CY19 risk factors
*****************************************************************************/
                                     @p_schema_name    varchar(50) = null,
									 @p_create_CCI     varchar(1) = 'Y'
									
									 
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = '@p_schema_name'
	SET @Logging_Values = ISNULL(CAST(@p_schema_name AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/
begin


declare @schema_name varchar(100),
	    @dynSQL nvarchar(max),
		@indexName varchar(255),
		@indexSQL nvarchar(max)


set @schema_name = @p_schema_name




set @dynSQL = replace('
--1. Unpivot the diagnosis code

if object_id (''%schema_name%.proc_claims_diagnosis_code_10_2019_Risk'', ''U'') is not null
drop table %schema_name%.proc_claims_diagnosis_code_10_2019_Risk;

select 
	*
into %schema_name%.proc_claims_diagnosis_code_10_2019_Risk
from 
(
select
	bcbsa_plan_id,
	chp_carrier_id,
	pdr_product_id,
	chp_row_id,
	procedure_code,
	revenue_code,
	flag_exclude_diagnosis_code,
	member_id,
	claim_type,
	original_claim_number,
	claim_line_number,
	case when right(col,2) = ''de'' then 1 else replace(right(col,2),''_'','''') end as pos_diag_code,
	replace(value,''.'','''') as diagnosis_code
from
(select
	bcbsa_plan_id,
	chp_carrier_id,
	pdr_product_id,
	chp_row_id,
	procedure_code,
	revenue_code,
	flag_exclude_diagnosis_code,
	member_id,
	claim_type,
	original_claim_number,
	claim_line_number,
	primary_diagnosis_code,
	diagnosis_code_2,
	diagnosis_code_3,
	diagnosis_code_4,
	diagnosis_code_5,
	diagnosis_code_6,
	diagnosis_code_7,
	diagnosis_code_8,
	diagnosis_code_9
from %schema_name%.proc_claims_financial_10
where exclusion_flag = ''N''  
and exclude_medical_benefit_flag = ''N'') src
unpivot
(
value
for col in (primary_diagnosis_code, diagnosis_code_2, diagnosis_code_3, diagnosis_code_4, diagnosis_code_5, diagnosis_code_6, diagnosis_code_7, diagnosis_code_8, diagnosis_code_9)
) unpiv
) a
where (claim_type <> 3 and pos_diag_code <= 9 or claim_type = 3 and pos_diag_code <= 4)
and len(diagnosis_code) > 0


--2. select DISTINCT member_id and diagnosis_code


if object_id (''%schema_name%.proc_claims_diagnosis_code_20_2019_Risk'', ''U'') is not null
drop table %schema_name%.proc_claims_diagnosis_code_20_2019_Risk;

;with CDR_diagnosis_code as
(
select
	bcbsa_plan_id,
	chp_carrier_id,
	pdr_product_id,
	chp_row_id,
	procedure_code,
	revenue_code,
	flag_exclude_diagnosis_code,
	member_id,
	claim_type,
	original_claim_number,
	claim_line_number,
	pos_diag_code,
	diagnosis_code,
	case when row_number() over (partition by chp_carrier_id, pdr_product_id, member_id, diagnosis_code order by flag_exclude_diagnosis_code, pos_diag_code, chp_row_id) > 1 then ''Y'' else ''N'' end as flag_dup_mbr_diag_code 
from %schema_name%.proc_claims_diagnosis_code_10_2019_Risk)

select
	bcbsa_plan_id,
	chp_carrier_id,
	pdr_product_id,
	chp_row_id,
	procedure_code,
	revenue_code,
	flag_exclude_diagnosis_code,
	member_id,
	claim_type,
	original_claim_number,
	claim_line_number,
	pos_diag_code,
	diagnosis_code,
	flag_dup_mbr_diag_code
into %schema_name%.proc_claims_diagnosis_code_20_2019_Risk
from CDR_diagnosis_code 
where flag_dup_mbr_diag_code = ''N''

','%schema_name%',@schema_name)


exec sp_executesql @dynSQL







set @dynSQL = replace('
--4. Map Diagnosis Code to CCS Category
--assign CCS conditions at this step


if object_id (''%schema_name%.proc_claims_diagnosis_code_30_2019_Risk'', ''U'') is not null
drop table %schema_name%.proc_claims_diagnosis_code_30_2019_Risk;

select
	a.bcbsa_plan_id,
	a.chp_carrier_id,
	a.pdr_product_id,
	a.chp_row_id,
	a.procedure_code,
	a.revenue_code,
	a.flag_exclude_diagnosis_code,
	case when a.pos_diag_code > 3 then ''Y'' else a.flag_exclude_diagnosis_code end as flag_exclude_diagnosis_code_3dx,
	a.member_id,
	a.pos_diag_code,
	a.diagnosis_code as submitted_diagnosis_code,
	a.diagnosis_code,
	coalesce(c.ccs_category,''9999'') as ccs_category_code,
	case when c.icd_10_cm_code is not null then 1	                    --valid code that has a CCS mapping
	     when c.icd_10_cm_code is null then 20		                    --could not be mapped to valid diagnosis code
	     else 30 end as diagnosis_code_record_indicator
into %schema_name%.proc_claims_diagnosis_code_30_2019_Risk
from %schema_name%.proc_claims_diagnosis_code_20_2019_Risk a
left join
reference.ref_icd_10_cm_ccs_mapping_old c
on c.icd_10_cm_code = a.diagnosis_code
;


--5. RE-Rank to get distinct member_id and CCS conditions (also include remove potential duplicates from mapping invalid diagnosis codes in above step)


if object_id (''%schema_name%.proc_claims_diagnosis_code_40_2019_Risk'', ''U'') is not null
drop table %schema_name%.proc_claims_diagnosis_code_40_2019_Risk;

select
	--source_table,
	bcbsa_plan_id,
	chp_carrier_id,
	pdr_product_id,
	chp_row_id,
	procedure_code,
	revenue_code,
	flag_exclude_diagnosis_code,
	flag_exclude_diagnosis_code_3dx,
	member_id,
	pos_diag_code,
	submitted_diagnosis_code,
	diagnosis_code,
	ccs_category_code,
	diagnosis_code_record_indicator,
	case when row_number() over (partition by chp_carrier_id, pdr_product_id, member_id, ccs_category_code order by flag_exclude_diagnosis_code, diagnosis_code_record_indicator, pos_diag_code, diagnosis_code, chp_row_id) > 1 then ''Y'' else ''N'' end as flag_dup_member_condition,
	case when row_number() over (partition by chp_carrier_id, pdr_product_id, member_id, ccs_category_code order by flag_exclude_diagnosis_code_3dx, diagnosis_code_record_indicator, pos_diag_code, diagnosis_code, chp_row_id) > 1 then ''Y'' else ''N'' end as flag_dup_member_condition_3dx
into %schema_name%.proc_claims_diagnosis_code_40_2019_Risk	
from %schema_name%.proc_claims_diagnosis_code_30_2019_Risk;


','%schema_name%',@schema_name);

print (@dynsql)
exec sp_executesql @dynSQL




--create clustered columnstore index
if @p_create_CCI = 'Y'
begin
	select @indexName = name from sys.indexes where object_id = object_id(@schema_name + '.proc_claims_diagnosis_code_40_2019_Risk') and type_desc = 'CLUSTERED COLUMNSTORE'
	if @indexName is not null 
		begin 
		set @indexSQL = 'drop index ' + @indexName + ' on ' + @schema_name + '.proc_claims_diagnosis_code_40_2019_Risk' 
		exec sp_executesql @indexSQL 
		end

			
	set @indexSQL = 'create clustered columnstore index idx_' + @schema_name + 'proc_claims_diagnosis_code_40_2019_Risk on ' + @schema_name + '.proc_claims_diagnosis_code_40_2019_Risk with (MAXDOP = 4)'
	exec sp_executesql @indexSQL 
end


--drop intermediate table to cut space
set @dynSQL = replace('
drop table %schema_name%.proc_claims_diagnosis_code_10_2019_Risk
drop table %schema_name%.proc_claims_diagnosis_code_20_2019_Risk
drop table %schema_name%.proc_claims_diagnosis_code_30_2019_Risk
','%schema_name%',@schema_name)

exec sp_executesql @dynSQL



end/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/




GO
/****** Object:  StoredProcedure [dbo].[sp_base_6_process_membership]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_base_6_process_membership]
/*****************************************************************************
 Description: 
    Common process of processing membership 
	All common process happen in dbo (results refreshed when a plan product is run)


 Parameters:
    schema_name - the plan product to run

 Return:

 Notes:

 Change History:
	2015-10-19 SL - initial version
	2015-10-26 SL - source from views
	2015-10-28 SL - use a member gender ref table to clean up a few members' gender
	2015-10-29 SL - revise to also group members only with invalid diagnosis codes 
	                to Condition0000
	2015-11-02 SL - remove bcbsa_plan_id, causing Highmark a member has multiple attributes
	2015-11-30 SL - replace HOSTED zip code with HOME zip code for hosted member months
	2015-12-09 SL - add account paid to allowed ratio into membership data
	2015-12-14 SL - coalesce(paid_to_allowed_ratio_bracket,'>=91%') to handle >100% scenarios
	2015-12-17 SL - revise row_number() order by to make member attributes unique for equal months
	2016-01-27 SL - use allowed_amount_uds_pmpm for high_cost_claimant and paid_to_allowed_ratio_bracket
	2016-05-04 SL - modify null paid_to_allowed_ratio into bracket, keep as NULL in membership
	2016-05-06 SL - remove the HOME filter when populating member zip
	2016-07-13 SL - separate high claimant members AND employer Plan Benefit Value step into tables for analytics purposes
	2016-07-19 SL - coalesce(,'N') for high cost claimant, populate 'NA' for null paid to allowed ratio
	2016-07-26 SL - populate the group attribute for members based on availability of claims (to fix NA paid to allowed ratio in claims) 
	                and then number of months
					To populate members with NA paid to allowed ration in membership with the bracket of most members in the plan

	2017-05-12 SL - set up custom exclusions: Fully Insured, group exclusion
					standardize multiple group IDs
	2017-05-15 SL - implement to include Anthem internally hosted members
	2017-05-17 SL - implement to exclude COBRA members
	2017-06-07 Ankita - new logic for Fully insured group zip3 level
	CY2016
	2017-10-05 SL - modify proc_membership_attributes_10_bracket_mapped into view to automatically refreshed once the exclusion table 
	                  is modified, also separate this step to another SP
	                remove ConditionYYYY which were not that useful
	2017-10-11 SL - add account id to facilitate implement group exclusions
	2017-10-19 SL - logic becomes the final month for member attributes, use proc_membership_source_20_unique_mbr_attributes
	2018-02-13 SL - change paid_amount to adjusted_paid_amount in calculating AV, no impact for CY16 upload, but better for future consistency
	2018-10-10 SL - clean up the AV calculation before exclusion, per Lindsey only required in the final file submission which is after exclusion
	2021-07-12 TK - Removed line_of_business field as it's not used
	2021-07-12 TK - Added logic and new fields for member months per quarter based on UDS specs changes in CY2020
	2021-07-12 TK - Pulled in the newly created covid_related_indicator from the claims data into the traceability table per CY2020 Spec changes
	                
*****************************************************************************/
                                     @p_schema_name    varchar(50) = null

as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = '@p_schema_name'
	SET @Logging_Values = ISNULL(CAST(@p_schema_name AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/
begin


declare @schema_name varchar(100)
declare @dynSQL nvarchar(max)


set @schema_name = @p_schema_name




--1. Identify High Cost Claimant and Calculate Paid to Allowed Ratio


set @dynSQL = replace('
if object_id (''%schema_name%.proc_membership_high_claimant_members_00'', ''U'') is not null
drop table %schema_name%.proc_membership_high_claimant_members_00;

select
	chp_carrier_id,
	pdr_product_id,
	home_hosted_indicator,
	member_id,
	billed,
	allowed,
	paid,
	case when allowed > 200000 then ''Y'' else ''N'' end as high_cost_claimant
into %schema_name%.proc_membership_high_claimant_members_00
from
(select
	chp_carrier_id,
	pdr_product_id,
	home_hosted_indicator,
	member_id,
	sum(billed_amount) as billed,
	sum(allowed_amount_uds_pmpm) as allowed,
	sum(adjusted_paid_amount) as paid
from %schema_name%.proc_claims_financial_10
where exclusion_flag = ''N'' 
and exclude_medical_benefit_flag = ''N''
group by
	chp_carrier_id,
	pdr_product_id,
	home_hosted_indicator,
	member_id) a
','%schema_name%',@schema_name)

print (@dynsql)
exec sp_executesql @dynSQL




--2. Pull base membership data
--constraint: one member_id can only have one attributes (enrollment_months function as group by here ...)


set @dynSQL = replace('
if object_id (''%schema_name%.proc_membership_attributes_00'', ''U'') is not null
drop table %schema_name%.proc_membership_attributes_00;

select
	a.chp_carrier_id,
	a.pdr_product_id,
	a.member_id,
	b.home_hosted_indicator,
	b.zip3,
	coalesce(g.member_gender,''U'') as member_gender,
	b.member_age_max as member_age,
	coalesce(i.insurance_arrangement, ''U'') as insurance_arrangement,
	b.employer_id,
	b.account_id,
	b.group_id,
	b.subgroup,
	max(b.group_name) as group_name,
	sum(a.member_months) as enrollment_months,
	sum(case when a.year_month between ''2020-01'' and ''2020-03'' then a.member_months else 0 end)  as Member_Months_Q1,
	sum(case when a.year_month between ''2020-04'' and ''2020-06'' then a.member_months else 0 end)  as Member_Months_Q2,
	sum(case when a.year_month between ''2020-07'' and ''2020-09'' then a.member_months else 0 end)  as Member_Months_Q3,
    sum(case when a.year_month between ''2020-10'' and ''2020-12'' then a.member_months else 0 end)  as Member_Months_Q4
into %schema_name%.proc_membership_attributes_00
from %schema_name%.proc_membership_source_00 a
left join
%schema_name%.proc_membership_source_20_unique_mbr_attributes b
on b.member_id = a.member_id
left join
reference.ref_member_gender_standard g
on g.member_gender = b.member_gender
left join
reference.ref_mapping_member_insurance_arrangement i
on i.member_funding_arrangements = b.member_funding_arrangements
where a.exclusion_code is null
group by
	a.chp_carrier_id,
	a.pdr_product_id,
	a.member_id,
	b.home_hosted_indicator,
	b.zip3,
	b.line_of_business,
	coalesce(g.member_gender,''U''),
	b.member_age_max,
	coalesce(i.insurance_arrangement, ''U''),
	b.employer_id,
	b.account_id,
	b.group_id,
	b.subgroup
','%schema_name%',@schema_name)

print(@dynsql)
exec sp_executesql @dynSQL




--2. map to age_bracket, duration_bracket, add high_claimant_flag, map zip3




set @dynSQL = replace('
if object_id (''%schema_name%.proc_membership_attributes_06_bracket_mapped'', ''U'') is not null
drop table %schema_name%.proc_membership_attributes_06_bracket_mapped;

select
	a.chp_carrier_id,
	a.pdr_product_id,
	a.member_id,
	a.home_hosted_indicator,
	a.zip3 as zip3_before_mapped,
	coalesce(z.map_data_to_zip, a.zip3) as zip3,
	a.member_gender,
	a.member_age,
	AB.age_bracket,
	a.enrollment_months,
	a.Member_Months_Q1,
	a.Member_Months_Q2,
	a.Member_Months_Q3,
    a.Member_Months_Q4,
	DB.duration_bracket,
	coalesce(HC.high_cost_claimant, ''N'') as high_cost_claimant,
	a.insurance_arrangement,
	a.employer_id,
	a.account_id,        
	a.group_id,          
	a.subgroup,          
	a.group_name,
	coalesce(c.covid_related_indicator, ''NN'') as covid_related_indicator
into %schema_name%.proc_membership_attributes_06_bracket_mapped
from %schema_name%.proc_membership_attributes_00 a
left join
 reference.ref_age_bracket AB
on AB.member_age = a.member_age
left join
 reference.ref_duration_bracket DB
on DB.number_of_active_months = a.enrollment_months
left join
%schema_name%.proc_membership_high_claimant_members_00 HC
on HC.member_id = a.member_id
left join
reference.ref_mapping_zip3_due_to_low_population z
on z.map_data_from_zip = a.zip3
left join
(select distinct member_id, covid_related_indicator from %schema_name%.proc_claims_financial_10)c
on a.member_id=c.member_id




--create index to make sure one member could only have one attribute

IF EXISTS (SELECT name FROM sys.indexes
            WHERE name = N''IX_mbr_attributes_06'' and object_id = object_id(''%schema_name%.proc_membership_attributes_06_bracket_mapped'')) 
    DROP INDEX IX_mbr_attributes_06 ON %schema_name%.proc_membership_attributes_06_bracket_mapped; 

-- Create a clustered index 
CREATE UNIQUE CLUSTERED INDEX IX_mbr_attributes_06 
    ON %schema_name%.proc_membership_attributes_06_bracket_mapped (member_id);

','%schema_name%',@schema_name)

print(@dynsql)
exec sp_executesql @dynSQL







----drop intermediate table to cut space
set @dynSQL = replace('
drop table %schema_name%.proc_membership_attributes_00
','%schema_name%',@schema_name)
exec sp_executesql @dynSQL




end

/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/




GO
/****** Object:  StoredProcedure [dbo].[sp_base_7_process_member_CCS_Conditions_2019]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_base_7_process_member_CCS_Conditions_2019]
/*****************************************************************************
 Description: 
    Common process of processing membership 
	All common process happen in dbo (results refreshed when a plan product is run)


 Parameters:
    schema_name - the plan product to run

 Return:

 Notes:

 Change History:

	2017-10-10 SL - separate from [dbo].[sp_base_6_process_membership]	  
	2017-11-07 SL - revise the exclusion flags      
	
	2018-02-08 SL - remove the exclusion flags in intermediate tables, to make the code stable  
	                make proc_membership_ccs_conditions_20_member_risk_score a view, need to be in another SP
	2018-02-21 SL - move the risk score calculation at the member level to another SP - need to incorporate various risk factors
	CY2017
	2018-07-02 SL - add the Compound CCS step which is new in CY17
	                
*****************************************************************************/
                                     @p_schema_name    varchar(50) = null,
									 @p_create_CCI     varchar(1) = 'Y'
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = '@p_schema_name'
	SET @Logging_Values = ISNULL(CAST(@p_schema_name AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/
begin


declare @schema_name varchar(100),
	    @dynSQL nvarchar(max),
		@indexName varchar(255),
		@indexSQL nvarchar(max)



set @schema_name = @p_schema_name



set @dynSQL = replace('



--identify Compound CCS conditions

--this step identifies the potential Compound CCS conditions which are later added to the main table with diagnosis code and conditions (needs to be done in this way to facilitate plan certification on the detail data level with Compound CCS)



drop table if exists %schema_name%.proc_claims_diagnosis_code_45_Compound_CCS
;with distinct_mbr_condition as
(select 
	chp_carrier_id,
	pdr_product_id,
	member_id,
	ccs_category_code
from %schema_name%.proc_claims_diagnosis_code_40_2019_Risk
where flag_exclude_diagnosis_code = ''N''
and flag_dup_member_condition = ''N'') 
select
	m.*,
	f.compound_ccs_category
into %schema_name%.proc_claims_diagnosis_code_45_Compound_CCS
from
(select
	chp_carrier_id,
	pdr_product_id,
	member_id,
	main_ccs_category,
	main_condition_count,
	secondary_condition_count,
	case when main_condition_count = 0 then ''N'' else ''Y'' end as flag_main,
	case when secondary_condition_count = 0 then ''N'' else ''Y'' end as flag_secondary
from
(select 
	a.chp_carrier_id,
	a.pdr_product_id,
	a.member_id,
	b.main_ccs_category,
	sum(case when b.code_indicator = ''M'' then 1 else 0 end) as main_condition_count,
	sum(case when b.code_indicator = ''S'' then 1 else 0 end) as secondary_condition_count
from distinct_mbr_condition a
join
reference.ref_compound_CCS_mapping_step1 b
on b.ccs_category = a.ccs_category_code
group by
	a.chp_carrier_id,
	a.pdr_product_id,
	a.member_id,
	b.main_ccs_category) c
	) m
left join
reference.ref_compound_CCS_mapping_step2 f
on f.main_ccs_category = m.main_ccs_category
and f.flag_main = m.flag_main
and f.flag_secondary = m.flag_secondary


--add the Compound CCS conditions to main table with dx code and CCS

drop table if exists %schema_name%.proc_claims_diagnosis_code_50_with_Compound_CCS
select
	chp_carrier_id,
	pdr_product_id,
	chp_row_id,
	procedure_code,
	revenue_code,
	flag_exclude_diagnosis_code,
	member_id,
	pos_diag_code,
	submitted_diagnosis_code,
	diagnosis_code,
	ccs_category_code,
	flag_dup_member_condition,
	cast(''regular'' as varchar(25)) as condition_source
into %schema_name%.proc_claims_diagnosis_code_50_with_Compound_CCS
from %schema_name%.proc_claims_diagnosis_code_40_2019_Risk
union all
--Compound Conditions only
select 
	chp_carrier_id,
	pdr_product_id,
	null as chp_row_id,
	null as procedure_code,
	null as revenue_code,
	''N'' as flag_exclude_diagnosis_code,
	member_id,
	null as pos_diag_code,
	null as submitted_diagnosis_code,
	null as diagnosis_code,
	compound_ccs_category,
	''N'' as flag_dup_member_condition,
	cast(''compound'' as varchar(25)) as condition_source
from %schema_name%.proc_claims_diagnosis_code_45_Compound_CCS
where compound_ccs_category is not null



--3. get diagnosis from claims
--use member_id from membership left join with member and diagnosis code


if object_id (''%schema_name%.proc_membership_ccs_conditions_00_2019_Risk'', ''U'') is not null
drop table %schema_name%.proc_membership_ccs_conditions_00_2019_Risk;

;with members_w_clm_no_conditions as
(
select 
	member_id
from %schema_name%.proc_claims_diagnosis_code_50_with_Compound_CCS
group by
	member_id
having count(case when flag_exclude_diagnosis_code = ''Y'' or ccs_category_code = ''9999'' then null else ccs_category_code end) = 0
)

select
	case when d.member_id is null then ''ConditionXXXX''      --no eligible claims
	     when e.member_id is not null then ''Condition0000''  --member has eligible claims, but no condition mapped (due to diagnosis codes are all excluded OR only have invalid diagnosis codes that could not mapped to a CCS condition)
		 when d.flag_exclude_diagnosis_code = ''N'' then convert(varchar(25),concat(''Condition'', replicate(''0'', case when d.condition_source = ''compound'' then 6 else 4 end -len(d.ccs_category_code)), d.ccs_category_code)) --Condition9999 only exists when a member has invalid Conditions Mapped
		 when d.flag_exclude_diagnosis_code = ''Y'' then ''ConditionZZZZ''  --a member has conditions mapped from the excluded diagnosis codes
		 else null end as ccs_condition_type,
	a.chp_carrier_id,
	a.pdr_product_id,
	a.member_id,
	a.home_hosted_indicator,
	a.zip3,
	a.member_gender,
	a.member_age,
	a.age_bracket,
	a.employer_id,
	a.account_id,
	a.group_id,
	a.subgroup,
	a.group_name,
	a.insurance_arrangement,
	a.enrollment_months,
	a.duration_bracket,
	a.high_cost_claimant,
	d.chp_row_id,
	d.procedure_code,
	d.revenue_code,
	d.flag_exclude_diagnosis_code,
	d.member_id as member_id_w_eligible_clm,
	d.ccs_category_code,
	d.condition_source
into %schema_name%.proc_membership_ccs_conditions_00_2019_Risk
from 
%schema_name%.proc_membership_attributes_06_bracket_mapped a
left join
%schema_name%.proc_claims_diagnosis_code_50_with_Compound_CCS d
on d.chp_carrier_id = a.chp_carrier_id
and d.pdr_product_id = a.pdr_product_id
and d.member_id = a.member_id
and d.flag_dup_member_condition = ''N''
left join
members_w_clm_no_conditions e
on e.member_id = a.member_id;


--4. select distinct member and conditions and assign risk scores


drop table if exists %schema_name%.proc_membership_ccs_conditions_10_table_2019_Risk

select
	a.chp_carrier_id,
	a.pdr_product_id,
	a.ccs_condition_type,
	a.ccs_category_code,
	a.home_hosted_indicator,
	a.member_id,
	a.zip3,
	a.member_gender,
	a.member_age,
	a.age_bracket,
	a.enrollment_months,
	a.duration_bracket,
	a.high_cost_claimant,
	a.employer_id,
	a.account_id,
	a.group_id,
	a.subgroup,
	a.group_name,
	a.insurance_arrangement,
	a.condition_source,
	coalesce(RF_CCS.risk_factor,0) as risk_factor_ccs,
	RF_AG.risk_factor as risk_factor_age_gender
into %schema_name%.proc_membership_ccs_conditions_10_table_2019_Risk
from
(select distinct
	chp_carrier_id,
	pdr_product_id,
	ccs_condition_type,
	case when ccs_condition_type in (''Condition0000'', ''ConditionZZZZ'') then null else ccs_category_code end as ccs_category_code,
	member_id,
	zip3,
	home_hosted_indicator,
	member_gender,
	member_age,
	age_bracket,
	enrollment_months,
	duration_bracket,
	high_cost_claimant,
	employer_id,
	account_id,
	group_id,
	subgroup,
	group_name,
	insurance_arrangement,
	condition_source
from %schema_name%.proc_membership_ccs_conditions_00_2019_Risk) a
left join
 reference.ref_risk_factor_ccs RF_CCS
on RF_CCS.cond_code = a.ccs_category_code
and RF_CCS.duration_bracket = a.duration_bracket
left join
 reference.ref_risk_factor_age_gender_prev RF_AG
on RF_AG.age_bracket = a.age_bracket
and RF_AG.gender = a.member_gender
and RF_AG.duration_bracket = a.duration_bracket;

','%schema_name%',@schema_name)

exec sp_executesql @dynSQL




--create clustered columnstore index
if @p_create_CCI = 'Y'
begin
	select @indexName = name from sys.indexes where object_id = object_id(@schema_name + '.proc_membership_ccs_conditions_10_table_2019_Risk') and type_desc = 'CLUSTERED COLUMNSTORE'
	if @indexName is not null 
		begin 
		set @indexSQL = 'drop index ' + @indexName + ' on ' + @schema_name + '.proc_membership_ccs_conditions_10_table_2019_Risk' 
		exec sp_executesql @indexSQL 
		end

			
	set @indexSQL = 'create clustered columnstore index idx_' + @schema_name + 'proc_membership_ccs_conditions_10_table_2019_Risk on ' + @schema_name + '.proc_membership_ccs_conditions_10_table_2019_Risk with (MAXDOP = 4)'
	exec sp_executesql @indexSQL 
end


--drop intermediate table to cut space
set @dynSQL = replace('
drop table %schema_name%.proc_membership_ccs_conditions_00_2019_Risk
drop table %schema_name%.proc_claims_diagnosis_code_45_Compound_CCS
','%schema_name%',@schema_name)

exec sp_executesql @dynSQL




end

/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/




GO
/****** Object:  StoredProcedure [dbo].[sp_base_7_process_member_CCSR_Conditions]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_base_7_process_member_CCSR_Conditions]
/*****************************************************************************
 Description: 
    Common process of processing membership 
	All common process happen in dbo (results refreshed when a plan product is run)


 Parameters:
    schema_name - the plan product to run

 Return:

 Notes:

 Change History:

	2017-10-10 SL - separate from [dbo].[sp_base_6_process_membership]	  
	2017-11-07 SL - revise the exclusion flags      
	
	2018-02-08 SL - remove the exclusion flags in intermediate tables, to make the code stable  
	                make proc_membership_ccs_conditions_20_member_risk_score a view, need to be in another SP
	2018-02-21 SL - move the risk score calculation at the member level to another SP - need to incorporate various risk factors
	CY2017
	2018-07-02 SL - add the Compound CCS step which is new in CY17
	2021-07-06 TK - deleted code for Compound ccs mapping due to new CCSR mapping. 
	2021-07-06  TK - changed field names from ccs to ccsr
	2021-07-06  TK - Changed table name from proc_claims_diagnosis_code_50_with_Compound_CCS to proc_claims_diagnosis_code
	2021-08-12 TK - Changed the table names from ccs to CCSR
	                
*****************************************************************************/
                                     @p_schema_name    varchar(50) = null,
									 @p_create_CCI     varchar(1) = 'Y'
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = '@p_schema_name'
	SET @Logging_Values = ISNULL(CAST(@p_schema_name AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/
begin


declare @schema_name varchar(100),
	    @dynSQL nvarchar(max),
		@indexName varchar(255),
		@indexSQL nvarchar(max)



set @schema_name = @p_schema_name



set @dynSQL = replace('

--1)
drop table if exists %schema_name%.proc_claims_diagnosis_code_50
select
	chp_carrier_id,
	pdr_product_id,
	chp_row_id,
	procedure_code,
	revenue_code,
	flag_exclude_diagnosis_code,
	member_id,
	pos_diag_code,
	diagnosis_code,
	ccsr_category_code,
	flag_dup_member_condition
into %schema_name%.proc_claims_diagnosis_code_50
from %schema_name%.proc_claims_diagnosis_code_40



--2. get diagnosis from claims
--use member_id from membership left join with member and diagnosis code


if object_id (''%schema_name%.proc_membership_ccsr_conditions_00'', ''U'') is not null
drop table %schema_name%.proc_membership_ccsr_conditions_00;

;with members_w_clm_no_conditions as
(
select 
	member_id
from %schema_name%.proc_claims_diagnosis_code_50
group by
	member_id
having count(case when flag_exclude_diagnosis_code = ''Y'' or ccsr_category_code = ''9999'' then null else ccsr_category_code end) = 0
)

select
	case when d.member_id is null then ''ConditionXXXXXX''      --no eligible claims
	     when e.member_id is not null then ''Condition000000''  --member has eligible claims, but no condition mapped (due to diagnosis codes are all excluded OR only have invalid diagnosis codes that could not mapped to a CCS condition)
		 when d.flag_exclude_diagnosis_code = ''N'' then convert(varchar(25),concat(''Condition'', d.ccsr_category_code)) --Condition9999 only exists when a member has invalid Conditions Mapped
		 when d.flag_exclude_diagnosis_code = ''Y'' then ''ConditionZZZZZZ''  --a member has conditions mapped from the excluded diagnosis codes
		 else null end as ccsr_condition_type,
	a.chp_carrier_id,
	a.pdr_product_id,
	a.member_id,
	a.home_hosted_indicator,
	a.zip3,
	a.member_gender,
	a.member_age,
	a.age_bracket,
	a.employer_id,
	a.account_id,
	a.group_id,
	a.subgroup,
	a.group_name,
	a.insurance_arrangement,
	a.enrollment_months,
	a.Member_Months_Q1,
	a.Member_Months_Q2,
	a.Member_Months_Q3,
    a.Member_Months_Q4,
	a.covid_related_indicator,
	a.duration_bracket,
	a.high_cost_claimant,
	d.chp_row_id,
	d.procedure_code,
	d.revenue_code,
	d.flag_exclude_diagnosis_code,
	d.member_id as member_id_w_eligible_clm,
	d.ccsr_category_code
into %schema_name%.proc_membership_ccsr_conditions_00
from 
%schema_name%.proc_membership_attributes_06_bracket_mapped a
left join
%schema_name%.proc_claims_diagnosis_code_50 d
on d.chp_carrier_id = a.chp_carrier_id
and d.pdr_product_id = a.pdr_product_id
and d.member_id = a.member_id
and d.flag_dup_member_condition = ''N''
left join
members_w_clm_no_conditions e
on e.member_id = a.member_id;



--3. select distinct member and conditions and assign risk scores


drop table if exists %schema_name%.proc_membership_ccsr_conditions_10_table

select
	a.chp_carrier_id,
	a.pdr_product_id,
	a.ccsr_condition_type,
	a.ccsr_category_code,
	a.home_hosted_indicator,
	a.member_id,
	a.zip3,
	a.member_gender,
	a.member_age,
	a.age_bracket,
	a.enrollment_months,
	a.Member_Months_Q1,
	a.Member_Months_Q2,
	a.Member_Months_Q3,
    a.Member_Months_Q4,
	a.covid_related_indicator,
	a.duration_bracket,
	a.high_cost_claimant,
	a.employer_id,
	a.account_id,
	a.group_id,
	a.subgroup,
	a.group_name,
	a.insurance_arrangement,
	coalesce(RF_CCSR.risk_factor,0) as risk_factor_ccsr,
	RF_AG.risk_factor as risk_factor_age_gender
into %schema_name%.proc_membership_ccsr_conditions_10_table
from
(select distinct
	chp_carrier_id,
	pdr_product_id,
	ccsr_condition_type,
	case when ccsr_condition_type in (''Condition000000'', ''ConditionZZZZZZ'') then null else ccsr_category_code end as ccsr_category_code,
	member_id,
	zip3,
	home_hosted_indicator,
	member_gender,
	member_age,
	age_bracket,
	enrollment_months,
	Member_Months_Q1,
	Member_Months_Q2,
	Member_Months_Q3,
    Member_Months_Q4,
	covid_related_indicator,
	duration_bracket,
	high_cost_claimant,
	employer_id,
	account_id,
	group_id,
	subgroup,
	group_name,
	insurance_arrangement
from %schema_name%.proc_membership_ccsr_conditions_00) a
left join
reference.ref_risk_factor_ccsr RF_CCSR
on RF_CCSR.cond_code = a.ccsr_category_code
and RF_CCSR.duration_bracket = a.duration_bracket
left join
 reference.ref_risk_factor_age_gender RF_AG
on RF_AG.age_bracket = a.age_bracket
and RF_AG.gender = a.member_gender
and RF_AG.duration_bracket = a.duration_bracket;

','%schema_name%',@schema_name)

exec sp_executesql @dynSQL




--create clustered columnstore index
if @p_create_CCI = 'Y'
begin
	select @indexName = name from sys.indexes where object_id = object_id(@schema_name + '.proc_membership_ccsr_conditions_10_table') and type_desc = 'CLUSTERED COLUMNSTORE'
	if @indexName is not null 
		begin 
		set @indexSQL = 'drop index ' + @indexName + ' on ' + @schema_name + '.proc_membership_ccsr_conditions_10_table' 
		exec sp_executesql @indexSQL 
		end

			
	set @indexSQL = 'create clustered columnstore index idx_' + @schema_name + 'proc_membership_ccsr_conditions_10_table on ' + @schema_name + '.proc_membership_ccsr_conditions_10_table with (MAXDOP = 4)'
	exec sp_executesql @indexSQL 
end


--drop intermediate table to cut space
set @dynSQL = replace('
drop table %schema_name%.proc_membership_ccsr_conditions_00
','%schema_name%',@schema_name)

exec sp_executesql @dynSQL




end

/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/




GO
/****** Object:  StoredProcedure [dbo].[sp_base_75_process_member_risk_score]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_base_75_process_member_risk_score]
/*****************************************************************************
 Description: 
    To calculate the various risk scores based on different risk factors


 Parameters:
    schema_name - the plan product to run

 Return:

 Notes:

 Change History:

	2018-02-21 SL - initial version 
	                separate from [dbo].[sp_base_7_process_member_CCS_Conditions] 
					need to separate this step to minimize rerun of prior steps
	2018-07-03 SL - break down CCS risk score to Regular and Compound risk scores
   2021-07-07 TK - Deleted reference tables for Mercer and AOn including fields. We never get the current tables and these fields are not used
   2021-07-07 TK - Deleted field for condition source as it's no longer needed following the change to ccsr
   2021-07-09 TK - deleted AON, Mercer risk score tables becasue they are not used and the risk score tables are not obtained early enough to be used in the current upload
   20212-07-09   -Commented out UDS previous risk factors due to the change from CCS to CCSR but updated it for CY2021. 
   2021-07-09 TK- Added new fields for CCSR, changes risk_factor_ccs field to Risk_factor_ccsr, deleted any fields that referenced regular/compound ccs category
                     or condition source
  2021-08-12 TK - Changed the table names from ccs to CCSR

	             
**********************************************************************************************************************************************/
                                     @p_schema_name    varchar(50) = null
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = '@p_schema_name'
	SET @Logging_Values = ISNULL(CAST(@p_schema_name AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/
begin


declare @schema_name varchar(100),
	    @dynSQL nvarchar(max),
        @row_count int,
		@sql_temp nvarchar(max)


  declare cur_schema cursor local for
	select 
		schema_name
	from process.data_status_tracking
	  where include_in_uds_pmpm = 1
	  --and schema_name in (select schema_name from process.control_run)
	  and schema_name = isnull(@p_schema_name, schema_name)
	  order by case when chp_carrier_id in (895, 881, 885, 887) then 9999 else chp_carrier_id end



  open cur_schema
  fetch next from cur_schema into @schema_name

  while ( @@FETCH_STATUS = 0 )
    begin




--adds in the prev risk score, aon current and previous risk score

set @dynSQL = replace('
create view %schema_name%.vw_proc_membership_ccsr_conditions_10_various_risk_factors as
select
	a.chp_carrier_id,
	a.pdr_product_id,
	a.ccsr_condition_type,
	a.ccsr_category_code,
	a.home_hosted_indicator,
	a.member_id,
	a.zip3,
	a.member_gender,
	a.member_age,
	a.age_bracket,
	a.enrollment_months,
	a.Member_Months_Q1,
	a.Member_Months_Q2,
	a.Member_Months_Q3,
    a.Member_Months_Q4,
	a.covid_related_indicator,
	a.duration_bracket,
	a.high_cost_claimant,
	a.employer_id,
	a.account_id,
	a.group_id,
	a.subgroup,
	a.group_name,
	a.insurance_arrangement,
	a.risk_factor_ccsr,
	a.risk_factor_age_gender
--,coalesce(RF_CCSR_UDS_Prev.risk_factor,0) as risk_factor_ccsr_UDS_Prev,
--RF_AG_UDS_Prev.risk_factor as risk_factor_age_gender_UDS_Prev


from %schema_name%.proc_membership_ccsr_conditions_10_table a

----UDS risk factors Prior 
--left join
-- reference.ref_risk_factor_ccsr_UDS_Prev RF_CCSR_UDS_Prev
--on RF_CCSR_UDS_Prev.cond_code = a.ccsr_category_code
--and RF_CCSR_UDS_Prev.duration_bracket = a.duration_bracket
--left join
--reference.ref_risk_factor_age_gender_UDS_Prev RF_AG_UDS_Prev
--on RF_AG_UDS_Prev.age_bracket = a.age_bracket
--and RF_AG_UDS_Prev.gender = a.member_gender
--and RF_AG_UDS_Prev.duration_bracket = a.duration_bracket


','%schema_name%',@schema_name)



      if exists (select * from INFORMATION_SCHEMA.VIEWS where TABLE_SCHEMA = @schema_name and TABLE_NAME = 'vw_proc_membership_ccsr_conditions_10_various_risk_factors')
	    begin
		  set @sql_temp = 'drop view ' + @schema_name + '.vw_proc_membership_ccsr_conditions_10_various_risk_factors'
          exec (@sql_temp) 
        end


exec sp_executesql @dynSQL





--5. calculate risk score on member level

set @dynSQL = replace('
if object_id (''%schema_name%.proc_membership_ccsr_conditions_20_member_risk_score_table'', ''U'') is not null
drop table %schema_name%.proc_membership_ccsr_conditions_20_member_risk_score_table

select
	chp_carrier_id,
	pdr_product_id,
	zip3,
	home_hosted_indicator,
	a.member_id,
	member_gender,
	age_bracket,
	duration_bracket,
	high_cost_claimant,
	employer_id,
	account_id,
	group_id,
	subgroup,
	group_name,
	insurance_arrangement,
	enrollment_months,
	Member_Months_Q1,
	Member_Months_Q2,
	Member_Months_Q3,
    Member_Months_Q4,
	covid_related_indicator,
	risk_factor_ccsr,
	risk_factor_age_gender,
	risk_factor_ccsr + risk_factor_age_gender as risk_factor_tot
	--,risk_factor_ccsr_UDS_Prev + risk_factor_age_gender_UDS_Prev as risk_factor_ccsr_UDS_Prev
into %schema_name%.proc_membership_ccsr_conditions_20_member_risk_score_table
from %schema_name%.proc_membership_attributes_06_bracket_mapped a
left join
(select
	member_id,
	sum(risk_factor_ccsr) as risk_factor_ccsr,
	max(risk_factor_age_gender) as risk_factor_age_gender
	--sum(risk_factor_ccsr_UDS_Prev) as risk_factor_ccsr_UDS_Prev,
	--max(risk_factor_age_gender_UDS_Prev) as risk_factor_age_gender_UDS_Prev
from %schema_name%.vw_proc_membership_ccsr_conditions_10_various_risk_factors
group by
	member_id) r
on r.member_id = a.member_id;


','%schema_name%',@schema_name)

exec sp_executesql @dynSQL




	  fetch next from cur_schema into @schema_name

    end

  close cur_schema
  deallocate cur_schema


end

/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/




GO
/****** Object:  StoredProcedure [dbo].[sp_base_75_process_member_risk_score_2019]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_base_75_process_member_risk_score_2019]
/*****************************************************************************
 Description: 
    To calculate the various risk scores based on different risk factors


 Parameters:
    schema_name - the plan product to run

 Return:

 Notes:

 Change History:

	2018-02-21 SL - initial version 
	                separate from [dbo].[sp_base_7_process_member_CCS_Conditions] 
					need to separate this step to minimize rerun of prior steps
	2018-07-03 SL - break down CCS risk score to Regular and Compound risk scores
	             
*****************************************************************************/
                                     @p_schema_name    varchar(50) = null
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = '@p_schema_name'
	SET @Logging_Values = ISNULL(CAST(@p_schema_name AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/
begin


declare @schema_name varchar(100),
	    @dynSQL nvarchar(max),
        @row_count int,
		@sql_temp nvarchar(max)


  declare cur_schema cursor local for
	select 
		schema_name
	from process.data_status_tracking
	  where include_in_uds_pmpm = 1
	  and schema_name = isnull(@p_schema_name, schema_name)
	  order by case when chp_carrier_id in (895, 881, 885, 887) then 9999 else chp_carrier_id end



  open cur_schema
  fetch next from cur_schema into @schema_name

  while ( @@FETCH_STATUS = 0 )
    begin


--5. calculate risk score on member level

set @dynSQL = replace('
if object_id (''%schema_name%.proc_membership_ccs_conditions_20_member_risk_score_table_2019_Risk'', ''U'') is not null
drop table %schema_name%.proc_membership_ccs_conditions_20_member_risk_score_table_2019_Risk

select
	chp_carrier_id,
	pdr_product_id,
	zip3,
	home_hosted_indicator,
	a.member_id,
	member_gender,
	age_bracket,
	duration_bracket,
	high_cost_claimant,
	employer_id,
	account_id,
	group_id,
	subgroup,
	group_name,
	insurance_arrangement,
	enrollment_months,
	risk_factor_ccs as risk_factor_ccs_prev,
	risk_factor_ccs_regular,
	risk_factor_ccs_compound,
	risk_factor_age_gender as risk_factor_age_gender_prev,
	risk_factor_ccs + risk_factor_age_gender as risk_factor_tot_prev
into %schema_name%.proc_membership_ccs_conditions_20_member_risk_score_table_2019_Risk
from %schema_name%.proc_membership_attributes_06_bracket_mapped a
left join
(select
	member_id,
	sum(risk_factor_ccs) as risk_factor_ccs,
	sum(case when condition_source = ''regular'' then risk_factor_ccs else 0 end) as risk_factor_ccs_regular,
	sum(case when condition_source = ''compound'' then risk_factor_ccs else 0 end) as risk_factor_ccs_compound,
	max(risk_factor_age_gender) as risk_factor_age_gender
from %schema_name%.proc_membership_ccs_conditions_10_table_2019_Risk
group by
	member_id) r
on r.member_id = a.member_id;


','%schema_name%',@schema_name)

exec sp_executesql @dynSQL




	  fetch next from cur_schema into @schema_name

    end

  close cur_schema
  deallocate cur_schema


end

/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/




GO
/****** Object:  StoredProcedure [dbo].[sp_base_8_process_exclusion_on_members]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_base_8_process_exclusion_on_members]
/*****************************************************************************
 Description: 
    Common process of processing claims with financial data
	All common process happen in dbo (results refreshed when a plan product is run)


 Parameters:
    schema_name - the plan product to run

 Return:

 Notes:

 Change History:
	CY2016
	2017-10-11 SL - initial version
	                get separated from [dbo].[sp_base_9_process_membership]
					modify proc_membership_attributes_10_bracket_mapped into view to automatically refreshed once the exclusion table 
	                  is modified, also separate this step to another SP
	2017-10-23 SL - add logic to calculate again the AV after exclusions and populate this number for the data submission
	2017-11-07 SL - rename some flag names and add more data elements to the PMPM Fully Insured exclusion table
	2017-11-21 SL - streamline the COBRA member exclusion process
	2018-02-08 SL - remove the COBRA exclusion
	                remove the never-implemented logic for Anthem hosted data - may not be the best place to implement
	2018-02-13 SL - add Arrangement/Group Size Indicator
	2018-10-10 SL - remove the AV calculation, this is just for the base process
    2018-07-15 TK- Per Lindsey, editied the fully insured exclusion rue. See cy17 code for previous rule
	2021-07-09 TK - Added new zip exclusion per CY2020 UDS specs

*****************************************************************************/
											@p_schema_name    varchar(50) = null
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = '@p_schema_name'
	SET @Logging_Values = ISNULL(CAST(@p_schema_name AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/
begin


declare 
	@schema_name varchar(50), 
	@dynSQL nvarchar(max),
	@sql_temp nvarchar(max),
	@row_count int

set @schema_name = @p_schema_name








--2017-05-15 add a step to apply the exclusions
--reference table driven approach to implement exclusion/inclusion



--2017-10-11 SL modify proc_membership_attributes_10_bracket_mapped into views so that this get automatically refreshed when exclusion tables are updated


set @dynSQL = replace('
create view %schema_name%.vw_proc_membership_attributes_10_bracket_mapped as
select
	a.chp_carrier_id,
	a.pdr_product_id,
	a.member_id,
	a.home_hosted_indicator,
	a.zip3_before_mapped,
	a.zip3,
	a.member_gender,
	a.member_age,
	a.age_bracket,
	a.enrollment_months,
	a.Member_Months_Q1,
	a.Member_Months_Q2,
	a.Member_Months_Q3,
	a.Member_Months_Q4,
	a.duration_bracket,
	a.high_cost_claimant,
	a.insurance_arrangement,
	a.employer_id,
	a.account_id,
	a.group_id,
	a.subgroup,
	a.group_name,
	a.covid_related_indicator,
	case when coalesce(g1.group_account_id, g2.group_account_id) is not null then ''Y'' else ''N'' end as flag_exclude_groups,
	coalesce(g1.field_type, g2.field_type) as match_ID_type_when_excl_groups,
	coalesce(g1.[exclusion_category], g2.[exclusion_category]) as exclusion_reason,
	case when a.insurance_arrangement = ''F'' and f.flag_exclude_FI = ''Y'' or a.insurance_arrangement = ''U'' then ''Y'' 
	     else ''N'' end as flag_exclude_Fully_Insured,
	case when coalesce(g1.group_account_id, g2.group_account_id) is not null then ''Y''
		 when a.insurance_arrangement = ''F'' and f.flag_exclude_FI = ''Y'' or a.insurance_arrangement = ''U'' then ''Y''
		 when z.zip3 is not null then ''Y'' else ''N'' end as uds_pmpm_exclusion_flag,
	case when z.zip3 is not null then ''Y'' else ''N'' end as zip_exclusion_flag
from %schema_name%.proc_membership_attributes_06_bracket_mapped a

--implement employer group exclusion based on various IDs
left join                              
reference.Exclusion_by_groups_Standard_and_Custom g1
on g1.chp_carrier_id = a.chp_carrier_id
and SUBSTRING(a.[account_id], PATINDEX(''%[^0 ]%'', a.[account_id] + '' ''), LEN(a.[account_id]))=SUBSTRING(g1.group_account_id , PATINDEX(''%[^0 ]%'', g1.group_account_id  + '' ''), LEN(g1.group_account_id )) ---added so that join will occur even if leading zero is missing in reference table
and g1.field_type = ''Account ID''

left join                              
reference.Exclusion_by_groups_Standard_and_Custom g2
on g2.chp_carrier_id = a.chp_carrier_id
	and SUBSTRING(a.[group_id], PATINDEX(''%[^0 ]%'', a.[group_id] + '' ''), LEN(a.[group_id]))=SUBSTRING(g2.group_account_id , PATINDEX(''%[^0 ]%'', g2.group_account_id  + '' ''), LEN(g2.group_account_id )) ---added so that join will occur even if leading zero is missing in reference table
and g2.field_type = ''Group ID''

left join                                                 
reference.ref_custom_exclusion_Fully_Insured_PMPM f    --exclude Fully Insured for PMPM
on f.chp_carrier_id = a.chp_carrier_id
and f.pdr_product_id = a.pdr_product_id
and f.zip3 = a.zip3

left join
[reference].[Exclusion zips] z    --new zip exclusion per CY2020 UDS specs
on z.zip3=a.zip3

','%schema_name%',@schema_name)



      if exists (select * from INFORMATION_SCHEMA.VIEWS where TABLE_SCHEMA = @schema_name and TABLE_NAME = 'vw_proc_membership_attributes_10_bracket_mapped')
	    begin
		  set @sql_temp = 'drop view ' + @schema_name + '.vw_proc_membership_attributes_10_bracket_mapped'
          exec (@sql_temp) 
        end


exec sp_executesql @dynSQL



/*
If excluding Fully Insured member months make the zip code non-credible (20,000 as the credibility thredshold)
Then include Fully Insured, Otherwise exclude Fully Insured

Unknown Funding Arrangement is also excluded

*/

DELETE FROM reference.ref_custom_exclusion_Fully_Insured_PMPM
	OUTPUT deleted.* INTO reference.ref_custom_exclusion_Fully_Insured_PMPM_DELETED
where 'p'+chp_carrier_id+'_'+pdr_product_id  = @schema_name



set @dynSQL = replace('
insert into reference.ref_custom_exclusion_Fully_Insured_PMPM with (tablock)
select 
	chp_carrier_id,
	pdr_product_id,
	zip3, 
	self_insured_months,
	unknown_insured_months,
	fully_insured_months,
	total_months_b4_excluding_FI,
	case when self_insured_months >= 20000 then ''Y''  --when self-insured is greater than 20000 mm then we exclude fi. Change in methodology by Lindsey for updload cy2018
		else ''N'' end as flag_exclude_FI,
	getdate() as update_time
from 
(select 
	chp_carrier_id,
	pdr_product_id,
	zip3, 
	sum(case when insurance_arrangement = ''S'' then enrollment_months else 0 end) as self_insured_months, 
	sum(case when insurance_arrangement = ''U'' then enrollment_months else 0 end) as unknown_insured_months,
	sum(case when insurance_arrangement = ''F'' then enrollment_months else 0 end) as fully_insured_months,
	sum(enrollment_months) total_months_b4_excluding_FI
from %schema_name%.vw_proc_membership_attributes_10_bracket_mapped
where flag_exclude_groups = ''N'' 
and home_hosted_indicator = ''HOME''
group by 
	chp_carrier_id,
	pdr_product_id,
	zip3) a
','%schema_name%',@schema_name)


exec sp_executesql @dynSQL



--2018-02-08 materialize the view into table since it will be read many times downstream


set @dynSQL = replace('
if object_id (''%schema_name%.proc_membership_attributes_10_bracket_mapped'', ''U'') is not null
drop table %schema_name%.proc_membership_attributes_10_bracket_mapped;

select 
	a.chp_carrier_id,
	a.pdr_product_id,
	a.member_id,
	a.home_hosted_indicator,
	a.zip3_before_mapped,
	a.zip3,
	a.member_gender,
	a.member_age,
	a.age_bracket,
	a.enrollment_months,
	a.Member_Months_Q1,
	a.Member_Months_Q2,
	a.Member_Months_Q3,
	a.Member_Months_Q4,
	a.duration_bracket,
	a.high_cost_claimant,
	a.insurance_arrangement,
	a.employer_id,
	a.account_id,
	a.group_id,
	a.subgroup,
	a.group_name,
	a.covid_related_indicator,
	a.flag_exclude_groups,
	a.match_ID_type_when_excl_groups,
	a.exclusion_reason,
	a.flag_exclude_Fully_Insured,
	a.uds_pmpm_exclusion_flag,
	a.zip_exclusion_flag
into %schema_name%.proc_membership_attributes_10_bracket_mapped 
from %schema_name%.vw_proc_membership_attributes_10_bracket_mapped a




--create index to make sure one member could only have one attribute

IF EXISTS (SELECT name FROM sys.indexes
            WHERE name = N''IX_mbr_attributes_10'' and object_id = object_id(''%schema_name%.proc_membership_attributes_10_bracket_mapped'')) 
    DROP INDEX IX_mbr_attributes_10 ON %schema_name%.proc_membership_attributes_10_bracket_mapped; 

-- Create a clustered index 
CREATE UNIQUE CLUSTERED INDEX IX_mbr_attributes_10 
    ON %schema_name%.proc_membership_attributes_10_bracket_mapped (member_id);

','%schema_name%',@schema_name)

exec sp_executesql @dynSQL




end/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/




GO
/****** Object:  StoredProcedure [dbo].[sp_base_8_UDS_process_exclusion_on_members_final]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_base_8_UDS_process_exclusion_on_members_final]
/*****************************************************************************
 Description: 
    Common process of processing claims with financial data
	All common process happen in dbo (results refreshed when a plan product is run)


 Parameters:
    schema_name - the plan product to run

 Return:

 Notes:

 Change History:
	CY2016
	2017-10-11 SL - initial version
	                get separated from [dbo].[sp_base_9_process_membership]
					modify proc_membership_attributes_10_bracket_mapped into view to automatically refreshed once the exclusion table 
	                  is modified, also separate this step to another SP
	2017-10-23 SL - add logic to calculate again the AV after exclusions and populate this number for the data submission
	2017-11-07 SL - rename some flag names and add more data elements to the PMPM Fully Insured exclusion table
	2017-11-21 SL - streamline the COBRA member exclusion process
	2018-02-08 SL - remove the COBRA exclusion
	                remove the never-implemented logic for Anthem hosted data - may not be the best place to implement
	2018-02-13 SL - add Arrangement/Group Size Indicator
	2018-10-10 SL - this is for the final file submission based on the final rule of FI exclusion
	                add cursor to loop
	2018-10-18 SL - pull out the Anthem host data
	2019-09-27 TK--Cleaned up the code to remove the way it was set up to pull out the anthem hosted data. 
	               The code still creates the data without the anthem hosted but w/o duplicated flags or tables
	2020-05-25 TK -- changed code to add in paid_to_allowed_ratio_bracket_ic and paid_to_allowed_ratio_bracket_all. Changed to capture actuall allowd and actual paid  per change in CY19 uds specs
	2020-02-25 TK-- Minor code change to flagging the exclusion groups based on the changes made to the field names in the new custom exclusion group table
    2021-08-11 TK -- Removed line_of_businees field. Added in new fields such as the covid indicator, enrollement by quater and zip exclusion 
*****************************************************************************/
											@p_schema_name    varchar(50) = null
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = '@p_schema_name'
	SET @Logging_Values = ISNULL(CAST(@p_schema_name AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/
begin


declare 
	@schema_name varchar(50), 
	@dynSQL nvarchar(max),
	@sql_temp nvarchar(max)




  declare cur_schema cursor local for
	select 
		schema_name
	from process.data_status_tracking
	  where include_in_uds_pmpm = 1
	  and schema_name = isnull(@p_schema_name, schema_name)
	  order by case when chp_carrier_id in (895, 881, 885, 887) then 9999 else chp_carrier_id end



  open cur_schema
  fetch next from cur_schema into @schema_name

  while ( @@FETCH_STATUS = 0 )
    begin



--create the table shell for the view

set @dynSQL = replace('
if object_id (''%schema_name%.proc_membership_employer_plan_benefit_value_00_after_exclusion'', ''U'') is not null
drop table %schema_name%.proc_membership_employer_plan_benefit_value_00_after_exclusion;

select *
into %schema_name%.proc_membership_employer_plan_benefit_value_00_after_exclusion
 from process.proc_membership_employer_plan_benefit_value_00_after_exclusion_shell 

','%schema_name%',@schema_name)

exec sp_executesql @dynSQL




--2017-05-15 add a step to apply the exclusions
--reference table driven approach to implement exclusion/inclusion



--2017-10-11 SL modify proc_membership_attributes_10_bracket_mapped into views so that this get automatically refreshed when exclusion tables are updated


set @dynSQL = replace('
create view %schema_name%.vw_proc_membership_attributes_10_bracket_mapped as
select
	a.chp_carrier_id,
	a.pdr_product_id,
	a.member_id,
	a.home_hosted_indicator,
	a.zip3_before_mapped,
	a.zip3,
	a.member_gender,
	a.member_age,
	a.age_bracket,
	a.enrollment_months,
	a.Member_Months_Q1,
	a.Member_Months_Q2,
	a.Member_Months_Q3,
	a.Member_Months_Q4,
	a.duration_bracket,
	a.high_cost_claimant,
	a.insurance_arrangement,
	a.employer_id,
	a.account_id,
	a.group_id,
	a.subgroup,
	a.group_name,
	a.covid_related_indicator,
	f.host_chp_carrier_id,   --2019-10-11 only populated for Anthem hosted data (CO & NV) and GAP data
	f.host_pdr_product_id,
	AV.paid_to_allowed_ratio_IC,
	AV.paid_to_allowed_ratio_ALL,
	case when coalesce(g1.group_account_id, g2.group_account_id) is null and f.flag_exclude_FI = ''N'' and AV.paid_to_allowed_ratio_bracket_all is null then ''85-89.99''   --for the non-excluded members, if no claims, back fill with most prevalent brakcet
	     else AV.paid_to_allowed_ratio_bracket_all end as paid_to_allowed_ratio_bracket_all,  --2018-10-12 this is only populated for the non-excluded members
	case when coalesce(g1.group_account_id, g2.group_account_id) is null and f.flag_exclude_FI = ''N'' and AV.paid_to_allowed_ratio_bracket_ic is null then ''85-89.99''   --check this after running for CY2019
	     else AV.paid_to_allowed_ratio_bracket_ic end as paid_to_allowed_ratio_bracket_ic, 
	case when coalesce(g1.group_account_id, g2.group_account_id) is not null then ''Y'' else ''N'' end as flag_exclude_groups,
	coalesce(g1.field_type, g2.field_type) as match_ID_type_when_excl_groups,
	coalesce(g1.[exclusion_category], g2.[exclusion_category]) as exclusion_reason,
	f.flag_exclude_FI as flag_exclude_Fully_Insured,
	case when z.zip3 is not null then ''Y'' else ''N'' end as zip_exclusion_flag,
    case when coalesce(g1.group_account_id, g2.group_account_id) is not null then ''Y''
		 when z.zip3 is not null then ''Y'' else f.flag_exclude_FI end as uds_pmpm_exclusion_flag
from %schema_name%.proc_membership_attributes_06_bracket_mapped a

left join                              
reference.Exclusion_by_groups_Standard_and_Custom g1
on g1.chp_carrier_id = a.chp_carrier_id
and SUBSTRING(a.[account_id], PATINDEX(''%[^0 ]%'', a.[account_id] + '' ''), LEN(a.[account_id]))=SUBSTRING(g1.group_account_id , PATINDEX(''%[^0 ]%'', g1.group_account_id  + '' ''), LEN(g1.group_account_id )) 
and g1.field_type = ''Account ID''

left join                              
reference.Exclusion_by_groups_Standard_and_Custom g2
on g2.chp_carrier_id = a.chp_carrier_id
and SUBSTRING(a.[group_id], PATINDEX(''%[^0 ]%'', a.[group_id] + '' ''), LEN(a.[group_id]))=SUBSTRING(g2.group_account_id , PATINDEX(''%[^0 ]%'', g2.group_account_id  + '' ''), LEN(g2.group_account_id ))
and g2.field_type = ''Group ID''

left join 
reference.ref_Fully_Insured_Final_Rules f     
on f.chp_carrier_id = a.chp_carrier_id
and f.pdr_product_id = a.pdr_product_id
and f.zip3 = a.zip3
and f.home_hosted_indicator = a.home_hosted_indicator
and f.insurance_arrangement = a.insurance_arrangement

---Populate flag for new UDS zip exclusion
left join
[reference].[Exclusion zips] z    --new zip exclusion per CY2020 UDS specs
on z.zip3=a.zip3

--populate the paid to allowed ratio after exclusion for extract
left join
%schema_name%.proc_membership_employer_plan_benefit_value_00_after_exclusion AV           --2017-10-23 Acturial Value after the exclusions
on AV.employer_id = a.employer_id



','%schema_name%',@schema_name)




      if exists (select * from INFORMATION_SCHEMA.VIEWS where TABLE_SCHEMA = @schema_name and TABLE_NAME = 'vw_proc_membership_attributes_10_bracket_mapped')
	    begin
		  set @sql_temp = 'drop view ' + @schema_name + '.vw_proc_membership_attributes_10_bracket_mapped'
          exec (@sql_temp) 
        end


exec sp_executesql @dynSQL




--2017-10-23 calculate Paid to Allowed Ratio after exclusions


set @dynSQL = replace('
truncate table %schema_name%.proc_membership_employer_plan_benefit_value_00_after_exclusion

insert into %schema_name%.proc_membership_employer_plan_benefit_value_00_after_exclusion with (tablock)
select
	chp_carrier_id,
	pdr_product_id,
	null as home_hosted_indicator,
	employer_id,
	group_name,
	cnt_mbr_w_clm,
	billed,
	allowed,
	paid,
	paid_to_allowed_ratio_ic,
	paid_to_allowed_ratio_all,
	case when paid_to_allowed_ratio_ic > 1 then ''95+''
	     when paid_to_allowed_ratio_ic is null then ''NA''
		 else (select paid_to_allowed_ratio_bucket from reference.ref_paid_to_allowed_ratio   
		      where paid_to_allowed_ratio_ic between lower_bound and upper_bound) end as paid_to_allowed_ratio_bracket_ic, 
	case when paid_to_allowed_ratio_all > 1 then ''95+''
	     when paid_to_allowed_ratio_all is null then ''NA''
		 else (select paid_to_allowed_ratio_bucket from reference.ref_paid_to_allowed_ratio   
  		       where paid_to_allowed_ratio_all between lower_bound and upper_bound) end as paid_to_allowed_ratio_bracket_all  

from
(select 
   chp_carrier_id,
	pdr_product_id,
	employer_id,
	group_name,
	cnt_mbr_w_clm,
	billed,
    allowed,
	paid,
	case when allowed= 0 then 0
	     else cast(paid/allowed as decimal(20,4)) end as paid_to_allowed_ratio_ALL,
	case when allowed_ic= 0 then 0
	     else cast(paid_ic/allowed_ic as decimal(20,4)) end as paid_to_allowed_ratio_ic


from
(select
	chp_carrier_id,
	pdr_product_id,      
	employer_id,
	max(group_name) as group_name,
	count(distinct member_id) as cnt_mbr_w_clm,
	sum(case when benefit_payment_contract_status=''ic'' then billed_amount end) as billed_ic,
    sum(case when benefit_payment_contract_status=''ic'' then allowed_amount end) as allowed_ic,
    sum(case when benefit_payment_contract_status=''ic'' then paid_amount end) as paid_ic,
	sum(billed_amount) as billed,
	sum(allowed_amount) as allowed,
	sum(paid_amount) as paid
from %schema_name%.proc_claims_financial_10 a
where exclusion_flag = ''N''
and exclude_medical_benefit_flag = ''N''
and home_hosted_indicator=''home'' 
and not exists (select * from %schema_name%.proc_membership_high_claimant_members_00 
where member_id = a.member_id
and high_cost_claimant = ''Y'')   --exclude high claimant in calculation of paid to allowed ratio
and exists (select * from %schema_name%.vw_proc_membership_attributes_10_bracket_mapped     
where member_id = a.member_id and uds_pmpm_exclusion_flag = ''N'')   --2018-10-10 limit to the members that are submitted 
group by
	chp_carrier_id,
	pdr_product_id,
	employer_id) a

)b

','%schema_name%',@schema_name)

exec sp_executesql @dynSQL



--2018-02-08 materialize the view into table since it will be read many times downstream


set @dynSQL = replace('
if object_id (''%schema_name%.proc_membership_attributes_10_bracket_mapped'', ''U'') is not null
drop table %schema_name%.proc_membership_attributes_10_bracket_mapped;

select 
	a.chp_carrier_id,
	a.pdr_product_id,
	a.member_id,
	a.home_hosted_indicator,
	a.zip3_before_mapped,
	a.zip3,
	a.member_gender,
	a.member_age,
	a.age_bracket,
	a.enrollment_months,
	a.Member_Months_Q1,
	a.Member_Months_Q2,
	a.Member_Months_Q3,
	a.Member_Months_Q4,
	a.duration_bracket,
	a.high_cost_claimant,
	a.insurance_arrangement,
	b.employer_group_size,   
	a.employer_id,
	a.account_id,
	a.group_id,
	a.subgroup,
	a.group_name,
	a.host_chp_carrier_id,
	a.host_pdr_product_id,
	a.paid_to_allowed_ratio_ic,
	a.paid_to_allowed_ratio_all,
	a.paid_to_allowed_ratio_bracket_ic,
	a.paid_to_allowed_ratio_bracket_all,
	a.covid_related_indicator,
	a.flag_exclude_groups,
	a.match_ID_type_when_excl_groups,
	a.exclusion_reason,
	a.flag_exclude_Fully_Insured,
	a.zip_exclusion_flag,
	a.uds_pmpm_exclusion_flag
into %schema_name%.proc_membership_attributes_10_bracket_mapped 
from %schema_name%.vw_proc_membership_attributes_10_bracket_mapped a
left join
Reference.employer_group_size_indicator_calculated_all_products b
on b.chp_carrier_id = a.chp_carrier_id
and b.pdr_product_id=a.pdr_product_id
and b.[Group ID] = a.employer_id



--create index to make sure one member could only have one attribute

IF EXISTS (SELECT name FROM sys.indexes
            WHERE name = N''IX_mbr_attributes_10'' and object_id = object_id(''%schema_name%.proc_membership_attributes_10_bracket_mapped'')) 
    DROP INDEX IX_mbr_attributes_10 ON %schema_name%.proc_membership_attributes_10_bracket_mapped; 

-- Create a clustered index 
CREATE UNIQUE CLUSTERED INDEX IX_mbr_attributes_10 
    ON %schema_name%.proc_membership_attributes_10_bracket_mapped (member_id);

','%schema_name%',@schema_name)

exec sp_executesql @dynSQL


	  fetch next from cur_schema into @schema_name

    end

  close cur_schema
  deallocate cur_schema



end/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/




GO
/****** Object:  StoredProcedure [dbo].[sp_base_9_create_mbr_clm_views_with_exclusion]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_base_9_create_mbr_clm_views_with_exclusion]
/*****************************************************************************
 Description: 
    Common process of processing claims with financial data
	All common process happen in dbo (results refreshed when a plan product is run)


 Parameters:
    schema_name - the plan product to run

 Return:

 Notes:

 Change History:
	2015-10-22 SL - initial version
	2015-10-28 SL - add account paid to allowed ratio
	2015-10-29 SL - add parameter for logging row count purposes
	2015-11-10 SL - move savings and ucr amount to later step
	2016-01-27 SL - add three financial fields which used to created in later step
	                add paid_to_allowed_ratio_bracket
	2016-07-12 SL - change this to views

	2017-05-15 SL - pull additional fields from membership to implement CY15 resubmission 
					exclusion/inclusion
	CY2016
	2017-10-05 SL - groups are consistent with member attributes reassignments, all from reassigned membership 
	                remove the orignal financial fields which are not necessarily to keep for reconciliation purpose
					revise the exclusion flags to be consistent with membership
	2018-02-08 SL - add view for proc_membership_ccs_conditions_10 and proc_membership_ccs_conditions_20_member_risk_score
	2018-02-22 SL - add various risk scores from prior factors and firms' factors
	2021-08-12 TK - Changed the table names from ccs to CCSR, added even fields
 
*****************************************************************************/
											@p_schema_name    varchar(50) = null
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = '@p_schema_name'
	SET @Logging_Values = ISNULL(CAST(@p_schema_name AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/
begin


declare 
	@schema_name varchar(50), 
	@dynSQL nvarchar(max),
	@sql_temp nvarchar(max),
	@row_count int


  declare cur_schema cursor local for
	select 
		schema_name
	from process.data_status_tracking
	  where include_in_uds_pmpm = 1
	  and schema_name = isnull(@p_schema_name, schema_name)
	  order by case when chp_carrier_id in (895, 881, 885, 887) then 9999 else chp_carrier_id end



  open cur_schema
  fetch next from cur_schema into @schema_name

  while ( @@FETCH_STATUS = 0 )
    begin



--2018-02-08 create views for two member data inputs


set @dynSQL = replace('
create view %schema_name%.proc_membership_ccsr_conditions_10 as
select
	a.chp_carrier_id,
	a.pdr_product_id,
	a.ccsr_condition_type,
	a.ccsr_category_code,
	a.home_hosted_indicator,
	a.member_id,
	a.zip3,
	a.member_gender,
	a.member_age,
	a.age_bracket,
	a.enrollment_months,
	a.Member_Months_Q1,
	a.Member_Months_Q2,
	a.Member_Months_Q3,
	a.Member_Months_Q4,
	a.duration_bracket,
	a.high_cost_claimant,
	a.employer_id,
	a.account_id,
	a.group_id,
	a.subgroup,
	a.group_name,
	a.insurance_arrangement,
	a.risk_factor_ccsr,
	a.risk_factor_age_gender,
	m.flag_exclude_groups,
	m.match_ID_type_when_excl_groups,
	m.exclusion_reason,
	m.flag_exclude_fully_insured,
	m.uds_pmpm_exclusion_flag,
	m.zip_exclusion_flag
from %schema_name%.proc_membership_ccsr_conditions_10_table a
left join
%schema_name%.proc_membership_attributes_10_bracket_mapped m
on m.member_id = a.member_id;
','%schema_name%',@schema_name)


      if exists (select * from INFORMATION_SCHEMA.VIEWS where TABLE_SCHEMA = @schema_name and TABLE_NAME = 'proc_membership_ccsr_conditions_10')
	    begin
		  set @sql_temp = 'drop view ' + @schema_name + '.proc_membership_ccsr_conditions_10'
          exec (@sql_temp) 
        end


exec sp_executesql @dynSQL


set @dynSQL = replace('
create view %schema_name%.proc_membership_ccsr_conditions_20_member_risk_score as
select
	a.chp_carrier_id,
	a.pdr_product_id,
	a.zip3,
	a.home_hosted_indicator,
	a.member_id,
	a.member_gender,
	a.age_bracket,
	a.duration_bracket,
	a.high_cost_claimant,
	a.employer_id,
	a.account_id,
	a.group_id,
	a.subgroup,
	a.group_name,
	a.insurance_arrangement,
	a.enrollment_months,
	a.Member_Months_Q1,
	a.Member_Months_Q2,
	a.Member_Months_Q3,
	a.Member_Months_Q4,
	a.covid_related_indicator,
	a.risk_factor_ccsr,
	a.risk_factor_age_gender,
	a.risk_factor_tot,
	b.risk_factor_ccs_prev, --- Added for CY20 but not needed in CY21
	b.risk_factor_age_gender_prev,  --Added for CY20 but not needed in CY21
	b.risk_factor_tot_prev as risk_factor_tot_UDS_Prev,  ---In CY21, this should be changed to a.risk_factor_tot_UDS_Prev
	m.flag_exclude_groups,
	m.match_ID_type_when_excl_groups,
	m.exclusion_reason,
	m.flag_exclude_fully_insured,
	m.uds_pmpm_exclusion_flag,
	m.zip_exclusion_flag
from %schema_name%.proc_membership_ccsr_conditions_20_member_risk_score_table a
left join
%schema_name%.proc_membership_attributes_10_bracket_mapped m
on m.member_id = a.member_id
left join  %schema_name%.proc_membership_ccs_conditions_20_member_risk_score_table_2019_Risk b ---will not be needed in CY21
on a.member_id=b.member_id

','%schema_name%',@schema_name)


      if exists (select * from INFORMATION_SCHEMA.VIEWS where TABLE_SCHEMA = @schema_name and TABLE_NAME = 'proc_membership_ccsr_conditions_20_member_risk_score')
	    begin
		  set @sql_temp = 'drop view ' + @schema_name + '.proc_membership_ccsr_conditions_20_member_risk_score'
          exec (@sql_temp) 
        end


exec sp_executesql @dynSQL



--3. source member attributes from membership (take the zip code a member resides for longer part of the year) includes map zip3 due to low population
-- finished all the processing of financial data
-- use this table in a separate process to create detail zip code data for Milliman's review

set @dynSQL = replace('
create view %schema_name%.vw_proc_claims_financial_20_detail as
select
	c.exclude_medical_benefit_flag,
	c.exclude_medical_benefit_flag_step1,
	c.reconciliation_code,
	c.flag_exclude_diagnosis_code,
	c.bcbsa_plan_id,
	c.pdr_product_id,
	c.chp_carrier_id,
	c.vq_year,
	c.upload,
	c.year_month,
	c.chp_row_id,
	c.Covid_Related_Indicator,
	c.atl_grouper_exclusion_flag,
	c.atl_grouper_exclusion_code,
	c.atl_grouper_orphan_claims_flag,
	c.exclusion_flag,
	c.member_id,
	c.home_hosted_indicator,
	c.claim_status,
	c.raw_claim_number,
	c.original_claim_number,
	c.claim_line_number,
	c.admit_date,
	c.date_of_service,
	c.paid_date,
	c.atl_grouper_claim_type,
	c.claim_type as claim_type_code,
	case c.claim_type when 1 then ''I'' when 2 then ''O'' when 3 then ''P'' when 4 then ''O'' else null end as claim_type,

/***** Below member attributes are pulled from processing membership after a member is assigned as one single attribute******/
	m.account_id,
	m.group_id,
	m.employer_id,
	m.group_name,
	m.subgroup,
	m.zip3_before_mapped,
	m.zip3,
	m.member_gender,
	m.age_bracket,
	m.duration_bracket,
	m.high_cost_claimant,
	m.insurance_arrangement,
	m.flag_exclude_groups,
	m.match_ID_type_when_excl_groups,
	m.exclusion_reason,
	m.flag_exclude_fully_insured,
	m.uds_pmpm_exclusion_flag,
	m.zip_exclusion_flag,
	
	/*************  Map Professional Other to OP according to Appendix B *************/
	case when c.claim_type in (2, 4) then coalesce(op_svc.op_type_svc,''ZZ'') else null end as op_type_of_service,
	c.alt_grouper_service_category,
	c.service_category,
	c.procedure_code,
	c.cpt_modifier_code,
	c.primary_diagnosis_code,
    c.diagnosis_code_2,
    c.diagnosis_code_3,
    c.diagnosis_code_4,
    c.diagnosis_code_5,
    c.diagnosis_code_6,
    c.diagnosis_code_7,
    c.diagnosis_code_8,
    c.diagnosis_code_9,
    c.diagnosis_code_10,
    c.diagnosis_code_11,
    c.diagnosis_code_12,
    c.diagnosis_code_13,
    c.diagnosis_code_14,
    c.diagnosis_code_15,
	c.revenue_code,
	c.claims_benefit_payment_status,
	c.provider_contracting_status,
	c.provider_network_status,
	c.benefit_payment_contract_status,
	/************** financial fields for Outlier Model *************/
	case when concat(c.provider_contracting_status, c.provider_network_status) = ''NN'' then  c.billed_amount*0.60 else c.allowed_amount end as [Allowed Amount (Set to Billed in INN/ONN)],
	/************** financial fields for Outlier Model *************/
	c.reason_adjustment_code,
	c.submitted_amount,
	c.billed_amount,
	c.adjusted_billed_amount,
	c.allowed_amount,
	c.adjusted_allowed_amount,
	c.other_provider_payment_direct,
	c.other_provider_payment_indirect,
	c.allowed_amount_uds_pmpm,
	c.RnC_cutback_amount,
	case when concat(c.provider_contracting_status, c.provider_network_status) = ''NN'' then c.adjusted_billed_amount - c.adjusted_allowed_amount else 0 end as adjusted_RnC_cutback_amount,   --2018-10-09 add in CY2017
	c.savings_amount,
	case when concat(c.provider_contracting_status, c.provider_network_status) = ''NN'' then 0 else c.adjusted_billed_amount - c.adjusted_allowed_amount end as adjusted_savings_amount,   --2018-02-23 add in CY2016
	c.paid_amount,'+char(13)+char(10)+
	case when @schema_name in ('p881_MIB1','p898_DCB1','p898_DCL2','p947_SCB1','p906_KSB1','p913_MOL1') then 'c.paid_amount*(c.adjusted_allowed_amount/nullif(c.allowed_amount,0))' else 'c.adjusted_paid_amount' end+ ' as adjusted_paid_amount,
	c.cob_amount,
	c.non_covered_amount,
	c.copayment_amount,
	c.coinsurance_amount,
	c.deductible_amount,
	c.admits,
	c.inpatient_days,
	case when c.claim_type = 2 then c.cost_model_utilization else c.utilization end as actual_utilization
from %schema_name%.proc_claims_financial_10 c
left join
reference.ref_uds_outpatient_type_of_service op_svc
on op_svc.service_category_id = c.service_category
left join
%schema_name%.proc_membership_attributes_10_bracket_mapped m
on m.member_id = c.member_id;
','%schema_name%',@schema_name)

--print @dynSQL
      if exists (select * from INFORMATION_SCHEMA.VIEWS where TABLE_SCHEMA = @schema_name and TABLE_NAME = 'vw_proc_claims_financial_20_detail')
	    begin
		  set @sql_temp = 'drop view ' + @schema_name + '.vw_proc_claims_financial_20_detail'
          exec (@sql_temp) 
        end

print @dynSQL
exec sp_executesql @dynSQL


	  fetch next from cur_schema into @schema_name

    end

  close cur_schema
  deallocate cur_schema




--set @row_count = @@ROWCOUNT

--exec Log.SpLogTableRowCounts @CallId = @CallId, @schema_name = @schema_name, @table_name = 'proc_claims_financial_20_detail', @row_count = @row_count


end/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/




GO
/****** Object:  StoredProcedure [dbo].[sp_base_9_UDS_create_mbr_clm_views_with_exclusion_Final]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_base_9_UDS_create_mbr_clm_views_with_exclusion_Final]
/*****************************************************************************
 Description: 
    Common process of processing claims with financial data
	All common process happen in dbo (results refreshed when a plan product is run)


 Parameters:
    schema_name - the plan product to run

 Return:

 Notes:

 Change History:
	2015-10-22 SL - initial version
	2015-10-28 SL - add account paid to allowed ratio
	2015-10-29 SL - add parameter for logging row count purposes
	2015-11-10 SL - move savings and ucr amount to later step
	2016-01-27 SL - add three financial fields which used to created in later step
	                add paid_to_allowed_ratio_bracket
	2016-07-12 SL - change this to views

	2017-05-15 SL - pull additional fields from membership to implement CY15 resubmission 
					exclusion/inclusion
	CY2016
	2017-10-05 SL - groups are consistent with member attributes reassignments, all from reassigned membership 
	                remove the orignal financial fields which are not necessarily to keep for reconciliation purpose
					revise the exclusion flags to be consistent with membership
	2018-02-08 SL - add view for proc_membership_ccs_conditions_10 and proc_membership_ccs_conditions_20_member_risk_score
	2018-02-22 SL - add various risk scores from prior factors and firms' factors
	2018-10-11 SL - this is for the final step of creating the files
					the only difference is that host_chp_carrier_id and host_pdr_product_id are added
	2018-10-18 SL - add additional flags for Anthem HOME only
	2019-10-02 TK - Removed the additional flags for Anthem Home only as the reference table was re-created this upload w/o anthem hosted data with the exception of CO & NV
	2019-12-02-TK--Added code to flip ix to ic and ox to oc where member is held harmeless (ozz ot izz) per Molly
	2020-08-18-TK -- added fields for paid_to_allowed_amount for all data and for IC based on update in UDS spec (pg 7)
 
*****************************************************************************/
											@p_schema_name    varchar(50) = null
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = '@p_schema_name'
	SET @Logging_Values = ISNULL(CAST(@p_schema_name AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/
begin


declare 
	@schema_name varchar(50), 
	@dynSQL nvarchar(max),
	@sql_temp nvarchar(max),
	@row_count int,
	@carrier_group_code varchar (5)


  declare cur_schema cursor local for
	select 
		schema_name, carrier_group_code
	from process.data_status_tracking
	  where include_in_uds_pmpm = 1
	  and schema_name = isnull(@p_schema_name, schema_name)
	  order by case when chp_carrier_id in (895, 881, 885, 887) then 9999 else chp_carrier_id end



  open cur_schema
  fetch next from cur_schema into @schema_name, @carrier_group_code

  while ( @@FETCH_STATUS = 0 )
    begin



--2018-02-08 create views for two member data inputs


set @dynSQL = replace('
create view %schema_name%.proc_membership_ccsr_conditions_10 as
select
	a.chp_carrier_id,
	a.pdr_product_id,
	a.ccsr_condition_type,
	a.ccsr_category_code,
	a.home_hosted_indicator,
	a.member_id,
	a.zip3,
	a.member_gender,
	a.member_age,
	a.age_bracket,
	a.enrollment_months,
	a.Member_Months_Q1,
	a.Member_Months_Q2,
	a.Member_Months_Q3,
	a.Member_Months_Q4,
	a.duration_bracket,
	a.high_cost_claimant,
	a.employer_id,
	a.account_id,
	a.group_id,
	a.subgroup,
	a.group_name,
	a.covid_related_indicator,
	a.insurance_arrangement,
	m.employer_group_size,
	a.risk_factor_ccsr,
	a.risk_factor_age_gender,
	m.paid_to_allowed_ratio_bracket_ic,
	m.paid_to_allowed_ratio_bracket_all,
	/************* individual exclusion flags *************/
	m.flag_exclude_groups,
	m.match_ID_type_when_excl_groups,
	m.exclusion_reason,
	m.flag_exclude_fully_insured,
	m.zip_exclusion_flag,
	m.uds_pmpm_exclusion_flag,
	m.host_chp_carrier_id,
	m.host_pdr_product_id
from %schema_name%.proc_membership_ccsr_conditions_10_table a
left join
%schema_name%.proc_membership_attributes_10_bracket_mapped m
on m.member_id = a.member_id;
','%schema_name%',@schema_name)


      if exists (select * from INFORMATION_SCHEMA.VIEWS where TABLE_SCHEMA = @schema_name and TABLE_NAME = 'proc_membership_ccsr_conditions_10')
	    begin
		  set @sql_temp = 'drop view ' + @schema_name + '.proc_membership_ccsr_conditions_10'
          exec (@sql_temp) 
        end


exec sp_executesql @dynSQL


set @dynSQL = replace('
create view %schema_name%.proc_membership_ccsr_conditions_20_member_risk_score as
select
	a.chp_carrier_id,
	a.pdr_product_id,
	a.zip3,
	a.home_hosted_indicator,
	a.member_id,
	a.member_gender,
	a.age_bracket,
	a.duration_bracket,
	a.high_cost_claimant,
	a.employer_id,
	a.account_id,
	a.group_id,
	a.subgroup,
	a.group_name,
	a.insurance_arrangement,
	m.employer_group_size,
	a.enrollment_months,
	a.Member_Months_Q1,
	a.Member_Months_Q2,
	a.Member_Months_Q3,
	a.Member_Months_Q4,
	a.covid_related_indicator,
	a.risk_factor_ccsr,
	a.risk_factor_age_gender,
	a.risk_factor_tot,
	b.risk_factor_ccs_prev, --- Added for CY20 but not needed in CY21
	b.risk_factor_age_gender_prev,  --Added for CY20 but not needed in CY21
	b.risk_factor_tot_prev as risk_factor_tot_UDS_Prev,  ---In CY21, this should be changed to a.risk_factor_tot_UDS_Prev
	m.paid_to_allowed_ratio_bracket_ic,
	m.paid_to_allowed_ratio_bracket_all,
	m.flag_exclude_groups,
	m.match_ID_type_when_excl_groups,
	m.exclusion_reason,
	m.flag_exclude_fully_insured,
	m.zip_exclusion_flag,
	m.uds_pmpm_exclusion_flag,
	m.host_chp_carrier_id,
	m.host_pdr_product_id
from %schema_name%.proc_membership_ccsr_conditions_20_member_risk_score_table a
left join
%schema_name%.proc_membership_attributes_10_bracket_mapped m
on m.member_id = a.member_id
left join  %schema_name%.proc_membership_ccs_conditions_20_member_risk_score_table_2019_Risk b ---will not be needed in CY21
on a.member_id=b.member_id
','%schema_name%',@schema_name)



      if exists (select * from INFORMATION_SCHEMA.VIEWS where TABLE_SCHEMA = @schema_name and TABLE_NAME = 'proc_membership_ccsr_conditions_20_member_risk_score')
	    begin
		  set @sql_temp = 'drop view ' + @schema_name + '.proc_membership_ccsr_conditions_20_member_risk_score'
          exec (@sql_temp) 
        end
exec sp_executesql @dynSQL


 if exists (select * from INFORMATION_SCHEMA.VIEWS where TABLE_SCHEMA = @schema_name and TABLE_NAME = 'vw_proc_claims_financial_20_detail')
	    begin
		  set @sql_temp = 'drop view ' + @schema_name + '.vw_proc_claims_financial_20_detail'
          exec (@sql_temp) 
        end

--3. source member attributes from membership (take the zip code a member resides for longer part of the year) includes map zip3 due to low population
-- finished all the processing of financial data
-- Due to the changes that need to be made for HCSC IN CY20 where noncontracted savings are reflected in the Adjusted data as IC/OC and in Actual and IX/OX, tables were created first only for hcsc and then the views
if  @carrier_group_code ='699' 
BEGIN

set @dynSQL = replace('
if object_id (''%schema_name%.proc_claims_financial_20_detail_HCSC'', ''U'') is not null
drop table %schema_name%.proc_claims_financial_20_detail_HCSC;
select
	c.exclude_medical_benefit_flag,
	c.exclude_medical_benefit_flag_step1,
	c.reconciliation_code,
	c.flag_exclude_diagnosis_code,
	c.bcbsa_plan_id,
	c.pdr_product_id,
	c.chp_carrier_id,
	c.vq_year,
	c.upload,
	c.year_month,
	c.chp_row_id,
	c.Covid_Related_Indicator,
	c.atl_grouper_exclusion_flag,
	c.atl_grouper_exclusion_code,
	c.atl_grouper_orphan_claims_flag,
	c.exclusion_flag,
	c.member_id,
	c.home_hosted_indicator,
	c.claim_status,
	c.raw_claim_number,
	c.original_claim_number,
	c.claim_line_number,
	c.admit_date,
	c.date_of_service,
	c.paid_date,
	c.atl_grouper_claim_type,
	c.claim_type as claim_type_code,
	case c.claim_type when 1 then ''I'' when 2 then ''O'' when 3 then ''P'' when 4 then ''O'' else null end as claim_type,

/******Below member attributes are pulled from processing membership after a member is assigned as one single attribute ******/
	m.account_id,
	m.group_id,
	m.employer_id,
	m.group_name,
	m.subgroup,
	m.zip3_before_mapped,
	m.zip3,
	m.member_gender,
	m.age_bracket,
	m.duration_bracket,
	m.high_cost_claimant,
	m.insurance_arrangement,
	m.employer_group_size,
	m.paid_to_allowed_ratio_bracket_ic,
	m.paid_to_allowed_ratio_bracket_all,
	m.flag_exclude_groups,
	m.match_ID_type_when_excl_groups,
	m.exclusion_reason,
	m.flag_exclude_fully_insured,
	m.zip_exclusion_flag,
	m.uds_pmpm_exclusion_flag,
	m.host_chp_carrier_id,
	m.host_pdr_product_id,
	
/********Map Professional Other to OP according to Appendix B ***************/
	case when c.claim_type in (2, 4) then coalesce(op_svc.op_type_svc,''ZZ'') else null end as op_type_of_service,
	c.alt_grouper_service_category,
	c.service_category,
	c.procedure_code,
	c.cpt_modifier_code,
	c.primary_diagnosis_code,
    c.diagnosis_code_2,
    c.diagnosis_code_3,
    c.diagnosis_code_4,
    c.diagnosis_code_5,
    c.diagnosis_code_6,
    c.diagnosis_code_7,
    c.diagnosis_code_8,
    c.diagnosis_code_9,
    c.diagnosis_code_10,
    c.diagnosis_code_11,
    c.diagnosis_code_12,
    c.diagnosis_code_13,
    c.diagnosis_code_14,
    c.diagnosis_code_15,
	c.revenue_code,
	c.claims_benefit_payment_status,
	c.provider_contracting_status,
	c.provider_network_status,
	case when c.claims_benefit_payment_status=''I'' and c.provider_contracting_status=''Z'' and c.provider_network_status=''Z'' and c.benefit_payment_contract_status=''IX'' then ''IC''
	     when c.claims_benefit_payment_status=''O'' and c.provider_contracting_status=''Z'' and c.provider_network_status=''Z'' and c.benefit_payment_contract_status=''OX'' then ''OC''
		 Else c.benefit_payment_contract_status END as benefit_payment_contract_status,
	c.benefit_payment_contract_status as org_benefit_payment_contract_status,
	/************** financial fields for Outlier Model *************/
	case when concat(c.provider_contracting_status, c.provider_network_status) = ''NN'' then c.billed_amount*0.60 else c.allowed_amount end as [Allowed Amount (Set to Billed in INN/ONN)],
	/************** financial fields for Outlier Model *************/
	c.reason_adjustment_code,
	c.submitted_amount,
	c.billed_amount,
	c.adjusted_billed_amount,
	c.allowed_amount,
	c.adjusted_allowed_amount,
	c.other_provider_payment_direct,
	c.other_provider_payment_indirect,
	c.allowed_amount_uds_pmpm,
	c.RnC_cutback_amount,
	case when concat(c.provider_contracting_status, c.provider_network_status) = ''NN'' then c.adjusted_billed_amount - c.adjusted_allowed_amount else 0 end as adjusted_RnC_cutback_amount,   --2018-10-09 add in CY2017
	c.savings_amount,
	case when concat(c.provider_contracting_status, c.provider_network_status) = ''NN'' then 0 else c.adjusted_billed_amount - c.adjusted_allowed_amount end as adjusted_savings_amount,   --2018-02-23 add in CY2016
	c.paid_amount,'+char(13)+char(10)+
	case when @schema_name in ('p881_MIB1','p898_DCB1','p898_DCL2','p947_SCB1','p906_KSB1','p913_MOL1','p1017_WAB1') then 'coalesce(c.paid_amount*(c.adjusted_allowed_amount/nullif(c.allowed_amount,0)),0)' else 'c.adjusted_paid_amount' end+ ' as adjusted_paid_amount,
	c.cob_amount,
	c.non_covered_amount,
	c.copayment_amount,
	c.coinsurance_amount,
	c.deductible_amount,
	c.admits,
	c.inpatient_days,
	case when c.claim_type = 2 then c.cost_model_utilization else c.utilization end as actual_utilization,
	c.admits as adjusted_admits,
	c.inpatient_days as adjusted_inpatient_days,
	case when c.claim_type = 2 then c.cost_model_utilization else c.utilization end as adjusted_utilization
into %schema_name%.proc_claims_financial_20_detail_HCSC	
from %schema_name%.proc_claims_financial_10 c
left join
 reference.ref_uds_outpatient_type_of_service op_svc
on op_svc.service_category_id = c.service_category
left join
%schema_name%.proc_membership_attributes_10_bracket_mapped m
on m.member_id = c.member_id;
','%schema_name%',@schema_name)
exec sp_executesql @dynSQL
END

IF @carrier_group_code='699'
BEGIN
set @dynSQL=replace('
Drop table if exists %schema_name%.ix_ox_flip
select * into %schema_name%.ix_ox_flip
from %schema_name%.proc_claims_financial_20_detail_HCSC
where  benefit_payment_contract_status in (''IC'',''OC'')
and provider_contracting_status=''Z'' 
and provider_network_status=''Z''
','%schema_name%',@schema_name)
exec sp_executesql @dynSQL

set @dynSQL=replace('
Update a
set benefit_payment_contract_status=''IX'',
    adjusted_billed_amount=0,
	adjusted_allowed_amount=0,
	adjusted_utilization=0,
	adjusted_admits=0,
	adjusted_inpatient_days=0,
	adjusted_RnC_cutback_amount=0,
	adjusted_paid_amount=0,
	adjusted_savings_amount=0,
	allowed_amount_uds_pmpm=0
from %schema_name%.ix_ox_flip a
where benefit_payment_contract_status=''IC''


Update b
set benefit_payment_contract_status=''OX'',
  adjusted_billed_amount=0,
	adjusted_allowed_amount=0,
	adjusted_utilization=0,
	adjusted_admits=0,
	adjusted_inpatient_days=0,
	adjusted_RnC_cutback_amount=0,
	adjusted_paid_amount=0,
	adjusted_savings_amount=0,
	allowed_amount_uds_pmpm=0
from %schema_name%.ix_ox_flip b
where benefit_payment_contract_status=''OC''
','%schema_name%',@schema_name)
exec sp_executesql @dynSQL

set @dynSQL=
replace('update a
set 
    billed_amount=0,
	allowed_amount=0,
	actual_utilization=0,
	admits=0,
	inpatient_days=0,
	savings_amount=0,
	paid_amount=0
from %schema_name%.proc_claims_financial_20_detail_HCSC a
where benefit_payment_contract_status in (''IC'',''OC'')
and provider_contracting_status=''Z'' 
and provider_network_status=''Z''
','%schema_name%',@schema_name)
exec sp_executesql @dynSQL

set @dynSQL=replace('
insert into %schema_name%.proc_claims_financial_20_detail_HCSC
select * from %schema_name%.ix_ox_flip
','%schema_name%',@schema_name)
exec sp_executesql @dynSQL

set @dynSQL = replace('
create view %schema_name%.vw_proc_claims_financial_20_detail as
SELECT * FROM %schema_name%.proc_claims_financial_20_detail_HCSC
','%schema_name%',@schema_name)
exec sp_executesql @dynSQL
END

if @carrier_group_code <>'699'
BEGIN
set @dynSQL = replace('
create view %schema_name%.vw_proc_claims_financial_20_detail as
select
	c.exclude_medical_benefit_flag,
	c.exclude_medical_benefit_flag_step1,
	c.reconciliation_code,
	c.flag_exclude_diagnosis_code,
	c.bcbsa_plan_id,
	c.pdr_product_id,
	c.chp_carrier_id,
	c.vq_year,
	c.upload,
	c.year_month,
	c.chp_row_id,
	c.Covid_Related_Indicator,
	c.atl_grouper_exclusion_flag,
	c.atl_grouper_exclusion_code,
	c.atl_grouper_orphan_claims_flag,
	c.exclusion_flag,
	c.member_id,
	c.home_hosted_indicator,
	c.claim_status,
	c.raw_claim_number,
	c.original_claim_number,
	c.claim_line_number,
	c.admit_date,
	c.date_of_service,
	c.paid_date,
	c.atl_grouper_claim_type,
	c.claim_type as claim_type_code,
	case c.claim_type when 1 then ''I'' when 2 then ''O'' when 3 then ''P'' when 4 then ''O'' else null end as claim_type,

/******Below member attributes are pulled from processing membership after a member is assigned as one single attribute ******/
	m.account_id,
	m.group_id,
	m.employer_id,
	m.group_name,
	m.subgroup,
	m.zip3_before_mapped,
	m.zip3,
	m.member_gender,
	m.age_bracket,
	m.duration_bracket,
	m.high_cost_claimant,
	m.insurance_arrangement,
	m.employer_group_size,
	m.paid_to_allowed_ratio_bracket_ic,
	m.paid_to_allowed_ratio_bracket_all,
	m.flag_exclude_groups,
	m.match_ID_type_when_excl_groups,
	m.exclusion_reason,
	m.flag_exclude_fully_insured,
	m.zip_exclusion_flag,
	m.uds_pmpm_exclusion_flag,
	m.host_chp_carrier_id,
	m.host_pdr_product_id,
	
/********Map Professional Other to OP according to Appendix B ***************/
	case when c.claim_type in (2, 4) then coalesce(op_svc.op_type_svc,''ZZ'') else null end as op_type_of_service,
	c.alt_grouper_service_category,
	c.service_category,
	c.procedure_code,
	c.cpt_modifier_code,
	c.primary_diagnosis_code,
    c.diagnosis_code_2,
    c.diagnosis_code_3,
    c.diagnosis_code_4,
    c.diagnosis_code_5,
    c.diagnosis_code_6,
    c.diagnosis_code_7,
    c.diagnosis_code_8,
    c.diagnosis_code_9,
    c.diagnosis_code_10,
    c.diagnosis_code_11,
    c.diagnosis_code_12,
    c.diagnosis_code_13,
    c.diagnosis_code_14,
    c.diagnosis_code_15,
	c.revenue_code,
	c.claims_benefit_payment_status,
	c.provider_contracting_status,
	c.provider_network_status,
	case when c.claims_benefit_payment_status=''I'' and c.provider_contracting_status=''Z'' and c.provider_network_status=''Z'' and c.benefit_payment_contract_status=''IX'' then ''IC''
	     when c.claims_benefit_payment_status=''O'' and c.provider_contracting_status=''Z'' and c.provider_network_status=''Z'' and c.benefit_payment_contract_status=''OX'' then ''OC''
		 Else c.benefit_payment_contract_status END as benefit_payment_contract_status,
	c.benefit_payment_contract_status as org_benefit_payment_contract_status,
	/************** financial fields for Outlier Model *************/
	case when concat(c.provider_contracting_status, c.provider_network_status) = ''NN'' then c.billed_amount*0.60 else c.allowed_amount end as [Allowed Amount (Set to Billed in INN/ONN)],
	/************** financial fields for Outlier Model *************/
	c.reason_adjustment_code,
	c.submitted_amount,
	c.billed_amount,
	c.adjusted_billed_amount,
	c.allowed_amount,
	c.adjusted_allowed_amount,
	c.other_provider_payment_direct,
	c.other_provider_payment_indirect,
	c.allowed_amount_uds_pmpm,
	c.RnC_cutback_amount,
	case when concat(c.provider_contracting_status, c.provider_network_status) = ''NN'' then c.adjusted_billed_amount - c.adjusted_allowed_amount else 0 end as adjusted_RnC_cutback_amount,   --2018-10-09 add in CY2017
	c.savings_amount,
	case when concat(c.provider_contracting_status, c.provider_network_status) = ''NN'' then 0 else c.adjusted_billed_amount - c.adjusted_allowed_amount end as adjusted_savings_amount,   --2018-02-23 add in CY2016
	c.paid_amount,'+char(13)+char(10)+
	case when @schema_name in ('p881_MIB1','p898_DCB1','p898_DCL2','p947_SCB1','p906_KSB1','p913_MOL1','p1017_WAB1') then 'coalesce(c.paid_amount*(c.adjusted_allowed_amount/nullif(c.allowed_amount,0)),0)' else 'c.adjusted_paid_amount' end+ ' as adjusted_paid_amount,
	c.cob_amount,
	c.non_covered_amount,
	c.copayment_amount,
	c.coinsurance_amount,
	c.deductible_amount,
	c.admits,
	c.inpatient_days,
	case when c.claim_type = 2 then c.cost_model_utilization else c.utilization end as actual_utilization,
	c.admits as adjusted_admits,
	c.inpatient_days as adjusted_inpatient_days,
	case when c.claim_type = 2 then c.cost_model_utilization else c.utilization end as adjusted_utilization
	
from %schema_name%.proc_claims_financial_10 c
left join
 reference.ref_uds_outpatient_type_of_service op_svc
on op_svc.service_category_id = c.service_category
left join
%schema_name%.proc_membership_attributes_10_bracket_mapped m
on m.member_id = c.member_id;
','%schema_name%',@schema_name)
exec sp_executesql @dynSQL

END
    --  if exists (select * from INFORMATION_SCHEMA.VIEWS where TABLE_SCHEMA = @schema_name and TABLE_NAME = 'vw_proc_claims_financial_20_detail')
	   -- begin
		  --set @sql_temp = 'drop view ' + @schema_name + '.vw_proc_claims_financial_20_detail'
    --      exec (@sql_temp) 
    --    end

PRINT (@dynSQL)
exec sp_executesql @dynSQL

--drop tables used to create previous risk score (2019 risk score on CY20 data) to cut space. Not required in CY21 and should be deleted from code

set @dynSQL = replace('
drop table %schema_name%.proc_claims_diagnosis_code_40_2019_Risk
drop table %schema_name%.proc_claims_diagnosis_code_45_Compound_CCSR
drop table%schema_name%.proc_claims_diagnosis_code_50_with_Compound_CCSR d
drop table %schema_name%.proc_membership_ccs_conditions_10_table_2019_Risk
drop table %schema_name%.proc_membership_ccs_conditions_20_member_risk_score_table_2019_Risk
','%schema_name%',@schema_name)

--exec sp_executesql @dynSQL

	  fetch next from cur_schema into @schema_name , @carrier_group_code

    end

  close cur_schema
  deallocate cur_schema 




--set @row_count = @@ROWCOUNT

--exec Log.SpLogTableRowCounts @CallId = @CallId, @schema_name = @schema_name, @table_name = 'proc_claims_financial_20_detail', @row_count = @row_count


end/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/




GO
/****** Object:  StoredProcedure [dbo].[sp_certify_1_create_data_tableshell]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_certify_1_create_data_tableshell]
/*****************************************************************************
 Description: 
    Make create output tableshell as procedure


 Parameters:
    p_replace_existing - whether to drop tableshell and recreate

 Return:

 Notes:

 Change History:
	2016-07-12 SL - initial version
	2017-11-28 SL - revise for CY2016 changes
	2018-07-06 SL - revise ccs_category_code data type for Compound CCS
 
*****************************************************************************/
								@p_replace_existing          varchar(1)  = 'Y'

as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = NULL
	SET @Logging_Values = NULL
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/
begin


--table to store random numbers

if object_id('certification.pure_random_numbers','U') is not null
drop table [certification].[pure_random_numbers]

CREATE TABLE [certification].[pure_random_numbers](
	[row_id] [int] NOT NULL,
	[pure_random] [float] NOT NULL
)


--table to store randomized member pool

if object_id('certification.random_members_pool','U') is not null
drop table [certification].random_members_pool

CREATE TABLE certification.random_members_pool(
	[row_id] [int] NOT NULL,
	[chp_carrier_id] [varchar](5) NULL,
	[pdr_product_id] [varchar](50) NULL,
	[member_id] [varchar](512) NULL,
	[pure_random] [float] NOT NULL,
	[random_order] [int] NOT NULL,
		CONSTRAINT pk_key_random_members_pool UNIQUE (pdr_product_id, chp_carrier_id, member_id)
) 

--table to store detail records

if object_id ('certification.plan_certify_detail_members_00', 'U') is not null
drop table certification.plan_certify_detail_members_00

CREATE TABLE certification.plan_certify_detail_members_00
(
	[chp_carrier_id] [varchar](50) NOT NULL,
	[pdr_product_id] [varchar](50) NOT NULL,
	[member_id] [varchar](50) NOT NULL,
	[gender_age_bracket] [varchar](17) NOT NULL,
	[duration_bracket] [varchar](5) NOT NULL,
	[submitted_diagnosis_code] [varchar](10)  NULL,
	[ccsr_category_code] [varchar](10) NOT NULL,
	[flag_dup_member_condition] [varchar](1) NOT NULL,
	[risk_factor_age_gender] [float] NOT NULL,
	[risk_factor_ccsr] [float] NOT NULL
)


--tables to store summary source data


if object_id('certification.plan_certify_summary_risk_score_YOY_Mkt_00','U') is not null
drop table [certification].plan_certify_summary_risk_score_YOY_Mkt_00

CREATE TABLE [certification].[plan_certify_summary_risk_score_YOY_Mkt_00](
	[pdr_product_id] [varchar](50) NULL,
	[chp_carrier_id] [varchar](50) NULL,
	[data_type_code] [int] NOT NULL,
	[Market Code] [nvarchar](255) NOT NULL,
	[Market] [varchar](50) NOT NULL,
	[Pre Member count] [numeric](38, 0) NULL,
	[Pre Member Months] [int] NULL,
	[Pre Risk Score] [numeric](36, 4) NULL,
	[Cur Member count] [numeric](38, 0) NULL,
	[Cur Member Months] [int] NULL,
	[Cur Risk Score] [numeric](36, 4) NULL,
	[% Change Risk Score] [float] NULL,
	[update_time] [datetime] NOT NULL,
		CONSTRAINT pk_key_risk_score_YOY_Mkt_00 UNIQUE (pdr_product_id, chp_carrier_id, [Market Code])
)



if object_id('certification.plan_certify_summary_age_gender_30','U') is not null
drop table [certification].plan_certify_summary_age_gender_30

CREATE TABLE [certification].[plan_certify_summary_age_gender_30](
	[pdr_product_id] [varchar](50) NULL,
	[chp_carrier_id] [varchar](50) NULL,
	[Age/Gender Catgory] [varchar](16) NULL,
	[1 to 3] [int] NULL,
	[4 to 6] [int] NULL,
	[7 to 9] [int] NULL,
	[10 to 11] [int] NULL,
	[12] [int] NULL,
	[% Total (Percent)] [numeric](38, 20) NULL,
	[Average Risk Score Total] [numeric](36, 4) NOT NULL,
	[Members with No Conditions] [numeric](24, 12) NOT NULL,
	[update_time] [datetime] NOT NULL,
		CONSTRAINT pk_key_age_gender_30 UNIQUE (pdr_product_id, chp_carrier_id, [Age/Gender Catgory])
)


if object_id('certification.plan_certify_summary_dx_code_20_comparison','U') is not null
drop table [certification].plan_certify_summary_dx_code_20_comparison

CREATE TABLE [certification].[plan_certify_summary_dx_code_20_comparison](
	[pdr_product_id] [varchar](50) NULL,
	[chp_carrier_id] [varchar](5) NULL,
	[Number of Diagnosis Code] [varchar](50) NULL,
	[IP] [decimal](20, 4) NULL,
	[OP] [decimal](20, 4) NULL,
	[PR] [decimal](20, 4) NULL,
	[IP Pre] [decimal](20, 4) NULL,
	[OP Pre] [decimal](20, 4) NULL,
	[PR Pre] [decimal](20, 4) NULL,
	[IP AVG] [decimal](20, 4) NULL,
	[OP AVG] [decimal](20, 4) NULL,
	[PR AVG] [decimal](20, 4) NULL,
	[update_time] [datetime] NOT NULL,
		CONSTRAINT pk_key_dx_code_20_comparison UNIQUE (pdr_product_id, chp_carrier_id, [Number of Diagnosis Code])
)


if object_id('certification.plan_certify_summary_risk_score_YOY_zip3_proc_00_mbr','U') is not null
drop table [certification].[plan_certify_summary_risk_score_YOY_zip3_proc_00_mbr]

CREATE TABLE [certification].[plan_certify_summary_risk_score_YOY_zip3_proc_00_mbr](
	[upload_indicator] [varchar](3) NOT NULL,
	[pdr_product_id] [varchar](50) NULL,
	[chp_carrier_id] [varchar](50) NULL,
	[zip3] [varchar](3) NULL,
	[flag_duration_7_plus] [varchar](1) NOT NULL,
	[flag_exclude_fully_insured] [varchar](1) NULL,
	[uds_pmpm_exclusion_flag] [varchar](1) NULL,
	[flag_exclude_groups]  [varchar](1) NULL,
	[member_count] [numeric](18, 0) NULL,
	[member_months] [int] NULL,
	[risk_factor_tot] [float] NULL,
	[risk_factor_tot2] [float] NULL
) ON [PRIMARY]



if object_id('certification.plan_certify_summary_risk_score_YOY_zip3_proc_00_clm','U') is not null
drop table [certification].[plan_certify_summary_risk_score_YOY_zip3_proc_00_clm]

CREATE TABLE [certification].[plan_certify_summary_risk_score_YOY_zip3_proc_00_clm](
	[upload_indicator] [varchar](3) NOT NULL,
	[pdr_product_id] [varchar](50) NULL,
	[chp_carrier_id] [varchar](5) NULL,
	[zip3] [varchar](3) NULL,
	[flag_duration_7_plus] [varchar](1) NOT NULL,
	[flag_exclude_fully_insured] [varchar](1) NULL,
	[uds_pmpm_exclusion_flag] [varchar](1) NULL,
	[flag_exclude_groups]  [varchar](1) NULL,
	[allowed_amount] [decimal](38, 10) NULL,
	[RnC_cutback_amount] [decimal](38, 10) NULL,
	[adjusted_allowed_amount] [decimal](38, 10) NULL
) ON [PRIMARY]


if object_id('certification.plan_certify_summary_risk_score_YOY_zip3_proc_20_Mkt_St_pivot','U') is not null
drop table [certification].[plan_certify_summary_risk_score_YOY_zip3_proc_20_Mkt_St_pivot]


CREATE TABLE [certification].[plan_certify_summary_risk_score_YOY_zip3_proc_20_Mkt_St_pivot](
	[chp_carrier_id] [varchar](50) NULL,
	[pdr_product_id] [varchar](50) NULL,
	[data_type_code] [int] NOT NULL,
	[Market Code] [nvarchar](255) NOT NULL,
	[Market] [varchar](50) NOT NULL,
	[member_count1] [decimal](20, 4) NULL,
	[member_months1] [decimal](20, 4) NULL,
	[allowed_amount1] [decimal](20, 4) NULL,
	[avg_risk_score1] [decimal](20, 4) NULL,
	[avg_risk_score_for_upload_ind1] [decimal](20, 4) NULL,
	[adj_allowed_PMPM1] [decimal](20, 4) NULL,
	[RA_PMPM1] [decimal](20, 4) NULL,
	[RA_PMPM_for_upload_ind1] [decimal](20, 4) NULL,
	[member_count2] [decimal](20, 4) NULL,
	[member_months2] [decimal](20, 4) NULL,
	[allowed_amount2] [decimal](20, 4) NULL,
	[avg_risk_score2] [decimal](20, 4) NULL,
	[avg_risk_score_for_upload_ind2] [decimal](20, 4) NULL,
	[adj_allowed_PMPM2] [decimal](20, 4) NULL,
	[RA_PMPM2] [decimal](20, 4) NULL,
	[RA_PMPM_for_upload_ind2] [decimal](20, 4) NULL,
	[member_count3] [decimal](20, 4) NULL,
	[member_months3] [decimal](20, 4) NULL,
	[allowed_amount3] [decimal](20, 4) NULL,
	[avg_risk_score3] [decimal](20, 4) NULL,
	[avg_risk_score_for_upload_ind3] [decimal](20, 4) NULL,
	[adj_allowed_PMPM3] [decimal](20, 4) NULL,
	[RA_PMPM3] [decimal](20, 4) NULL,
	[RA_PMPM_for_upload_ind3] [decimal](20, 4) NULL,
	[member_count4] [decimal](20, 4) NULL,
	[member_months4] [decimal](20, 4) NULL,
	[allowed_amount4] [decimal](20, 4) NULL,
	[avg_risk_score4] [decimal](20, 4) NULL,
	[avg_risk_score_for_upload_ind4] [decimal](20, 4) NULL,
	[adj_allowed_PMPM4] [decimal](20, 4) NULL,
	[RA_PMPM4] [decimal](20, 4) NULL,
	[RA_PMPM_for_upload_ind4] [decimal](20, 4) NULL,
	[member_count5] [decimal](20, 4) NULL,
	[member_months5] [decimal](20, 4) NULL,
	[allowed_amount5] [decimal](20, 4) NULL,
	[avg_risk_score5] [decimal](20, 4) NULL,
	[avg_risk_score_for_upload_ind5] [decimal](20, 4) NULL,
	[adj_allowed_PMPM5] [decimal](20, 4) NULL,
	[RA_PMPM5] [decimal](20, 4) NULL,
	[RA_PMPM_for_upload_ind5] [decimal](20, 4) NULL,
	[member_count6] [decimal](20, 4) NULL,
	[member_months6] [decimal](20, 4) NULL,
	[allowed_amount6] [decimal](20, 4) NULL,
	[avg_risk_score6] [decimal](20, 4) NULL,
	[avg_risk_score_for_upload_ind6] [decimal](20, 4) NULL,
	[adj_allowed_PMPM6] [decimal](20, 4) NULL,
	[RA_PMPM6] [decimal](20, 4) NULL,
	[RA_PMPM_for_upload_ind6] [decimal](20, 4) NULL,
	[member_count7] [decimal](20, 4) NULL,
	[member_months7] [decimal](20, 4) NULL,
	[allowed_amount7] [decimal](20, 4) NULL,
	[avg_risk_score7] [decimal](20, 4) NULL,
	[avg_risk_score_for_upload_ind7] [decimal](20, 4) NULL,
	[adj_allowed_PMPM7] [decimal](20, 4) NULL,
	[RA_PMPM7] [decimal](20, 4) NULL,
	[RA_PMPM_for_upload_ind7] [decimal](20, 4) NULL,
	[member_count8] [decimal](20, 4) NULL,
	[member_months8] [decimal](20, 4) NULL,
	[allowed_amount8] [decimal](20, 4) NULL,
	[avg_risk_score8] [decimal](20, 4) NULL,
	[avg_risk_score_for_upload_ind8] [decimal](20, 4) NULL,
	[adj_allowed_PMPM8] [decimal](20, 4) NULL,
	[RA_PMPM8] [decimal](20, 4) NULL,
	[RA_PMPM_for_upload_ind8] [decimal](20, 4) NULL,
	[last_update_time] [datetime] NOT NULL
) ON [PRIMARY]




end/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/


GO
/****** Object:  StoredProcedure [dbo].[sp_certify_2_create_random_samples]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure   [dbo].[sp_certify_2_create_random_samples] 
/*****************************************************************************
 Description: 
    Common process of creation of random samples of members
	All common process happen in certification (results refreshed when a plan product is run)


 Parameters:
    schema_name - the plan product to run

 Return:

 Notes:

 Change History:
	2015-10-28 SL - initial version
	2016-08-01 SL - limit member pool to members that only have claims before ICD-10 in practice for CY2015
	2016-08-16 SL - limit to HOME members after including OOA data
	2017-11-28 SL - convert %schema_name%.random_members_pool to one table to reduce number of tables
	2018-01-16 SL - remove select top 100 % from step when create table temp_order_random_numbers, seems to not insert correctly
	2018-01-17 SL - handle BCBS FL custom request here, only select own data
 
*****************************************************************************/
                                     @p_schema_name    varchar(50) = null
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = '@p_schema_name'
	SET @Logging_Values = ISNULL(CAST(@p_schema_name AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/


begin

SET NOCOUNT ON

  declare
	@schema_name              varchar(255),
	@dynSQL					 nvarchar(max)

  declare cur_schema cursor for
	select 
		schema_name
	from process.data_status_tracking
	  where include_in_uds_pmpm = 1 
	  --and pdr_product_id in ('TNL2','TNB2')
	  and schema_name = isnull(@p_schema_name, schema_name)
	  order by case when chp_carrier_id in (895, 881, 885, 887) then 9999 else chp_carrier_id end



  open cur_schema
  fetch next from cur_schema into @schema_name

  while ( @@FETCH_STATUS = 0 )
    begin

begin try
	  print 'BEGIN creating random samples '+@schema_name

--1. select distinct members from a plan
if object_id ('certification.members_pool', 'U') is not null
drop table certification.members_pool;



if @schema_name not in ('p899_FLB1','p899_FLL2')
begin
	set @dynSQL = replace('
	select
		identity (int,1,1) as row_id,
		chp_carrier_id,
		pdr_product_id,
		member_id
	into  certification.members_pool 
	from
	(select 
		chp_carrier_id,
		pdr_product_id,
		member_id
	from %schema_name%.proc_claims_diagnosis_code_50 a
	where flag_exclude_diagnosis_code = ''N''
	and exists (select * from %schema_name%.proc_membership_attributes_10_bracket_mapped   --08-16-16 limit to HOME members after include OOA data
	where member_id = a.member_id and home_hosted_indicator = ''HOME'')
	group by 
		chp_carrier_id,
		pdr_product_id,
		member_id
	) a;
','%schema_name%', @schema_name)
end


if @schema_name in ('p899_FLB1','p899_FLL2')
begin
	set @dynSQL = replace('
	select
		identity (int,1,1) as row_id,
		chp_carrier_id,
		pdr_product_id,
		member_id
	into certification.members_pool
	from
	(select 
		chp_carrier_id,
		pdr_product_id,
		member_id
	from %schema_name%.proc_claims_diagnosis_code_50 a
	where flag_exclude_diagnosis_code = ''N''
	and exists (select * from %schema_name%.proc_membership_attributes_10_bracket_mapped   --08-16-16 limit to HOME members after include OOA data
	where member_id = a.member_id and home_hosted_indicator = ''HOME'')
	and exists (select * from xClaims_2020CY.%schema_name%.stage_raw_membership
	where [BHI Carrier ID] = ''590'' and [Member ID] = a.member_id)      --2018-01-17 handle BCBS FL sample selection to their own data
	group by 
		chp_carrier_id,
		pdr_product_id,
		member_id
	) a;
','%schema_name%', @schema_name)
end

	exec sp_executesql @dynSQL
	print( @dynSQL)


--2. create pure random numbers
/*
create table certification.pure_random_numbers
(row_id	int,
pure_random	float);
*/

	truncate table certification.pure_random_numbers

	declare @member_count	int, @row	int

	select @member_count = max(row_id) from certification.members_pool

	set @row = 1

	while (@row < = @member_count)
	begin
		insert into certification.pure_random_numbers (row_id, pure_random) values (@row, rand())
		select @row = @row + 1
	end
	
--3. order the pure random numbers for random sampling

if object_id ('certification.temp_order_random_numbers', 'U') is not null
drop table certification.temp_order_random_numbers;

	select
		identity (int,1,1) as random_order,
		x.*
	into certification.temp_order_random_numbers
	from certification.pure_random_numbers x
	order by pure_random asc


--4. insert into a table for each plan with all members with random numbers assigned

delete from certification.random_members_pool where 'p'+chp_carrier_id+'_'+pdr_product_id = @p_schema_name

insert into certification.random_members_pool with (tablock)
select
	a.row_id,
	p.chp_carrier_id,
	p.pdr_product_id,
	p.member_id,
	a.pure_random,
	b.random_order
from certification.pure_random_numbers a
join
certification.temp_order_random_numbers b
on b.row_id = a.row_id
join
certification.members_pool p
on p.row_id = a.row_id;


  	  print 'END randomization '+@schema_name


end try

BEGIN CATCH
    -- Execute the error retrieval routine.
    EXECUTE log.usp_GetErrorInfo;
END CATCH

	  fetch next from cur_schema into @schema_name

    end

  close cur_schema
  deallocate cur_schema

end 


/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/


GO
/****** Object:  StoredProcedure [dbo].[sp_certify_3_create_detail_member_records]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_certify_3_create_detail_member_records] 
/*****************************************************************************
 Description: 
    Common process of creation of 500 detail member records
	Run in each schema


 Parameters:
    schema_name - the plan product to run

 Return:

 Notes:

 Change History:
	2015-10-28 SL - initial version
	2015-10-30 SL - change source_table 'CDR' to 'Original'
	2016-07-19 SL - remove source_table field
                    remove flag_not_used_diag_code = ''N'' where clause, duplicated
	2016-07-27 SL - insert into one table, in stead of prior in each schema
	2016-08-04 SL - add carrier_group_code, plan_name and uds_prod_ind
	2018-07-05 SL - change main table to include Compound CCS conditions
	2020-07-29 TK - Change to reflect CCSR conditions
	2020-07-29 TK - Applied uds_pmpm_exclusion_flag
 
*****************************************************************************/
                                     @p_schema_name    varchar(50) = null
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = '@p_schema_name'
	SET @Logging_Values = ISNULL(CAST(@p_schema_name AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/


begin



if @p_schema_name is null
begin
truncate table certification.plan_certify_detail_members_00;
end

if @p_schema_name is not null
begin
delete from certification.plan_certify_detail_members_00 where 'p'+chp_carrier_id+'_'+pdr_product_id = @p_schema_name
end


  declare
	@schema_name              varchar(255),
	@dynSQL					 nvarchar(max)

  declare cur_schema cursor for
	select 
		schema_name
	from process.data_status_tracking
	  where include_in_uds_pmpm = 1 
	  and schema_name = isnull(@p_schema_name, schema_name)
	  order by case when chp_carrier_id in (895, 881, 885, 887) then 9999 else chp_carrier_id end



  open cur_schema
  fetch next from cur_schema into @schema_name

  while ( @@FETCH_STATUS = 0 )
    begin

begin try
	  print 'BEGIN detail member records '+@schema_name

set @dynSQL = replace('
;with detail_member_diag_cond_risk_score as
(
select 
	d.chp_carrier_id,
	d.pdr_product_id,
	d.member_id,
	r.gender_age_bracket,
	m.duration_bracket,
	d.diagnosis_code as submitted_diagnosis_code,
	d.ccsr_category_code,
	d.flag_dup_member_condition,
	RF_AG.risk_factor   as risk_factor_age_gender,
	coalesce(RF_CCSR.risk_factor,0) as risk_factor_ccsr
from %schema_name%.proc_claims_diagnosis_code_50 d    
left join
%schema_name%.proc_membership_attributes_10_bracket_mapped m
on m.member_id = d.member_id
left join
reference.ref_risk_factor_ccsr RF_CCSR
on RF_CCSR.cond_code = d.ccsr_category_code
and RF_CCSR.duration_bracket = m.duration_bracket
left join
reference.ref_risk_factor_age_gender RF_AG
on RF_AG.age_bracket = m.age_bracket
and RF_AG.gender = m.member_gender
and RF_AG.duration_bracket = m.duration_bracket
left join
reference.ref_report_gender_bracket_desc r
on r.member_gender = m.member_gender
and r.age_bracket = m.age_bracket
where flag_exclude_diagnosis_code = ''N''
and uds_pmpm_exclusion_flag=''N'')
insert into certification.plan_certify_detail_members_00 with (tablock)
select
	a.chp_carrier_id,
	a.pdr_product_id,
	a.member_id,
	gender_age_bracket,
	duration_bracket,
	submitted_diagnosis_code,
	ccsr_category_code,
	flag_dup_member_condition,
	risk_factor_age_gender,
	risk_factor_ccsr
from detail_member_diag_cond_risk_score a
join
certification.random_members_pool R
on R.chp_carrier_id = a.chp_carrier_id
and R.pdr_product_id = a.pdr_product_id
and R.member_id = a.member_id
where R.random_order <=450;

','%schema_name%', @schema_name)


	exec sp_executesql @dynSQL

  	  print 'END detail member records '+@schema_name

end try

BEGIN CATCH
    -- Execute the error retrieval routine.
    EXECUTE log.usp_GetErrorInfo;
END CATCH

	  fetch next from cur_schema into @schema_name

    end

  close cur_schema
  deallocate cur_schema







end 


/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/


GO
/****** Object:  StoredProcedure [dbo].[sp_certify_4_create_risk_score_summary_reports]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_certify_4_create_risk_score_summary_reports] 
/*****************************************************************************
 Description: 
    Common process of creation of four summary reports
	Run in each schema


 Parameters:
    schema_name - the plan product to run

 Return:

 Notes:

 Change History:
	2015-10-29 SL - initial version
	2016-07-22 SL - add with (tablock) when insert
	2016-08-10 SL - limit to Home members
 CY2016 Lindsey recommend changes to the Risk Score Summary for certification
	11/10/2017				TKalejaiye				pull average total risk score for year over year comparison.
	11/13/2017				TKalejaiye				Calculating % Member months and risk score by age and gender. 
	2017-11-28 SL - integrate into SP
	2017-12-01 SL - add Avg # of Dx Codes in risk score
	2017-12-14 SL - exclude Unknown Gender in age gender report, caused issue of duplicated TOTAL rows
	2018-01-11 SL - handle NULL of PR dx code % by coalesce with zero, seems database update impacts null vs 0
	2018-07-05 SL - revise for CY17
	2018-07-10 SL - expand Year over Year comparison for Internal Review and custom for Anthem (code rewrite)
	2019-07-09 TK -- deleted code with before prev upload that joined to the exclusion_pre table. The exclusion flag is already in the data, don't see the need for the join
	2019-07-09 TK-- Edited the previous code after the current code. Changed the exclusion flag to reflect what is in the proc_membership_ccs_conditions_20_member_risk_score tables for both current and previous

*****************************************************************************/
                                     @p_schema_name    varchar(50) = NULL
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = '@p_schema_name'
	SET @Logging_Values = ISNULL(CAST(@p_schema_name AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/


begin

SET NOCOUNT OFF

if @p_schema_name is null
begin
truncate table certification.plan_certify_summary_risk_score_YOY_zip3_proc_20_Mkt_St_pivot;
truncate table certification.plan_certify_summary_age_gender_30;
truncate table certification.plan_certify_summary_dx_code_20_comparison;
end

if @p_schema_name is not null 
begin 

delete from certification.plan_certify_summary_risk_score_YOY_zip3_proc_20_Mkt_St_pivot where 'p'+chp_carrier_id+'_'+pdr_product_id = ''+@p_schema_name+''
delete from certification.plan_certify_summary_age_gender_30 where 'p'+chp_carrier_id+'_'+pdr_product_id = ''+@p_schema_name+''
delete from certification.plan_certify_summary_dx_code_20_comparison where 'p'+chp_carrier_id+'_'+pdr_product_id = ''+@p_schema_name+''


end 


  declare
	@schema_name              varchar(255),
	@dynSQL					 nvarchar(max),
	@carrier_group_code        varchar(50)

  declare cur_schema cursor for
	select 
		schema_name, carrier_group_code
	from process.data_status_tracking
	  where include_in_uds_pmpm = 1 
	   --and flag_certification = 'Y'
	   --and pdr_product_id in ('TNL2','TNB2') 
	  and schema_name = isnull(@p_schema_name, schema_name)
	  order by case when chp_carrier_id in (895, 881, 885, 887) then 9999 else chp_carrier_id end



  open cur_schema
  fetch next from cur_schema into @schema_name, @carrier_group_code

  while ( @@FETCH_STATUS = 0 )
    begin

begin try
	  print 'BEGIN risk score summary '+@schema_name

--Risk Score Comparirion to Prior Upload
--CHP Market Level


declare 
	@database_prior varchar(25) = 'xUDS_PMPM_2019CY' -- update database to prior


DELETE from certification.plan_certify_summary_risk_score_YOY_zip3_proc_00_mbr where concat('p',chp_carrier_id,'_', pdr_product_id)=''+@schema_name+''
DELETE from certification.plan_certify_summary_risk_score_YOY_zip3_proc_00_clm where concat('p',chp_carrier_id,'_', pdr_product_id)=''+@schema_name+''

set @dynSQL = replace('
insert into certification.plan_certify_summary_risk_score_YOY_zip3_proc_00_mbr with (tablock)
select 
	''Pre'' as upload_indicator
	,pdr_product_id
	,chp_carrier_id
	,zip3 
	,case when enrollment_months >= 7 then ''Y'' else ''N'' end as flag_duration_7_plus
	,flag_exclude_fully_insured
	,uds_pmpm_exclusion_flag
	,flag_exclude_groups
	,cast(count(member_id) as numeric)     as member_count
	,sum(enrollment_months)                as member_months
    ,sum(risk_factor_tot)                  as risk_factor_tot  --filler field. Duplicated on purpose to have # of fields  be the same between current  and prior due to insert into same table. 
	,sum(risk_factor_tot)                  as risk_factor_tot2  --CY19 risk score using CY19 data but # of fields  be the same between current and prior due to insert into same table. 
from  '+ CHAR(13)+CHAR(10) + 
case when @schema_name in ('p918_OKL8','p893_AZL1') then '%schema_name%.proc_membership_ccsr_conditions_20_member_risk_score'--No hx data for these plans for comparison, so using current tables. If there are no new plans for CY21, case when statement shoud be removed. 
     else +@database_prior+'.%schema_name%.proc_membership_ccs_conditions_20_member_risk_score' end +' '+ CHAR(13)+CHAR(10) +--Table name will be ccsr for the CY21 process
''+ CHAR(13)+CHAR(10) +
'where home_hosted_indicator=''HOME'' 
group by 
	 chp_carrier_id
	,pdr_product_id
	,zip3
	,case when enrollment_months >= 7 then ''Y'' else ''N'' end
	,flag_exclude_fully_insured
	,uds_pmpm_exclusion_flag
	,flag_exclude_groups

--Current Upload
insert into certification.plan_certify_summary_risk_score_YOY_zip3_proc_00_mbr with (tablock)
select 
	''Cur'' as upload_indicator
	,pdr_product_id
	,chp_carrier_id
	,zip3 
	,case when enrollment_months >= 7 then ''Y'' else ''N'' end as flag_duration_7_plus
	,flag_exclude_fully_insured
	,uds_pmpm_exclusion_flag
	,flag_exclude_groups
	,cast(count(member_id) as numeric)     as member_count
	,sum(enrollment_months)                as member_months
	,sum(risk_factor_tot_UDS_Prev)         as risk_factor_tot       '+ CHAR(13)+CHAR(10) +  ---risk score CY19 using CY20 data.
	',sum(risk_factor_tot)                  as risk_factor_tot2       '+ CHAR(13)+CHAR(10) +---risk score for CY20
'from %schema_name%.proc_membership_ccsr_conditions_20_member_risk_score 
where home_hosted_indicator=''HOME''
and zip_exclusion_flag =''N''
group by 
	 chp_carrier_id
	,pdr_product_id
	,zip3
	,case when enrollment_months >= 7 then ''Y'' else ''N'' end
	,flag_exclude_fully_insured
	,uds_pmpm_exclusion_flag
	,flag_exclude_groups
	
	
insert into certification.plan_certify_summary_risk_score_YOY_zip3_proc_00_clm with (tablock)
select 
	''Pre''  as upload_indicator
	,pdr_product_id
	,chp_carrier_id
	,zip3 
	,case when duration_bracket in (''07-09'', ''10-11'', ''12'') then ''Y'' else ''N'' end as flag_duration_7_plus
	,flag_exclude_fully_insured
	,uds_pmpm_exclusion_flag
	,flag_exclude_groups
	,sum(allowed_amount_uds_pmpm) as allowed_amount
	,sum(RnC_cutback_amount) as RnC_cutback_amount
	,sum([Allowed Amount (Set to Billed in INN/ONN)]) as adjusted_allowed_amount
from  '+ CHAR(13)+CHAR(10) + 
case when @schema_name in ('p918_OKL8','p893_AZL1') then '%schema_name%.vw_proc_claims_financial_20_detail' --No hx data for these plans for comparison, so using current tables. If there are no new plans for CY21, case when statement shoud be removed.
     else +@database_prior+'.%schema_name%.vw_proc_claims_financial_20_detail' end +'
'+ CHAR(13)+CHAR(10) +
'where home_hosted_indicator=''HOME'' 
and exclusion_flag = ''N''
and exclude_medical_benefit_flag = ''N''

group by 
	chp_carrier_id
	,pdr_product_id
	,zip3
	,case when duration_bracket in (''07-09'', ''10-11'', ''12'') then ''Y'' else ''N'' end
	,flag_exclude_fully_insured
	,uds_pmpm_exclusion_flag
	,flag_exclude_groups


--Current Upload
insert into certification.plan_certify_summary_risk_score_YOY_zip3_proc_00_clm with (tablock)
select 
	''Cur'' as upload_indicator,
	pdr_product_id
	,chp_carrier_id
	,zip3 
	,case when duration_bracket in (''07-09'', ''10-11'', ''12'') then ''Y'' else ''N'' end as flag_duration_7_plus
	,flag_exclude_fully_insured
	,uds_pmpm_exclusion_flag
	,flag_exclude_groups
	,sum(allowed_amount_uds_pmpm) as allowed_amount
	,sum(RnC_cutback_amount) as RnC_cutback_amount
	,sum([Allowed Amount (Set to Billed in INN/ONN)]) as adjusted_allowed_amount
from %schema_name%.vw_proc_claims_financial_20_detail 
where home_hosted_indicator=''HOME'' 
and exclusion_flag = ''N''
and exclude_medical_benefit_flag = ''N''
and zip_exclusion_flag =''N''                    '+ CHAR(13)+CHAR(10) +---new in CY20 (affects only Carefirst)
'group by  
	chp_carrier_id
	,pdr_product_id
	,zip3
	,case when duration_bracket in (''07-09'', ''10-11'', ''12'') then ''Y'' else ''N'' end
	,flag_exclude_fully_insured
	,uds_pmpm_exclusion_flag
	,flag_exclude_groups
	,zip_exclusion_flag

','%schema_name%', @schema_name)

print (@dynsql)
exec sp_executesql @dynSQL


-------DELETE COMMENTED OUT CODE BELOW IN CY21--------------------------------------------------------------------------------------------------------

/*Only needed for CY20. Plan changed product name from OKLB to OKL3. Since we pull previous data, the pdr has to match the current data*/
--update certification.plan_certify_summary_risk_score_YOY_zip3_proc_00_mbr
--set pdr_product_id='OKL3'
--where pdr_product_id='OKLB'

--update certification.plan_certify_summary_risk_score_YOY_zip3_proc_00_clm
--set pdr_product_id='OKL3'
--where pdr_product_id='OKLB'

--select  pdr_product_id,upload_indicator,allowed_amount from certification.plan_certify_summary_risk_score_YOY_zip3_proc_00_clm
--where zip3=193
--and pdr_product_id in ('PAB6','DEB1','PAB1','PAL6')
-------------------------------------------------------------------------------------------------------------------------------------------





/****************************************************************************************************************************************/
	

--join member and claims together
--filter to data sets


drop table if exists certification.plan_certify_summary_risk_score_YOY_zip3_proc_10_mbr_clm


;with base_data as
(
select 
	a.*,
	b.allowed_amount,
	b.RnC_cutback_amount,
	b.adjusted_allowed_amount
from certification.plan_certify_summary_risk_score_YOY_zip3_proc_00_mbr a
left join
certification.plan_certify_summary_risk_score_YOY_zip3_proc_00_clm b
on b.upload_indicator = a.upload_indicator
and b.chp_carrier_id = a.chp_carrier_id
and b.pdr_product_id = a.pdr_product_id
and b.zip3 = a.zip3
and b.flag_duration_7_plus = a.flag_duration_7_plus
and b.flag_exclude_fully_insured = a.flag_exclude_fully_insured
and b.uds_pmpm_exclusion_flag=a.uds_pmpm_exclusion_flag
and a.flag_exclude_groups =b.flag_exclude_groups
)
--1,2 --all data
--3,4--uds exclusion
--5 ,6 - all data and duration flag to 7 or greater
--7,8--- uds exclusion and duration flag to 7 or greater

 ---all, current
select  
	1 as data_set,
	*
into certification.plan_certify_summary_risk_score_YOY_zip3_proc_10_mbr_clm
from base_data
where upload_indicator = 'Pre'
union all
select
	2 as data_set,
	*
from base_data
where upload_indicator = 'Cur'
union all

--3,4, uds exclusion
select 
	3 as data_set,
	*
from base_data 
where upload_indicator = 'Pre'
and uds_pmpm_exclusion_flag = 'N' 

union all
select 
	4 as data_set,
	*
from base_data 
where upload_indicator = 'Cur'
and uds_pmpm_exclusion_flag = 'N'

union all
select ---all, current
	5 as data_set,
	*
from base_data
where upload_indicator = 'Pre'
and flag_duration_7_plus = 'Y'

--5 ,6 - all data and duration flag to 7 or greater
union all
select 
	6 as data_set,
	*
from base_data
where upload_indicator = 'Cur'
and flag_duration_7_plus = 'Y'
union all

--7,8--- uds exclusion and duration flag to 7 or greater
select 
	7 as data_set,
	*
from base_data 
where upload_indicator = 'Pre'
and uds_pmpm_exclusion_flag = 'N' 
and flag_duration_7_plus = 'Y'

union all
select 
	8 as data_set,
	*
from base_data 
where upload_indicator = 'Cur'
and uds_pmpm_exclusion_flag = 'N'
and flag_duration_7_plus = 'Y'





--aggregate to proper level

drop table if exists certification.plan_certify_summary_risk_score_YOY_zip3_proc_20_Mkt_St
select 
	data_set,
	upload_indicator,
	chp_carrier_id,
	pdr_product_id,
	case when z.chp_market_subsection_code is not null then 25 else 10 end as data_type_code,
	isnull(z.[chp_market_subsection_code], 'Statewide') as [Market Code],
    isnull(z.[chp_market_subsection_name], 'Statewide') as [Market],
	sum(member_count) as member_count,
	sum(member_months) as member_months,
	sum(risk_factor_tot) as risk_factor_tot,
	sum(risk_factor_tot2) as risk_factor_tot_current_for_upload_ind,
	sum(allowed_amount) as allowed_amount,
	sum(RnC_cutback_amount) as RnC_cutback_amount,
	sum(adjusted_allowed_amount) as adjusted_allowed_amount
into certification.plan_certify_summary_risk_score_YOY_zip3_proc_20_Mkt_St
from certification.plan_certify_summary_risk_score_YOY_zip3_proc_10_mbr_clm a
left join 
[QDS].[sliang].[chp_markets] z
on a.zip3=z.zip_3_code
and z.chp_market_type_code= '25'
group by  grouping sets
(
	(data_set,
	upload_indicator,
	chp_carrier_id,
	pdr_product_id),
	(data_set,
	upload_indicator,
	chp_carrier_id,
	pdr_product_id,
	z.chp_market_subsection_code,
	z.chp_market_subsection_name)
	)

--unpivot and pivot

drop table if exists certification.plan_certify_summary_risk_score_YOY_zip3_proc_20_Mkt_St_unpivot
select
	chp_carrier_id,
	pdr_product_id,
	data_type_code,
	[Market Code],
	Market,
	col+cast(data_set as varchar(5)) as col,
	value
into certification.plan_certify_summary_risk_score_YOY_zip3_proc_20_Mkt_St_unpivot
from
(select 
	data_set,
	chp_carrier_id,
	pdr_product_id,
	data_type_code,
	[Market Code],
	Market,
	cast(member_count as decimal(20,4)) as member_count,
	cast(member_months as decimal(20,4)) as member_months,
	cast(allowed_amount as decimal (20,4)) as allowed_amount,
	cast(risk_factor_tot/member_count as decimal(20,4)) as avg_risk_score, 
	cast(risk_factor_tot_current_for_upload_ind/member_count as decimal(20,4)) as avg_risk_score_for_upload_ind,
	cast(allowed_amount/member_months as decimal(20,4)) as adj_allowed_PMPM,
	cast(allowed_amount*member_count/(member_months*risk_factor_tot) as decimal(20,4)) as RA_PMPM,
	cast(allowed_amount*member_count/(member_months*risk_factor_tot_current_for_upload_ind) as decimal(20,4)) as RA_PMPM_for_upload_ind 
from certification.plan_certify_summary_risk_score_YOY_zip3_proc_20_Mkt_St) src
unpivot
(value 
for col in (member_count, member_months, allowed_amount,avg_risk_score,avg_risk_score_for_upload_ind ,adj_allowed_PMPM,RA_PMPM,RA_PMPM_for_upload_ind)) unpiv

--collect final results
--truncate table   certification.plan_certify_summary_risk_score_YOY_zip3_proc_20_Mkt_St_pivot;
insert into certification.plan_certify_summary_risk_score_YOY_zip3_proc_20_Mkt_St_pivot with (tablock)
select distinct
	chp_carrier_id,
	pdr_product_id,
	data_type_code,
	[Market Code],
	Market,
	member_count1,
	member_months1,
	allowed_amount1,
	avg_risk_score1,
	avg_risk_score_for_upload_ind1,
	adj_allowed_PMPM1,
	RA_PMPM1,
	RA_PMPM_for_upload_ind1,
	member_count2,
	member_months2,
	allowed_amount2,
	avg_risk_score2,
	avg_risk_score_for_upload_ind2,
	adj_allowed_PMPM2,
	RA_PMPM2,
	RA_PMPM_for_upload_ind2,
	member_count3,
	member_months3,
	allowed_amount3,
	avg_risk_score3,
	avg_risk_score_for_upload_ind3,
	adj_allowed_PMPM3,
	RA_PMPM3,
	RA_PMPM_for_upload_ind3,
	member_count4,
	member_months4,
	allowed_amount4,
	avg_risk_score4,
	avg_risk_score_for_upload_ind4,
	adj_allowed_PMPM4,
	RA_PMPM4,
	RA_PMPM_for_upload_ind4,
	member_count5,
	member_months5,
	allowed_amount5,
	avg_risk_score5,
	avg_risk_score_for_upload_ind5,
	adj_allowed_PMPM5,
	RA_PMPM5,
	RA_PMPM_for_upload_ind5,
	member_count6,
	member_months6,
	allowed_amount6,
	avg_risk_score6,
	avg_risk_score_for_upload_ind6,
	adj_allowed_PMPM6,
	RA_PMPM6,
	RA_PMPM_for_upload_ind6,
	member_count7,
	member_months7,
	allowed_amount7,
	avg_risk_score7,
	avg_risk_score_for_upload_ind7,
	adj_allowed_PMPM7,
	RA_PMPM7,
	RA_PMPM_for_upload_ind7,
	member_count8,
	member_months8,
	allowed_amount8,
	avg_risk_score8,
	avg_risk_score_for_upload_ind8,
	adj_allowed_PMPM8,
	RA_PMPM8,
	RA_PMPM_for_upload_ind8,
	getdate() as last_update_time
from certification.plan_certify_summary_risk_score_YOY_zip3_proc_20_Mkt_St_unpivot src
pivot
(max(value)
for col in (member_count1,
member_months1,
allowed_amount1,
avg_risk_score1,
avg_risk_score_for_upload_ind1,
adj_allowed_PMPM1,
RA_PMPM1,
RA_PMPM_for_upload_ind1,
member_count2,
member_months2,
allowed_amount2,
avg_risk_score2,
avg_risk_score_for_upload_ind2,
adj_allowed_PMPM2,
RA_PMPM2,
RA_PMPM_for_upload_ind2,
member_count3,
member_months3,
allowed_amount3,
avg_risk_score3,
avg_risk_score_for_upload_ind3,
adj_allowed_PMPM3,
RA_PMPM3,
RA_PMPM_for_upload_ind3,
member_count4,
member_months4,
allowed_amount4,
avg_risk_score4,
avg_risk_score_for_upload_ind4,
adj_allowed_PMPM4,
RA_PMPM4,
RA_PMPM_for_upload_ind4,
member_count5,
member_months5,
allowed_amount5,
avg_risk_score5,
avg_risk_score_for_upload_ind5,
adj_allowed_PMPM5,
RA_PMPM5,
RA_PMPM_for_upload_ind5,
member_count6,
member_months6,
allowed_amount6,
avg_risk_score6,
avg_risk_score_for_upload_ind6,
adj_allowed_PMPM6,
RA_PMPM6,
RA_PMPM_for_upload_ind6,
member_count7,
member_months7,
allowed_amount7,
avg_risk_score7,
avg_risk_score_for_upload_ind7,
adj_allowed_PMPM7,
RA_PMPM7,
RA_PMPM_for_upload_ind7,
member_count8,
member_months8,
allowed_amount8,
avg_risk_score8,
avg_risk_score_for_upload_ind8,
adj_allowed_PMPM8,
RA_PMPM8,
RA_PMPM_for_upload_ind8)) piv
where  'p'+chp_carrier_id+'_'+pdr_product_id =''+@schema_name+''



--age gender distribution --and risk scores
--members with no conditions

set @dynSQL = replace('

--pivoting by member_duration and calculating enrollment Totals by duration, gender and age into temp table

if object_id(''certification.plan_certify_summary_age_gender_00'') is not null
drop table certification.plan_certify_summary_age_gender_00

;with pvt
as
(Select pdr_product_id
      ,chp_carrier_id 
      ,member_gender
      ,age_bracket
	  ,[01-03] 
	  ,[04-06] 
	  ,[07-09] 
	  ,[10-11] 
	  ,[12]         
from 
(select pdr_product_id, chp_carrier_id, member_gender, age_bracket,duration_bracket, member_id
from %schema_name%.proc_membership_ccsr_conditions_20_member_risk_score
	where home_hosted_indicator=''home''
	and member_gender <> ''U''
	and uds_pmpm_exclusion_flag =''N'' 
	and zip_exclusion_flag =''N''
	) as A
pivot (count(member_id) for duration_bracket in ([01-03] ,[04-06],[07-09],[10-11],[12])) as pvt)

Select  pdr_product_id
       ,chp_carrier_id
       ,Member_gender
       ,age_bracket
	  ,[01-03]   as [1 to 3] 
	  ,[04-06]   as [4 to 6]
	  ,[07-09]   as [7 to 9]
	  ,[10-11]   as [10 to 11] 
	  ,[12]      as [12]	
into certification.plan_certify_summary_age_gender_00
from  pvt 
group by  pdr_product_id
         ,chp_carrier_id
         ,Member_gender
        ,age_bracket
		,[01-03] 
	    ,[04-06] 
	    ,[07-09] 
	    ,[10-11] 
		,[12] 
union all
Select  pdr_product_id
       ,chp_carrier_id
        ,''TOTAL''
        ,''TOTAL''
	    ,sum([01-03]) as [1 to 3] 
	    ,sum([04-06]) as [4 to 6]
	    ,sum([07-09]) as [7 to 9]
	    ,sum([10-11]) as [10 to 11] 
	    ,sum([12])    as [12]
from pvt
group by pdr_product_id
       ,chp_carrier_id


----Calculating  risk score, member with no conditions and their totals 

if object_id(''certification.plan_certify_summary_age_gender_10'') is not null
drop table certification.plan_certify_summary_age_gender_10

Select a.pdr_product_id
       ,a.chp_carrier_id
       ,a.Member_gender
       ,a.age_bracket	 
	   ,isnull(sum(a.risk_factor_tot),0)                                                as [Total Risk Score]
	   ,isnull(cast(count(*) as numeric),0)                                             as [Member Count]
	   ,isnull(cast(sum(a.risk_factor_tot)/count(a.member_id)as numeric (36,4)),0)      as [Average Risk Score Total]
	   ,isnull(1.0*(count(case when a.risk_factor_ccsr = 0 then ''1''end))/count(*),0)     as [Members with No Conditions]
into certification.plan_certify_summary_age_gender_10
from %schema_name%.proc_membership_ccsr_conditions_20_member_risk_score a
where a.home_hosted_indicator=''home''
and member_gender <> ''U''
and uds_pmpm_exclusion_flag =''N'' 
and zip_exclusion_flag =''N''
group by  a.pdr_product_id
         ,a.chp_carrier_id
         ,a.Member_gender
         ,a.age_bracket
union all
Select  a.pdr_product_id
       ,a.chp_carrier_id
       ,''TOTAL''
       ,''TOTAL''	 
	   ,isnull(sum(a.risk_factor_tot),0)                                                as [Total Risk Score]
	   ,isnull(cast(count(*) as numeric),0)                                             as [Member Count]
	   ,isnull(cast(sum(a.risk_factor_tot)/count(a.member_id) as numeric (36,4)),0)      as [Average Risk Score Total]
	   ,isnull(1.0*(count(case when a.risk_factor_ccsr = 0 then ''1'' end))/count(*),0)    as [Members with No Conditions]
from %schema_name%.proc_membership_ccsr_conditions_20_member_risk_score a
where a.home_hosted_indicator=''home''
and uds_pmpm_exclusion_flag =''N'' 
and member_gender <> ''U''
and zip_exclusion_flag =''N''
group by a.pdr_product_id
         ,a.chp_carrier_id;



--------------Final Table--------------

insert into certification.plan_certify_summary_age_gender_30 with (tablock)
select a.pdr_product_id
      ,a.chp_carrier_id
      ,case a.member_gender when ''M'' then ''Male'' + '' Age ''+ a.age_bracket
	        when  ''F'' then ''Female'' + '' Age ''+ a.age_bracket 
			else ''Total'' end  as [Age/Gender Catgory]
      ,[1 to 3] 
	  ,[4 to 6]
	  ,[7 to 9]
	  ,[10 to 11] 
	  ,[12]
	  ,a.[Member Count]/sum(a.[Total Sum]) over (partition by a.[pdr_product_id],a.[chp_carrier_id]) as [% Total (Percent)]
	  ,[Average Risk Score Total]
	  ,[Members with No Conditions] as [Members with No Conditions],
	  getdate() as update_time
from  
(Select *, case when age_bracket = ''TOTAL''  then [Member Count] end as [Total Sum]
from certification.plan_certify_summary_age_gender_10) a
join
(select * from certification.plan_certify_summary_age_gender_00) b
on a.pdr_product_id=b.pdr_product_id
and a.chp_carrier_id=b.chp_carrier_id
and a.member_gender=b.member_gender
and a.age_bracket=b.age_bracket

','%schema_name%', @schema_name)

	exec sp_executesql @dynSQL
	print @dynsql

/*	
--dx code distribution exhibit


---------------uncomment, make updates to run in previous upload and run once to store the data in tables and comment before running as a stored procedure------------------------------------

----------------------------------------------Prior Upload------------------------



drop table certification.plan_certify_summary_dx_code_10_prior_all_plans
;with Diagnosis_Prior
as
(
  select  a.[pdr_product_id]
        ,a.[chp_carrier_id]
		,a.[claim_type]
        ,a.[primary_diagnosis_code]
        ,a.[diagnosis_code_2]
        ,a.[diagnosis_code_3]
        ,a.[diagnosis_code_4]
        ,a.[diagnosis_code_5]
        ,a.[diagnosis_code_6]
        ,a.[diagnosis_code_7]
        ,a.[diagnosis_code_8]
        ,a.[diagnosis_code_9]
	    ,(select count(*)
	     from (values (a.[primary_diagnosis_code])
                     ,(a.[diagnosis_code_2])
					 ,(a.[diagnosis_code_3])
					 ,(a.[diagnosis_code_4])
					 ,(a.[diagnosis_code_5])
					 ,(a.[diagnosis_code_6])
					 ,(a.[diagnosis_code_7])
					 ,(a.[diagnosis_code_8])
					 ,(a.[diagnosis_code_9])) as v(col)
	     where v.col is not null and v.col like  '%[0-9]%[0-9]%') as Diagnosis_count
	     ,isnull(sum(a.[Allowed Amount (Set to Billed in INN/ONN)]),0) as [allowed amount]
  from 
  (select chp_carrier_id, pdr_product_id, claim_type, primary_diagnosis_code, diagnosis_code_2, diagnosis_code_3, diagnosis_code_4, 
  	case when claim_type = 'P' then null else diagnosis_code_5 end as diagnosis_code_5,
	case when claim_type = 'P' then null else diagnosis_code_6 end as diagnosis_code_6,
	case when claim_type = 'P' then null else diagnosis_code_7 end as diagnosis_code_7,
	case when claim_type = 'P' then null else diagnosis_code_8 end as diagnosis_code_8,
	case when claim_type = 'P' then null else diagnosis_code_9 end as diagnosis_code_9, 
  [Allowed Amount (Set to Billed in INN/ONN)]
from [xUDS_PMPM_2019CY].[all_plans].[vw_proc_claims_financial_20_detail_b4_exclusion]
	where home_hosted_indicator='home'
	 and [exclude_medical_benefit_flag]='N'
     and [flag_exclude_diagnosis_code]='N'
     and [exclusion_flag]='N'
	 and uds_pmpm_exclusion_flag ='N' 
	 and pdr_product_id <>'ARBD')a  ---remove this line of code when copying for CY21
  group by a.[pdr_product_id]
        ,a.[chp_carrier_id]
	    ,a.[claim_type]
        ,a.[primary_diagnosis_code]
        ,a.[diagnosis_code_2]
        ,a.[diagnosis_code_3]
        ,a.[diagnosis_code_4]
        ,a.[diagnosis_code_5]
        ,a.[diagnosis_code_6]
        ,a.[diagnosis_code_7]
        ,a.[diagnosis_code_8]
        ,a.[diagnosis_code_9]
)

select [pdr_product_id]
       ,[chp_carrier_id]
	   ,[diagnosis_count]
	   ,cast([IP]/SUM([IP]) OVER  (partition by [pdr_product_id],[chp_carrier_id])as decimal (20,4)) as [IP]
	   ,cast([OP]/SUM([OP]) OVER  (partition by [pdr_product_id],[chp_carrier_id])as decimal (20,4)) as [OP]
	   ,cast([PR]/SUM([PR]) OVER  (partition by [pdr_product_id],[chp_carrier_id])as decimal (20,4)) as [PR]
into certification.plan_certify_summary_dx_code_10_prior_all_plans 
from  (select [pdr_product_id]
      ,[chp_carrier_id]
	  ,[Diagnosis_count]
	  ,coalesce([I],0) as [IP]
	  ,coalesce([O],0) as [OP]
	  ,coalesce([P],0) as [PR]

   from( select  [pdr_product_id]
				,[chp_carrier_id]
				,[claim_type]
				,[Diagnosis_count]
				,[allowed amount]
          from  Diagnosis_Prior
          where [Diagnosis_count]>0) as b
pivot (sum([allowed amount]) for [claim_type] in ([I],[O],[P])) as p)a
group by [pdr_product_id]
       ,[chp_carrier_id]
	   ,[diagnosis_count]
	   ,[IP]
	   ,[OP]
	   ,[PR]

------ONLY NEEDED OFR CY20
UPDATE certification.plan_certify_summary_dx_code_10_prior_all_plans
SET pdr_product_id='OKL3'
WHERE pdr_product_id='OKLB'
-----------------------------------------------Prior Upload AVERAGE--------------------------
drop table certification.plan_certify_summary_dx_code_10_prior_average
;with Diagnosis_Prior_AVG
as
(
  select a.[claim_type]
        ,a.[primary_diagnosis_code]
        ,a.[diagnosis_code_2]
        ,a.[diagnosis_code_3]
        ,a.[diagnosis_code_4]
        ,a.[diagnosis_code_5]
        ,a.[diagnosis_code_6]
        ,a.[diagnosis_code_7]
        ,a.[diagnosis_code_8]
        ,a.[diagnosis_code_9]
	    ,(select count(*)
	     from (values (a.[primary_diagnosis_code])
                     ,(a.[diagnosis_code_2])
					 ,(a.[diagnosis_code_3])
					 ,(a.[diagnosis_code_4])
					 ,(a.[diagnosis_code_5])
					 ,(a.[diagnosis_code_6])
					 ,(a.[diagnosis_code_7])
					 ,(a.[diagnosis_code_8])
					 ,(a.[diagnosis_code_9])) as v(col)
	     where v.col is not null and v.col like  '%[0-9]%[0-9]%') as Diagnosis_count
	     ,isnull(sum(a.[Allowed Amount (Set to Billed in INN/ONN)]),0) as [allowed amount]
from
  (select chp_carrier_id, pdr_product_id, claim_type, primary_diagnosis_code, diagnosis_code_2, diagnosis_code_3, diagnosis_code_4, 
  	case when claim_type = 'P' then null else diagnosis_code_5 end as diagnosis_code_5,
	case when claim_type = 'P' then null else diagnosis_code_6 end as diagnosis_code_6,
	case when claim_type = 'P' then null else diagnosis_code_7 end as diagnosis_code_7,
	case when claim_type = 'P' then null else diagnosis_code_8 end as diagnosis_code_8,
	case when claim_type = 'P' then null else diagnosis_code_9 end as diagnosis_code_9, 
  [Allowed Amount (Set to Billed in INN/ONN)]
  from   [xUDS_PMPM_2019CY].[all_plans].[vw_proc_claims_financial_20_detail_b4_exclusion]
  where home_hosted_indicator='home'
	 and [exclude_medical_benefit_flag]='N'
     and [flag_exclude_diagnosis_code]='N'
     and [exclusion_flag]='N'
	 and uds_pmpm_exclusion_flag ='N' 
	 and pdr_product_id <>'ARBD')a  ---remove this line of code when copying for CY21
  group by a.[claim_type]
		  ,a.[primary_diagnosis_code]
          ,a.[diagnosis_code_2]
          ,a.[diagnosis_code_3]
          ,a.[diagnosis_code_4]
          ,a.[diagnosis_code_5]
          ,a.[diagnosis_code_6]
          ,a.[diagnosis_code_7]
          ,a.[diagnosis_code_8]
          ,a.[diagnosis_code_9]
)
select [diagnosis_count]
	   ,cast([IP]/SUM([IP]) OVER  ()as decimal (20,4)) as [IP]
	   ,cast([OP]/SUM([OP]) OVER  ()as decimal (20,4)) as [OP]
	   ,cast([PR]/SUM([PR]) OVER  ()as decimal (20,4)) as [PR]
into certification.plan_certify_summary_dx_code_10_prior_average
from
  (select [Diagnosis_count]
	  ,coalesce([I],0) as [IP]
	  ,coalesce([O],0) as [OP]
	  ,coalesce([P],0) as [PR]
  from
	( select [claim_type]
			,[Diagnosis_count]
			,[allowed amount]
	  from Diagnosis_Prior_AVG
		where [Diagnosis_count]>0) as b
pivot (sum([allowed amount]) for [claim_type] in ([I],[O],[P])) as p)a  
group by [diagnosis_count]
	   ,[IP]
	   ,[OP]
	   ,[PR]


   
--run each plan for the Current Upload and the final report

*/
set @dynSQL = replace('
------------------------------------------Current Upload -----------------------------

if object_id(''certification.plan_certify_summary_dx_code_00_current_plan'') is not null
drop table certification.plan_certify_summary_dx_code_00_current_plan

;with Diagnosis_Current
as
(
  select  a.[pdr_product_id]
        ,a.[chp_carrier_id]
		,a.[claim_type]
        ,a.[primary_diagnosis_code]
        ,a.[diagnosis_code_2]
        ,a.[diagnosis_code_3]
        ,a.[diagnosis_code_4]
        ,a.[diagnosis_code_5]
        ,a.[diagnosis_code_6]
        ,a.[diagnosis_code_7]
        ,a.[diagnosis_code_8]
        ,a.[diagnosis_code_9]
	    ,(select count(*)
	     from (values (a.[primary_diagnosis_code])
                     ,(a.[diagnosis_code_2])
					 ,(a.[diagnosis_code_3])
					 ,(a.[diagnosis_code_4])
					 ,(a.[diagnosis_code_5])
					 ,(a.[diagnosis_code_6])
					 ,(a.[diagnosis_code_7])
					 ,(a.[diagnosis_code_8])
					 ,(a.[diagnosis_code_9])) as v(col)
	     where v.col is not null and v.col like  ''%[0-9]%[0-9]%'') as Diagnosis_count
	     ,isnull(sum(a.[Allowed Amount (Set to Billed in INN/ONN)]),0) as [allowed amount]
from
  (select chp_carrier_id, pdr_product_id, claim_type, primary_diagnosis_code, diagnosis_code_2, diagnosis_code_3, diagnosis_code_4, 
  	case when claim_type = ''P'' then null else diagnosis_code_5 end as diagnosis_code_5,
	case when claim_type = ''P'' then null else diagnosis_code_6 end as diagnosis_code_6,
	case when claim_type = ''P'' then null else diagnosis_code_7 end as diagnosis_code_7,
	case when claim_type = ''P'' then null else diagnosis_code_8 end as diagnosis_code_8,
	case when claim_type = ''P'' then null else diagnosis_code_9 end as diagnosis_code_9, 
  [Allowed Amount (Set to Billed in INN/ONN)]
  from %schema_name%.vw_proc_claims_financial_20_detail
  where home_hosted_indicator=''home''
	 and [exclude_medical_benefit_flag]=''N''
     and [flag_exclude_diagnosis_code]=''N''
     and [exclusion_flag]=''N''
	 and uds_pmpm_exclusion_flag =''N''
	 and zip_exclusion_flag =''N'') a 
	
group by a.[pdr_product_id]
        ,a.[chp_carrier_id]
	    ,a.[claim_type]
        ,a.[primary_diagnosis_code]
        ,a.[diagnosis_code_2]
        ,a.[diagnosis_code_3]
        ,a.[diagnosis_code_4]
        ,a.[diagnosis_code_5]
        ,a.[diagnosis_code_6]
        ,a.[diagnosis_code_7]
        ,a.[diagnosis_code_8]
        ,a.[diagnosis_code_9]
)

select  [pdr_product_id]
       ,[chp_carrier_id]
	   ,[diagnosis_count]
	   ,cast([IP]/SUM([IP]) OVER  () as decimal (20,4)) as [IP]
	   ,cast([OP]/SUM([OP]) OVER  () as decimal (20,4)) as [OP]
	   ,cast([PR]/SUM([PR]) OVER  () as decimal (20,4)) as [PR]	
	into certification.plan_certify_summary_dx_code_00_current_plan
from  (select [pdr_product_id]
      ,[chp_carrier_id]
	  ,[Diagnosis_count]
	  ,coalesce([I],0) as [IP]
	  ,coalesce([O],0) as [OP]
	  ,coalesce([P],0) as [PR]


   from (select  [pdr_product_id]
				,[chp_carrier_id]
				,[claim_type]
				,[Diagnosis_count]
				,[allowed amount]
          from Diagnosis_Current
          where [Diagnosis_count]>0) as b
pivot (sum([allowed amount]) for [claim_type] in ([I],[O],[P])) as p)a
group by [pdr_product_id]
       ,[chp_carrier_id]
	   ,[diagnosis_count]
	   ,[IP]
	   ,[OP]
	   ,[PR]

	   
-------------------------------------------Current Plan Comparison -------------


if object_id(''certification.plan_certify_summary_dx_code_10_current_comparison'') is not null
drop table certification.plan_certify_summary_dx_code_10_current_comparison

select   a.[pdr_product_id]
        ,a.[chp_carrier_id]
		,a.[Number of Diagnosis Code]
		,a.[IP]
		,a.[OP]
		,a.[PR]
		,a.[IP Pre]
		,a.[OP Pre]
		,a.[PR Pre]
		,b.[IP AVG]
		,b.[OP AVG]
		,b.[PR AVG]
into certification.plan_certify_summary_dx_code_10_current_comparison
from 
(
(Select  a.[pdr_product_id]
        ,a.[chp_carrier_id]
		,a.[Diagnosis_count] as [Number of Diagnosis Code]
		,a.[IP]
		,a.[OP]
		,a.[PR]
		,b.[IP] as [IP Pre]
		,b.[OP] as [OP Pre]
		,b.[PR] as [PR Pre]
from certification.plan_certify_summary_dx_code_00_current_plan a
left join certification.plan_certify_summary_dx_code_10_prior_all_plans b
 on a.pdr_product_id=b.pdr_product_id
  and a.chp_carrier_id=b.chp_carrier_id
  and a.Diagnosis_count=b.Diagnosis_count) a

left join
(select  c.[Diagnosis_count]
        ,c.[IP] as [IP AVG]
		,c.[OP] as [OP AVG]
		,c.[PR] as [PR AVG]  
		from certification.plan_certify_summary_dx_code_10_prior_average as c) b
on a.[Number of Diagnosis Code]=b.[Diagnosis_count])



-------------------------------------------Final table-------------


insert into certification.plan_certify_summary_dx_code_20_comparison with (tablock)
select  
	pdr_product_id,
	chp_carrier_id,
	''Avg # of Dx Codes in risk score'' as [Number of Diagnosis Code],
	sum([Number of Diagnosis Code]*[IP]) as [IP],
	sum([Number of Diagnosis Code]*[OP]) as [OP],
	sum([Number of Diagnosis Code]*[PR]) as [PR],
	sum([Number of Diagnosis Code]*[IP Pre]) as [IP Pre],
	sum([Number of Diagnosis Code]*[OP Pre]) as [OP Pre],
	sum([Number of Diagnosis Code]*[PR Pre]) as [PR Pre],
	sum([Number of Diagnosis Code]*[IP AVG]) as [IP AVG],
	sum([Number of Diagnosis Code]*[OP AVG]) as [OP AVG],
	sum([Number of Diagnosis Code]*[PR AVG]) as [PR AVG],
	getdate()
from certification.plan_certify_summary_dx_code_10_current_comparison
group by 
	pdr_product_id,
	chp_carrier_id
union all
select 
	pdr_product_id,
	chp_carrier_id,
	cast([Number of Diagnosis Code] as varchar(50)) as [Number of Diagnosis Code],
	[IP],
	[OP],
	[PR],
	[IP Pre],
	[OP Pre],
	[PR Pre],
	[IP AVG],
	[OP AVG],
	[PR AVG],
	getdate()
from certification.plan_certify_summary_dx_code_10_current_comparison

','%schema_name%', @schema_name)

  --print  @dynSQL
	exec sp_executesql @dynSQL
	


--SELECT CAST('<root><![CDATA[' + @dynSQL + ']]></root>' AS XML)

  	  print 'END risk score summary '+@schema_name

end try

BEGIN CATCH
    -- Execute the error retrieval routine.
    EXECUTE log.usp_GetErrorInfo;
END CATCH

	  fetch next from cur_schema into @schema_name,@carrier_group_code

    end

  close cur_schema
  deallocate cur_schema


 
end 


/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/


GO
/****** Object:  StoredProcedure [dbo].[sp_certify_5_create_final_summary_reports]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_certify_5_create_final_summary_reports] 
/*****************************************************************************
 Description: 
    Common process of creation of four summary reports
	Run in each schema


 Parameters:
    schema_name - the plan product to run

 Return:

 Notes:

 Change History:
	2015-10-29 SL - initial version
	2015-11-02 SL - add plan wide risk score on age gender exhibit 1
	2016-07-27 SL - put the final summary data in one table, instead of each schema
	2016-08-03 SL - Add Diagnosis Code Distribution Exhibits
	2016-08-04 SL - add carrier_group_code, plan_name and uds_prod_ind
 CY2016
	2017-12-04 SL - revise based on CY2016 updates
 CY2017
	2018-07-10 SL - revise Year over Year comparison, adding Anthem custom
*****************************************************************************/
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = '@p_schema_name'
	SET @Logging_Values = ISNULL(CAST(NULL AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/


begin


/*******************************************
1. Risk Score Change by CHP Markets
*******************************************/

if object_id ('certification.plan_certify_summary_risk_score_YOY_final', 'U') is not null
drop table certification.plan_certify_summary_risk_score_YOY_final

select
	b.carrier_group_code, 
	cast(b.plan_name  as varchar(50)) as plan_name,
    cast(b.uds_prod_ind as varchar(50)) as uds_prod_ind,
	a.chp_carrier_id,
	a.pdr_product_id,
	a.data_type_code,
	a.[Market Code],
	a.Market,
	member_count3 as [Pre Member count],
	member_months3 as [Pre Member Months],
	avg_risk_score3 as [Pre Risk Score],
	member_count4 as [Cur Member count],
	member_months4 as [Cur Member Months],
	avg_risk_score4 as [Cur Risk Score],
	avg_risk_score_for_upload_ind4 as [CY2020 Risk Score],
	avg_risk_score4/nullif(avg_risk_score3,0)-1 as [% Change Risk Score],
	avg_risk_score_for_upload_ind4/nullif(avg_risk_score3,0)-1 as [CY2020 % Change Risk Score]
into certification.plan_certify_summary_risk_score_YOY_final
From certification.plan_certify_summary_risk_score_YOY_zip3_proc_20_Mkt_St_pivot a
left join
process.data_status_tracking b
on b.chp_carrier_id = a.chp_carrier_id
and b.pdr_product_id = a.pdr_product_id
--where b.flag_certification = 'Y'




IF EXISTS (SELECT name FROM sys.indexes
            WHERE name = N'IX_sum_risk_score_year_over_year' and OBJECT_SCHEMA_NAME(object_id) = 'certification' and OBJECT_NAME(object_id) = 'plan_certify_summary_risk_score_YOY_final') 
    DROP INDEX IX_sum_risk_score_year_over_year ON certification.plan_certify_summary_risk_score_YOY_final; 

-- Create a clustered index 
CREATE UNIQUE CLUSTERED INDEX IX_sum_risk_score_year_over_year 
    ON certification.plan_certify_summary_risk_score_YOY_final (plan_name, uds_prod_ind, data_type_code desc, Market);


/*******************************************
2. Member Details and Diagnosis Codes
*******************************************/

if object_id ('certification.plan_certify_detail_members_10', 'U') is not null
drop table certification.plan_certify_detail_members_10

select
	a.chp_carrier_id,
	a.pdr_product_id,
	b.carrier_group_code,
	cast(b.plan_name  as varchar(50)) as plan_name,
    cast(b.uds_prod_ind as varchar(50)) as uds_prod_ind,
	a.record_type,
	a.member_id,
	a.gender_age_bracket,
	a.duration_bracket,
	a.submitted_diagnosis_code,
	a.ccsr_category_code,
	a.flag_dup_member_condition,
	a.risk_score_age_gender,
	a.risk_score_ccsr,
	a.risk_score_tot
into certification.plan_certify_detail_members_10
from
(select
	chp_carrier_id,
	pdr_product_id,
	'Detail' as record_type,
	member_id,
	gender_age_bracket,
	duration_bracket,
	submitted_diagnosis_code,
	case when ccsr_category_code = '9999' then 'Not Mapped' else ccsr_category_code end as ccsr_category_code,
	flag_dup_member_condition,
	NULL as risk_score_age_gender,
	case when flag_dup_member_condition = 'N' then risk_factor_ccsr else null end as risk_score_ccsr,
	NULL as risk_score_tot
from certification.plan_certify_detail_members_00
union all
select
	chp_carrier_id,
	pdr_product_id,
	'Total' as record_type,
	member_id,
	gender_age_bracket,
	duration_bracket,
	NULL submitted_diagnosis_code,
	NULL ccs_category_code,
	NULL flag_dup_member_condition,
	max(risk_factor_age_gender) as risk_score_age_gender,
	sum(risk_factor_ccsr) as risk_score_ccs,
	max(risk_factor_age_gender)+sum(risk_factor_ccsr) as risk_score_tot
from certification.plan_certify_detail_members_00
where flag_dup_member_condition = 'N'
group by
	chp_carrier_id,
	pdr_product_id,
	member_id,
	gender_age_bracket,
	duration_bracket) a
left join
process.data_status_tracking b
on b.chp_carrier_id = a.chp_carrier_id
and b.pdr_product_id = a.pdr_product_id
--where b.flag_certification = 'Y'


--create clustered index

IF EXISTS (SELECT name FROM sys.indexes
            WHERE name = N'IX_mbr_report_type_diag' and OBJECT_SCHEMA_NAME(object_id) = 'certification' and OBJECT_NAME(object_id) = 'plan_certify_detail_members_10') 
    DROP INDEX IX_mbr_report_type_diag ON certification.plan_certify_detail_members_10; 

-- Create a clustered index 
CREATE UNIQUE CLUSTERED INDEX IX_mbr_report_type_diag 
    ON certification.plan_certify_detail_members_10 (plan_name, uds_prod_ind, record_type, ccsr_category_code, flag_dup_member_condition, submitted_diagnosis_code,member_id);


/*******************************************
3. age gender distribution and risk scores
All Members with % Members No Condition
*******************************************/

if object_id ('certification.plan_certify_summary_age_gender_final', 'U') is not null
drop table certification.plan_certify_summary_age_gender_final

select 
 b.carrier_group_code, 
    cast(b.plan_name  as varchar(50)) as plan_name,
    cast(b.uds_prod_ind as varchar(50)) as uds_prod_ind,
    a.chp_carrier_id,
    a.pdr_product_id,
    a.[Age/Gender Catgory]  as [Age/Gender Catgory],
    a.[1 to 3],
    a.[4 to 6],
    a.[7 to 9],
    a.[10 to 11],
    a.[12],
    a.[% Total (Percent)],
	a.[Average Risk Score Total],
	a.[Members with No Conditions]	
into certification.plan_certify_summary_age_gender_final
from certification.plan_certify_summary_age_gender_30 a
left join
process.data_status_tracking b
on b.chp_carrier_id = a.chp_carrier_id
and b.pdr_product_id = a.pdr_product_id
--where b.flag_certification = 'Y'


IF EXISTS (SELECT name FROM sys.indexes
            WHERE name = N'IX_sum_report_age_gender_final' and OBJECT_SCHEMA_NAME(object_id) = 'certification' and OBJECT_NAME(object_id) = 'plan_certify_summary_age_gender_final') 
    DROP INDEX IX_sum_report_age_gender_final ON certification.plan_certify_summary_age_gender_final; 

-- Create a clustered index 
CREATE UNIQUE CLUSTERED INDEX IX_sum_report_age_gender_final
    ON certification.plan_certify_summary_age_gender_final (plan_name, uds_prod_ind, [Age/Gender Catgory]);




/*******************************************
4. Dx Code Distribution
*******************************************/

if object_id ('certification.plan_certify_summary_dx_code_final', 'U') is not null
drop table certification.plan_certify_summary_dx_code_final

select 
	b.carrier_group_code, 
	cast(b.plan_name  as varchar(50)) as plan_name,
    cast(b.uds_prod_ind as varchar(50)) as uds_prod_ind,
	a.chp_carrier_id,
	a.pdr_product_id,
	a.[Number of Diagnosis Code],
	a.[IP],
	a.[OP],
	a.[PR],
	a.[IP Pre],
	a.[OP Pre],
	a.[PR Pre],
	a.[IP AVG],
	a.[OP AVG],
	a.[PR AVG]
into certification.plan_certify_summary_dx_code_final
from certification.plan_certify_summary_dx_code_20_comparison a
left join
 process.data_status_tracking  b
on b.chp_carrier_id = a.chp_carrier_id
and b.pdr_product_id = a.pdr_product_id
--where b.flag_certification = 'Y' --research for hcsc plans


IF EXISTS (SELECT name FROM sys.indexes
            WHERE name = N'IX_plan_certify_dx_code_final' and OBJECT_SCHEMA_NAME(object_id) = 'certification' and OBJECT_NAME(object_id) = 'plan_certify_summary_dx_code_final') 
    DROP INDEX IX_plan_certify_dx_code_final ON certification.plan_certify_summary_dx_code_final; 

-- Create a clustered index 
CREATE UNIQUE CLUSTERED INDEX IX_plan_certify_dx_code_final
    ON certification.plan_certify_summary_dx_code_final (plan_name, uds_prod_ind, [Number of Diagnosis Code]);



end 


/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/


GO
/****** Object:  StoredProcedure [dbo].[sp_certify_control_run]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_certify_control_run]

/*****************************************************************************
 Description: 
    This is the control center to run various steps
	By calling existing pre-packaged stored procedures
	
	Applying patch is control by a variable used in dbo.sp_source_claims_diagnosis_codes_with_patch


 Parameters:
    schema_name - the plan product to run and write intermediate results to

 Return:

 Notes:

 Change History:
	2016-08-16 SL - initial version
	2016-09-01 SL - add parameter so that could run one plan product
 
*****************************************************************************/
                                     @p_schema_name    varchar(50) = null								
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = ''
	SET @Logging_Values = ISNULL(CAST(null AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/

begin

declare
	@schema_name varchar(50)

declare cur_schema1 cursor local for
select schema_name from 
	process.data_status_tracking a
	where include_in_uds_pmpm = 1
	and flag_certification = 'Y' 
	and chp_carrier_id =899
	--and schema_name in ('p887_TXB1', 'p885_ILB1')
	--and exists (select * from INFORMATION_SCHEMA.tables where table_name = 'proc_membership_ccs_conditions_20_member_risk_score' and TABLE_SCHEMA = a.schema_name)
	 and schema_name = isnull(@p_schema_name, schema_name)

open cur_schema1

  fetch next from cur_schema1 into @schema_name

  while ( @@FETCH_STATUS = 0 )
    begin


		--if @schema_name is null
		--begin
		--exec [dbo].[sp_certify_1_create_data_tableshell]
		--end 


		exec [dbo].[sp_certify_2_create_random_samples] @p_schema_name =@schema_name 

		exec [dbo].[sp_certify_3_create_detail_member_records] @p_schema_name = @schema_name

		exec [dbo].[sp_certify_4_create_risk_score_summary_reports] @p_schema_name = @schema_name
		
		exec [dbo].[sp_certify_5_create_final_summary_reports]

fetch next from cur_schema1 into @schema_name


end

close cur_schema1
deallocate cur_schema1


end 

/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/




GO
/****** Object:  StoredProcedure [dbo].[sp_dedup_dx_code_claim_line]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_dedup_dx_code_claim_line]
/*****************************************************************************
 Description: 
    Common process of processing claims with financial data
	All common process happen in dbo (results refreshed when a plan product is run)


 Parameters:
    schema_name - the plan product to run


 Return:

 Notes:

 Change History:
	2017-04-04 SL - initial version
	2017-04-17 SL - run for the rest of the plans
	2017-05-05 SL - inclulde Host data and run for all plans as regular process
	2017-10-03 SL - add the analytic piece so we also known the scale of the duplicated dx codes and the validity of the dx codes
	2017-10-16 SL - revise to pull from vw_diagnosis_code_proc_00 due to standardization updates 684 ICD-CM codes for DRG Grouper
	2017-11-22 SL - revise to insert statistics into one table with timestamp
	2017-12-05 SL - revise the parameter for dedup dx code to @carrier_id_combo due to this is 
					input for the union view to re-assign products
	2018-02-13 SL - add CCI to table for performance
	2020-19-2020 TK- changed the view from vw_diagnosis_code_proc_00 to table diagnosis_code_proc_03 based on the changes I made to the dx SP
	              -- will be applying a dx truncated dx code patch for all plans in the sp_base_1_source_create_views_for_all_inputs sp, 
				    so creating tables to test the impact of the dx patch here 
 
*****************************************************************************/
                                     @p_carrier_id_combo    varchar(50) = null,
									 @p_create_CCI         varchar(50) = null
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = '@p_carrier_id_combo'
	SET @Logging_Values = ISNULL(CAST(@p_carrier_id_combo AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/
begin



declare @schema_name varchar(100),
	    @dynSQL nvarchar(max),
		@indexName varchar(255),
		@indexSQL nvarchar(max)



  declare cur_schema_1 cursor local for
	select 
		schema_name
	from process.data_status_tracking a
	  where include_in_uds_pmpm = 1
	  and carrier_id_combo = isnull(@p_carrier_id_combo, schema_name)
	

  open cur_schema_1
  fetch next from cur_schema_1 into @schema_name

  while ( @@FETCH_STATUS = 0 )
    begin



delete from process.dedup_dx_code_proc_30_invalid_stat
where 'p'+chp_carrier_id+'_'+pdr_product_id = @schema_name


delete from  process.dedup_dx_code_proc_30_invalid_stat_after_fix
where 'p'+chp_carrier_id+'_'+pdr_product_id = @schema_name

delete from process.dedup_dx_code_proc_40_dup_dx_codes_stat
where 'p'+chp_carrier_id+'_'+pdr_product_id = @schema_name


set @dynSQL = replace('


--unpivot the dx codes 

if object_id(''%schema_name%.dedup_dx_code_proc_00'') is not null
drop table %schema_name%.dedup_dx_code_proc_00
;with all_data as
(
select
	chp_carrier_id,
	pdr_product_id,
	cast(chp_row_id as bigint) as chp_row_id,
	primary_diagnosis_code,
	diagnosis_code_2,
	diagnosis_code_3,
	diagnosis_code_4,
	diagnosis_code_5,
	diagnosis_code_6,
	diagnosis_code_7,
	diagnosis_code_8,
	diagnosis_code_9,
	diagnosis_code_10,
	diagnosis_code_11,
	diagnosis_code_12,
	diagnosis_code_13,
	diagnosis_code_14,
	diagnosis_code_15	
from %schema_name%.diagnosis_code_proc_03
)			
select *
into %schema_name%.dedup_dx_code_proc_00
from
(select
	chp_carrier_id,
	pdr_product_id,
	chp_row_id,
	case when right(col,2) = ''de'' then 1 else replace(right(col,2),''_'','''') end as dx_code_position,
	value as dx_code
from all_data src
unpivot
(value 
for col in (primary_diagnosis_code, diagnosis_code_2, diagnosis_code_3, diagnosis_code_4, diagnosis_code_5, diagnosis_code_6, diagnosis_code_7, diagnosis_code_8, diagnosis_code_9, diagnosis_code_10, diagnosis_code_11, diagnosis_code_12, diagnosis_code_13, diagnosis_code_14, diagnosis_code_15)
) unpiv ) a
where len(dx_code)>0


--get the smallest position of the dx code. Deletes the duplicate with the higher diagnosis code position and the rank_dx_code_pos is basically the new position

if object_id(''%schema_name%.dedup_dx_code_proc_10'') is not null
drop table %schema_name%.dedup_dx_code_proc_10
select
	*,
	row_number() over (partition by chp_row_id order by dx_code_position) as rank_dx_code_pos
into %schema_name%.dedup_dx_code_proc_10
from
(select
	chp_carrier_id,
	pdr_product_id,
	chp_row_id,
	dx_code,
	min(cast(dx_code_position as int)) as dx_code_position
from %schema_name%.dedup_dx_code_proc_00
group by
	chp_carrier_id,
	pdr_product_id,
	chp_row_id,
	dx_code) a


---------------------------------dedup the dx codes based on the new rank-----------------------------------
	
if object_id(''%schema_name%.dedup_dx_code_proc_20_deduped'') is not null	
drop table %schema_name%.dedup_dx_code_proc_20_deduped
select
	chp_carrier_id,
	pdr_product_id,
	chp_row_id,
	[1] as primary_diagnosis_code,
	[2] as diagnosis_code_2,
	[3] as diagnosis_code_3,
	[4] as diagnosis_code_4,
	[5] as diagnosis_code_5,
	[6] as diagnosis_code_6,
	[7] as diagnosis_code_7,
	[8] as diagnosis_code_8,
	[9] as diagnosis_code_9,
	[10] as diagnosis_code_10,
	[11] as diagnosis_code_11,
	[12] as diagnosis_code_12,
	[13] as diagnosis_code_13,
	[14] as diagnosis_code_14,
	[15] as diagnosis_code_15
into %schema_name%.dedup_dx_code_proc_20_deduped
from 
(select
	chp_carrier_id,
	pdr_product_id,
	chp_row_id,
	dx_code,
	rank_dx_code_pos
from %schema_name%.dedup_dx_code_proc_10) src
pivot
(max(dx_code)
for rank_dx_code_pos in ([1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15])
) piv


-------------------------------patch truncated dx code-------------------------------------------------------------------
if object_id(''%schema_name%.dedup_dx_code_proc_20_deduped_patched'') is not null	
drop table if exists  %schema_name%.dedup_dx_code_proc_20_deduped_patched
select
a.chp_carrier_id,
a.pdr_product_id,
a.chp_row_id,
case when t1.icd_10_cm_code is not null then t1.icd_10_cm_code else a.primary_diagnosis_code end as primary_diagnosis_code,
case when t2.icd_10_cm_code is not null then t2.icd_10_cm_code else a.diagnosis_code_2 end as diagnosis_code_2,
case when t3.icd_10_cm_code is not null then t3.icd_10_cm_code else a.diagnosis_code_3 end as diagnosis_code_3,
case when t4.icd_10_cm_code is not null then t4.icd_10_cm_code else a.diagnosis_code_4 end as diagnosis_code_4,
case when t5.icd_10_cm_code is not null then t5.icd_10_cm_code else a.diagnosis_code_5 end as diagnosis_code_5,
case when t6.icd_10_cm_code is not null then t6.icd_10_cm_code else a.diagnosis_code_6 end as diagnosis_code_6,
case when t7.icd_10_cm_code is not null then t7.icd_10_cm_code else a.diagnosis_code_7 end as diagnosis_code_7,
case when t8.icd_10_cm_code is not null then t8.icd_10_cm_code else a.diagnosis_code_8 end as diagnosis_code_8,
case when t9.icd_10_cm_code is not null then t9.icd_10_cm_code else a.diagnosis_code_9 end as diagnosis_code_9,
case when t10.icd_10_cm_code is not null then t10.icd_10_cm_code else a.diagnosis_code_10 end as diagnosis_code_10,
case when t11.icd_10_cm_code is not null then t11.icd_10_cm_code else a.diagnosis_code_11 end as diagnosis_code_11,
case when t12.icd_10_cm_code is not null then t12.icd_10_cm_code else a.diagnosis_code_12 end as diagnosis_code_12,
case when t13.icd_10_cm_code is not null then t13.icd_10_cm_code else a.diagnosis_code_13 end as diagnosis_code_13,
case when t14.icd_10_cm_code is not null then t14.icd_10_cm_code else a.diagnosis_code_14 end as diagnosis_code_14,
case when t15.icd_10_cm_code is not null then t15.icd_10_cm_code else a.diagnosis_code_15 end as diagnosis_code_15
into %schema_name%.dedup_dx_code_proc_20_deduped_patched
from %schema_name%.dedup_dx_code_proc_20_deduped a 
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t1     
on t1.truncated_dx_code = replace(a.primary_diagnosis_code,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t2     
on t2.truncated_dx_code = replace(a.diagnosis_code_2,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t3     
on t3.truncated_dx_code = replace(a.diagnosis_code_3,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t4     
on t4.truncated_dx_code = replace(a.diagnosis_code_4,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t5     
on t5.truncated_dx_code = replace(a.diagnosis_code_5,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t6     
on t6.truncated_dx_code = replace(a.diagnosis_code_6,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t7     
on t7.truncated_dx_code = replace(a.diagnosis_code_7,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t8     
on t8.truncated_dx_code = replace(a.diagnosis_code_8,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t9     
on t9.truncated_dx_code = replace(a.diagnosis_code_9,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t10     
on t10.truncated_dx_code = replace(a.diagnosis_code_10,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t11     
on t11.truncated_dx_code = replace(a.diagnosis_code_11,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t12     
on t12.truncated_dx_code = replace(a.diagnosis_code_12,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t13     
on t13.truncated_dx_code = replace(a.diagnosis_code_13,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t14     
on t14.truncated_dx_code = replace(a.diagnosis_code_14,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t15     
on t15.truncated_dx_code = replace(a.diagnosis_code_15,''.'','''')

-------------------------------pivot table to be used to check the impact of the patch
if object_id(''%schema_name%.dedup_dx_code_proc_20_deduped_patched_pivot'') is not null
drop table %schema_name%.dedup_dx_code_proc_20_deduped_patched_pivot
;with all_data as
(
select
	chp_carrier_id,
	pdr_product_id,
	cast(chp_row_id as bigint) as chp_row_id,
	primary_diagnosis_code,
	diagnosis_code_2,
	diagnosis_code_3,
	diagnosis_code_4,
	diagnosis_code_5,
	diagnosis_code_6,
	diagnosis_code_7,
	diagnosis_code_8,
	diagnosis_code_9,
	diagnosis_code_10,
	diagnosis_code_11,
	diagnosis_code_12,
	diagnosis_code_13,
	diagnosis_code_14,
	diagnosis_code_15	
from %schema_name%.dedup_dx_code_proc_20_deduped_patched
)			
select *
into %schema_name%.dedup_dx_code_proc_20_deduped_patched_pivot
from
(select
	chp_carrier_id,
	pdr_product_id,
	chp_row_id,
	case when right(col,2) = ''de'' then 1 else replace(right(col,2),''_'','''') end as dx_code_position,
	value as dx_code
from all_data src
unpivot
(value 
for col in (primary_diagnosis_code, diagnosis_code_2, diagnosis_code_3, diagnosis_code_4, diagnosis_code_5, diagnosis_code_6, diagnosis_code_7, diagnosis_code_8, diagnosis_code_9, diagnosis_code_10, diagnosis_code_11, diagnosis_code_12, diagnosis_code_13, diagnosis_code_14, diagnosis_code_15)
) unpiv ) a
where dx_code is not null



--------------------------------check invalid dx codes


insert into process.dedup_dx_code_proc_30_invalid_stat with (tablock)
select
	chp_carrier_id,
	pdr_product_id,
	dx_code_position,
	case when b.icd_10_cm_code is not null then ''Y'' else ''N'' end as flag_in_ccsr_mapping,
	case when b.icd_10_cm_code is not null then null else a.dx_code end as invalid_dx_code,
	count(*) as cnt_dx_code,
	getdate() as update_time
from %schema_name%.dedup_dx_code_proc_00 a
left join
reference.ref_icd_10_cm_ccsr_mapping b
on replace(a.dx_code,''.'','''') = b.icd_10_cm_code
group by
	chp_carrier_id,
	pdr_product_id,
	dx_code_position,
	case when b.icd_10_cm_code is not null then ''Y'' else ''N'' end,
	case when b.icd_10_cm_code is not null then null else a.dx_code end



--------------------------------------------------------------check invalid dx codes after truncated dx patch--------------------------------------

insert into process.dedup_dx_code_proc_30_invalid_stat_after_fix with (tablock)
select
	chp_carrier_id,
	pdr_product_id,
	dx_code_position,
	case when b.icd_10_cm_code is not null then ''Y'' else ''N''  end as flag_in_ccsr_mapping,
	case when b.icd_10_cm_code is not null then null else a.dx_code end as invalid_dx_code,
	count(*) as cnt_dx_code,
	getdate() as update_time
from %schema_name%.dedup_dx_code_proc_20_deduped_patched_pivot a
left join
reference.ref_icd_10_cm_ccsr_mapping b
on replace(a.dx_code,''.'','''') = b.icd_10_cm_code
group by
	chp_carrier_id,
	pdr_product_id,
	dx_code_position,
	case when b.icd_10_cm_code is not null then ''Y'' else ''N'' end,
	case when b.icd_10_cm_code is not null then null else a.dx_code end




----------------------------------duplicated dx codes--------------------------

insert into process.dedup_dx_code_proc_40_dup_dx_codes_stat with (tablock)
select
	chp_carrier_id,
	pdr_product_id,
	dx_code_position,
	cnt_dx_clm_line,
	count(distinct chp_row_id) as cnt_clm_line,
	getdate() as update_time
from
(select
	*,
	row_number() over (partition by chp_row_id, dx_code order by dx_code_position) as cnt_dx_clm_line
from %schema_name%.dedup_dx_code_proc_00) a
group by
	chp_carrier_id,
	pdr_product_id,
	dx_code_position,
	cnt_dx_clm_line


--drop tables to save space
drop table %schema_name%.dedup_dx_code_proc_00
drop table %schema_name%.dedup_dx_code_proc_10
drop table %schema_name%.dedup_dx_code_proc_20_deduped_patched
drop table %schema_name%.dedup_dx_code_proc_20_deduped_patched_pivot


','%schema_name%',@schema_name)

exec sp_executesql @dynSQL



--create clustered columnstore index
if @p_create_CCI = 'Y'
begin
	select @indexName = name from sys.indexes where object_id = object_id(@schema_name + '.dedup_dx_code_proc_20_deduped') and type_desc = 'CLUSTERED COLUMNSTORE'
	if @indexName is not null 
		begin 
		set @indexSQL = 'drop index ' + @indexName + ' on ' + @schema_name + '.dedup_dx_code_proc_20_deduped' 
		exec sp_executesql @indexSQL 
		end

			
	set @indexSQL = 'create clustered columnstore index idx_' + @schema_name + '_dedup_dx_code_proc_20_deduped on ' + @schema_name + '.dedup_dx_code_proc_20_deduped with (MAXDOP = 4)'
	exec sp_executesql @indexSQL 
end




print @schema_name+' - Diagnosis Codes are deduped...'


	  fetch next from cur_schema_1 into @schema_name

    end

  close cur_schema_1
  deallocate cur_schema_1


end/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/



GO
/****** Object:  StoredProcedure [dbo].[sp_dedup_dx_code_claim_line_prof_header]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_dedup_dx_code_claim_line_prof_header]
/*****************************************************************************
 Description: 
    Common process of processing claims with financial data
	All common process happen in dbo (results refreshed when a plan product is run)


 Parameters:
    schema_name - the plan product to run


 Return:

 Notes:

 Change History:
	2017-04-04 SL - initial version
	2017-04-17 SL - run for the rest of the plans
	2017-05-05 SL - inclulde Host data and run for all plans as regular process
	2017-10-03 SL - add the analytic piece so we also known the scale of the duplicated dx codes and the validity of the dx codes
	2017-10-16 SL - revise to pull from vw_diagnosis_code_proc_00 due to standardization updates 684 ICD-CM codes for DRG Grouper
	2017-11-22 SL - revise to insert statistics into one table with timestamp
	2017-12-05 SL - revise the parameter for dedup dx code to @carrier_id_combo due to this is 
					input for the union view to re-assign products
	2018-02-13 SL - add CCI to table for performance
	2018-07-23 SL - add NDW professional header, 3 months claims in CY17 upload
	2020-19-2020 TK- changed the view from vw_diagnosis_code_proc_00 to table diagnosis_code_proc_03 based on the changes I made to the dx sp
	              -- will be applying a dx truncated dx code patch for all plans in the sp_base_1_source_create_views_for_all_inputs sp, so creating tables to test the impact
				    of the dx patch here 
 
 
*****************************************************************************/
                                     @p_carrier_id_combo    varchar(50) = null,
									 @p_create_CCI         varchar(50) = null
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = '@p_carrier_id_combo'
	SET @Logging_Values = ISNULL(CAST(@p_carrier_id_combo AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/
begin



declare @schema_name varchar(100),
	    @dynSQL nvarchar(max),
		@indexName varchar(255),
		@indexSQL nvarchar(max)



  declare cur_schema_1 cursor local for
	select 
		schema_name
	from process.data_status_tracking a
	  where include_in_uds_pmpm = 1
	  and carrier_id_combo = isnull(@p_carrier_id_combo, schema_name)

  open cur_schema_1
  fetch next from cur_schema_1 into @schema_name

  while ( @@FETCH_STATUS = 0 )
    begin



delete from  Process.dedup_dx_code_proc_30_invalid_stat_prof_header
where 'p'+chp_carrier_id+'_'+pdr_product_id = @schema_name


delete from process.dedup_dx_code_proc_40_dup_dx_codes_stat_prof_header
where 'p'+chp_carrier_id+'_'+pdr_product_id = @schema_name


delete from  process.dedup_dx_code_proc_30_invalid_stat_after_fix_prof_header 
where 'p'+chp_carrier_id+'_'+pdr_product_id = @schema_name


set @dynSQL = replace('


--unpivot the dx codes 

if object_id(''%schema_name%.dedup_dx_code_proc_00_prof_header'') is not null
drop table %schema_name%.dedup_dx_code_proc_00_prof_header
;with all_data as
(
select
	chp_carrier_id,
	pdr_product_id,
	cast(chp_row_id as bigint) as chp_row_id,
	case when primary_diagnosis_code_prof_header is not null then primary_diagnosis_code_prof_header else primary_diagnosis_code end as primary_diagnosis_code,
	case when diagnosis_code_2_prof_header  is not null then diagnosis_code_2_prof_header else diagnosis_code_2 end as diagnosis_code_2,
	case when diagnosis_code_3_prof_header  is not null then diagnosis_code_3_prof_header else diagnosis_code_3 end as diagnosis_code_3,
	case when diagnosis_code_4_prof_header  is not null then diagnosis_code_4_prof_header else diagnosis_code_4 end as diagnosis_code_4,
	case when diagnosis_code_5_prof_header  is not null then diagnosis_code_5_prof_header else diagnosis_code_5 end as diagnosis_code_5,
	case when diagnosis_code_6_prof_header  is not null then diagnosis_code_6_prof_header else diagnosis_code_6 end as diagnosis_code_6,
	case when diagnosis_code_7_prof_header  is not null then diagnosis_code_7_prof_header else diagnosis_code_7 end as diagnosis_code_7,
	case when diagnosis_code_8_prof_header  is not null then diagnosis_code_8_prof_header else diagnosis_code_8 end as diagnosis_code_8,
	case when diagnosis_code_9_prof_header  is not null  then diagnosis_code_9_prof_header else diagnosis_code_9 end as diagnosis_code_9,
	case when diagnosis_code_10_prof_header is not null then diagnosis_code_10_prof_header else diagnosis_code_10 end as diagnosis_code_10,
	case when diagnosis_code_11_prof_header is not null then diagnosis_code_11_prof_header else diagnosis_code_11 end as diagnosis_code_11,
	case when diagnosis_code_12_prof_header is not null then diagnosis_code_12_prof_header else diagnosis_code_12 end as diagnosis_code_12,
	diagnosis_code_13,
	diagnosis_code_14,
	diagnosis_code_15	
from %schema_name%.diagnosis_code_proc_03
)			
select *
into %schema_name%.dedup_dx_code_proc_00_prof_header
from
(select
	chp_carrier_id,
	pdr_product_id,
	chp_row_id,
	case when right(col,2) = ''de'' then 1 else replace(right(col,2),''_'','''') end as dx_code_position,
	value as dx_code
from all_data src
unpivot
(value 
for col in (primary_diagnosis_code, diagnosis_code_2, diagnosis_code_3, diagnosis_code_4, diagnosis_code_5, diagnosis_code_6, diagnosis_code_7, diagnosis_code_8, diagnosis_code_9, diagnosis_code_10, diagnosis_code_11, diagnosis_code_12, diagnosis_code_13, diagnosis_code_14, diagnosis_code_15)
) unpiv ) a
where len(dx_code)>0


--get the smallest position of the dx code

if object_id(''%schema_name%.dedup_dx_code_proc_10_prof_header'') is not null
drop table %schema_name%.dedup_dx_code_proc_10_prof_header
select
	*,
	row_number() over (partition by chp_row_id order by dx_code_position) as rank_dx_code_pos
into %schema_name%.dedup_dx_code_proc_10_prof_header
from
(select
	chp_carrier_id,
	pdr_product_id,
	chp_row_id,
	dx_code,
	min(cast(dx_code_position as int)) as dx_code_position
from %schema_name%.dedup_dx_code_proc_00_prof_header
group by
	chp_carrier_id,
	pdr_product_id,
	chp_row_id,
	dx_code) a


--dedup the dx codes based on the new rank
	
if object_id(''%schema_name%.dedup_dx_code_proc_20_deduped_prof_header'') is not null	
drop table %schema_name%.dedup_dx_code_proc_20_deduped_prof_header
select
	chp_carrier_id,
	pdr_product_id,
	chp_row_id,
	[1] as primary_diagnosis_code,
	[2] as diagnosis_code_2,
	[3] as diagnosis_code_3,
	[4] as diagnosis_code_4,
	[5] as diagnosis_code_5,
	[6] as diagnosis_code_6,
	[7] as diagnosis_code_7,
	[8] as diagnosis_code_8,
	[9] as diagnosis_code_9,
	[10] as diagnosis_code_10,
	[11] as diagnosis_code_11,
	[12] as diagnosis_code_12,
	[13] as diagnosis_code_13,
	[14] as diagnosis_code_14,
	[15] as diagnosis_code_15
into %schema_name%.dedup_dx_code_proc_20_deduped_prof_header
from 
(select
	chp_carrier_id,
	pdr_product_id,
	chp_row_id,
	dx_code,
	rank_dx_code_pos
from %schema_name%.dedup_dx_code_proc_10_prof_header) src
pivot
(max(dx_code)
for rank_dx_code_pos in ([1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15])
) piv


---patch truncated dx code
if object_id(''%schema_name%.dedup_dx_code_proc_20_deduped_patched_prof_header'') is not null	
drop table if exists  %schema_name%.dedup_dx_code_proc_20_deduped_patched_prof_header
select
a.chp_carrier_id,
a.pdr_product_id,
a.chp_row_id,
case when t1.icd_10_cm_code is not null then t1.icd_10_cm_code else a.primary_diagnosis_code end as primary_diagnosis_code,
case when t2.icd_10_cm_code is not null then t2.icd_10_cm_code else a.diagnosis_code_2 end as diagnosis_code_2,
case when t3.icd_10_cm_code is not null then t3.icd_10_cm_code else a.diagnosis_code_3 end as diagnosis_code_3,
case when t4.icd_10_cm_code is not null then t4.icd_10_cm_code else a.diagnosis_code_4 end as diagnosis_code_4,
case when t5.icd_10_cm_code is not null then t5.icd_10_cm_code else a.diagnosis_code_5 end as diagnosis_code_5,
case when t6.icd_10_cm_code is not null then t6.icd_10_cm_code else a.diagnosis_code_6 end as diagnosis_code_6,
case when t7.icd_10_cm_code is not null then t7.icd_10_cm_code else a.diagnosis_code_7 end as diagnosis_code_7,
case when t8.icd_10_cm_code is not null then t8.icd_10_cm_code else a.diagnosis_code_8 end as diagnosis_code_8,
case when t9.icd_10_cm_code is not null then t9.icd_10_cm_code else a.diagnosis_code_9 end as diagnosis_code_9,
case when t10.icd_10_cm_code is not null then t10.icd_10_cm_code else a.diagnosis_code_10 end as diagnosis_code_10,
case when t11.icd_10_cm_code is not null then t11.icd_10_cm_code else a.diagnosis_code_11 end as diagnosis_code_11,
case when t12.icd_10_cm_code is not null then t12.icd_10_cm_code else a.diagnosis_code_12 end as diagnosis_code_12,
case when t13.icd_10_cm_code is not null then t13.icd_10_cm_code else a.diagnosis_code_13 end as diagnosis_code_13,
case when t14.icd_10_cm_code is not null then t14.icd_10_cm_code else a.diagnosis_code_14 end as diagnosis_code_14,
case when t15.icd_10_cm_code is not null then t15.icd_10_cm_code else a.diagnosis_code_15 end as diagnosis_code_15
into %schema_name%.dedup_dx_code_proc_20_deduped_patched_prof_header
from %schema_name%.dedup_dx_code_proc_20_deduped_prof_header a 
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t1     
on t1.truncated_dx_code = replace(a.primary_diagnosis_code,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t2     
on t2.truncated_dx_code = replace(a.diagnosis_code_2,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t3     
on t3.truncated_dx_code = replace(a.diagnosis_code_3,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t4     
on t4.truncated_dx_code = replace(a.diagnosis_code_4,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t5     
on t5.truncated_dx_code = replace(a.diagnosis_code_5,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t6     
on t6.truncated_dx_code = replace(a.diagnosis_code_6,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t7     
on t7.truncated_dx_code = replace(a.diagnosis_code_7,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t8     
on t8.truncated_dx_code = replace(a.diagnosis_code_8,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t9     
on t9.truncated_dx_code = replace(a.diagnosis_code_9,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t10     
on t10.truncated_dx_code = replace(a.diagnosis_code_10,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t11     
on t11.truncated_dx_code = replace(a.diagnosis_code_11,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t12     
on t12.truncated_dx_code = replace(a.diagnosis_code_12,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t13     
on t13.truncated_dx_code = replace(a.diagnosis_code_13,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t14     
on t14.truncated_dx_code = replace(a.diagnosis_code_14,''.'','''')
left join
reference.ref_icd_10_cm_mapping_for_truncated_dx_code t15     
on t15.truncated_dx_code = replace(a.diagnosis_code_15,''.'','''')

--pivot table to be used to check the inpcat of the patch
if object_id(''%schema_name%.dedup_dx_code_proc_20_deduped_patched_pivot_prof_header'') is not null
drop table %schema_name%.dedup_dx_code_proc_20_deduped_patched_pivot_prof_header
;with all_data as
(
select
	chp_carrier_id,
	pdr_product_id,
	cast(chp_row_id as bigint) as chp_row_id,
	primary_diagnosis_code,
	diagnosis_code_2,
	diagnosis_code_3,
	diagnosis_code_4,
	diagnosis_code_5,
	diagnosis_code_6,
	diagnosis_code_7,
	diagnosis_code_8,
	diagnosis_code_9,
	diagnosis_code_10,
	diagnosis_code_11,
	diagnosis_code_12,
	diagnosis_code_13,
	diagnosis_code_14,
	diagnosis_code_15	
from %schema_name%.dedup_dx_code_proc_20_deduped_patched_prof_header
)			
select *
into %schema_name%.dedup_dx_code_proc_20_deduped_patched_pivot_prof_header
from
(select
	chp_carrier_id,
	pdr_product_id,
	chp_row_id,
	case when right(col,2) = ''de'' then 1 else replace(right(col,2),''_'','''') end as dx_code_position,
	value as dx_code
from all_data src
unpivot
(value 
for col in (primary_diagnosis_code, diagnosis_code_2, diagnosis_code_3, diagnosis_code_4, diagnosis_code_5, diagnosis_code_6, diagnosis_code_7, diagnosis_code_8, diagnosis_code_9, diagnosis_code_10, diagnosis_code_11, diagnosis_code_12, diagnosis_code_13, diagnosis_code_14, diagnosis_code_15)
) unpiv ) a
where dx_code is not null




--2017-10-03 add the checking of invalid dx codes and duplicated dx codes


--check invalid dx codes


insert into process.dedup_dx_code_proc_30_invalid_stat_prof_header with (tablock)
select
	chp_carrier_id,
	pdr_product_id,
	dx_code_position,
	case when b.icd_10_cm_code is not null then ''Y'' else ''N'' end as flag_in_ccsr_mapping,
	case when b.icd_10_cm_code is not null then null else a.dx_code end as invalid_dx_code,
	count(*) as cnt_dx_code,
	getdate() as update_time
from %schema_name%.dedup_dx_code_proc_00_prof_header a
left join
reference.ref_icd_10_cm_ccsr_mapping b
on replace(a.dx_code,''.'','''') = b.icd_10_cm_code
group by
	chp_carrier_id,
	pdr_product_id,
	dx_code_position,
	case when b.icd_10_cm_code is not null then ''Y'' else ''N'' end,
	case when b.icd_10_cm_code is not null then null else a.dx_code end


	--check invalid dx codes after truncated dx patch

insert into process.dedup_dx_code_proc_30_invalid_stat_after_fix_prof_header with (tablock)
select
	chp_carrier_id,
	pdr_product_id,
	dx_code_position,
	case when b.icd_10_cm_code is not null then ''Y'' else ''N''  end as flag_in_ccsr_mapping,
	case when b.icd_10_cm_code is not null then null else a.dx_code end as invalid_dx_code,
	count(*) as cnt_dx_code,
	getdate() as update_time
from %schema_name%.dedup_dx_code_proc_20_deduped_patched_pivot_prof_header a
left join
reference.ref_icd_10_cm_ccsr_mapping b
on replace(a.dx_code,''.'','''') = b.icd_10_cm_code
group by
	chp_carrier_id,
	pdr_product_id,
	dx_code_position,
	case when b.icd_10_cm_code is not null then ''Y'' else ''N'' end,
	case when b.icd_10_cm_code is not null then null else a.dx_code end




--duplicated dx codes

insert into process.dedup_dx_code_proc_40_dup_dx_codes_stat_prof_header with (tablock)
select
	chp_carrier_id,
	pdr_product_id,
	dx_code_position,
	cnt_dx_clm_line,
	count(distinct chp_row_id) as cnt_clm_line,
	getdate() as update_time
from
(select
	*,
	row_number() over (partition by chp_row_id, dx_code order by dx_code_position) as cnt_dx_clm_line
from %schema_name%.dedup_dx_code_proc_00_prof_header) a
group by
	chp_carrier_id,
	pdr_product_id,
	dx_code_position,
	cnt_dx_clm_line


--drop unnecessary tables
drop table %schema_name%.dedup_dx_code_proc_00_prof_header
drop table %schema_name%.dedup_dx_code_proc_10_prof_header
drop table %schema_name%.dedup_dx_code_proc_20_deduped_patched_prof_header
drop table %schema_name%.dedup_dx_code_proc_20_deduped_patched_pivot_prof_header


','%schema_name%',@schema_name)

exec sp_executesql @dynSQL



--create clustered columnstore index
if @p_create_CCI = 'Y'
begin
	select @indexName = name from sys.indexes where object_id = object_id(@schema_name + '.dedup_dx_code_proc_20_deduped_prof_header') and type_desc = 'CLUSTERED COLUMNSTORE'
	if @indexName is not null 
		begin 
		set @indexSQL = 'drop index ' + @indexName + ' on ' + @schema_name + '.dedup_dx_code_proc_20_deduped_prof_header' 
		exec sp_executesql @indexSQL 
		end

			
	set @indexSQL = 'create clustered columnstore index idx_' + @schema_name + '_dedup_dx_code_proc_20_deduped_prof_header on ' + @schema_name + '.dedup_dx_code_proc_20_deduped_prof_header with (MAXDOP = 4)'
	exec sp_executesql @indexSQL 
end




print @schema_name+' - Diagnosis Codes are deduped...'


	  fetch next from cur_schema_1 into @schema_name

    end

  close cur_schema_1
  deallocate cur_schema_1


end/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/



GO
/****** Object:  StoredProcedure [dbo].[sp_Mercer_base_11_build_views_all_plans_detail]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_Mercer_base_11_build_views_all_plans_detail]
/*****************************************************************************
 Description: 
    Create Views for All Plans financial detail and membership detail
	This is needed to aggregate host data for CY15 resubmission of including Anthem
		internally hosted members


 Parameters:

 Return:

 Notes:

 Change History:
	2017-05-17 SL - initial version
 
*****************************************************************************/
										@p_replace_existing varchar(5) = 'Y'
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = NULL
	SET @Logging_Values = NULL
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/
begin


declare 
	@sql_temp nvarchar(max), 
	@membership_views nvarchar(max), 
	@condition_views nvarchar(max)
	--@claims_views nvarchar(max)


--membership

--create view for proc_membership_ccsr_conditions_20_member_risk_score_3dx

set @membership_views = '
create view all_plans.vw_proc_membership_ccsr_conditions_20_member_risk_score_3dx_b4_exclusion as
select * from p1017_WAB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p1395_WAB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p1420_PAL6.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p880_NJB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p880_NJL2.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p880_NJ3E.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p881_MIB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p884_MAB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p885_ILB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p886_INB2.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p887_TXB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p888_CTB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p890_INB2.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p891_ALB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p893_AZB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p893_AZL1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p894_ARB2.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p895_CAB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p895_CAL3.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p896_COB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p897_DEB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p898_DCB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p898_DCL2.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p899_FLB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p899_FLL2.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p900_GAB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p900_GAP3.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p902_IDB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p903_IDB2.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p905_IAB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p907_INB2.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p908_LAB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p909_MEB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p911_MNB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p913_MOL1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p914_INB2.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p914_MOL6.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p914_P3MO.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p915_MTB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p917_WAB2.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p918_OKB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p918_OKL3.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p918_OKL8.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p920_ORB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p921_NVB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p922_NHB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p922_P1NH.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p924_NMB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p925_PAB6.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p928_PAB9.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p930_NYB3.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p938_INB2.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p938_WIL2.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p940_NCB2.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p946_RIB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p947_SCB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p948_SDB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p950_TNB2.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p950_TNL2.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p952_UTB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p954_VAB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p957_CAB2.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p958_PAB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx
union all
select * from p906_KSB1.proc_membership_ccsr_conditions_20_member_risk_score_3dx

'

--create view for proc_membership_ccsr_conditions_10_3dx

set @condition_views = '
create view all_plans.vw_proc_membership_ccsr_conditions_10_3dx_b4_exclusion as
select * from p1017_WAB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p1395_WAB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p1420_PAL6.proc_membership_ccsr_conditions_10_3dx
union all
select * from p880_NJB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p880_NJL2.proc_membership_ccsr_conditions_10_3dx
union all
select * from p880_NJ3E.proc_membership_ccsr_conditions_10_3dx
union all
select * from p881_MIB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p884_MAB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p885_ILB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p886_INB2.proc_membership_ccsr_conditions_10_3dx
union all
select * from p887_TXB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p888_CTB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p890_INB2.proc_membership_ccsr_conditions_10_3dx
union all
select * from p891_ALB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p893_AZB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p893_AZL1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p894_ARB2.proc_membership_ccsr_conditions_10_3dx
union all
select * from p895_CAB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p895_CAL3.proc_membership_ccsr_conditions_10_3dx
union all
select * from p896_COB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p897_DEB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p898_DCB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p898_DCL2.proc_membership_ccsr_conditions_10_3dx
union all
select * from p899_FLB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p899_FLL2.proc_membership_ccsr_conditions_10_3dx
union all
select * from p900_GAB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p900_GAP3.proc_membership_ccsr_conditions_10_3dx
union all
select * from p902_IDB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p903_IDB2.proc_membership_ccsr_conditions_10_3dx
union all
select * from p905_IAB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p907_INB2.proc_membership_ccsr_conditions_10_3dx
union all
select * from p908_LAB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p909_MEB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p911_MNB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p913_MOL1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p914_INB2.proc_membership_ccsr_conditions_10_3dx
union all
select * from p914_MOL6.proc_membership_ccsr_conditions_10_3dx
union all
select * from p914_P3MO.proc_membership_ccsr_conditions_10_3dx
union all
select * from p915_MTB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p917_WAB2.proc_membership_ccsr_conditions_10_3dx
union all
select * from p918_OKB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p918_OKL3.proc_membership_ccsr_conditions_10_3dx
union all
select * from p918_OKL8.proc_membership_ccsr_conditions_10_3dx
union all
select * from p920_ORB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p921_NVB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p922_NHB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p922_P1NH.proc_membership_ccsr_conditions_10_3dx
union all
select * from p924_NMB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p925_PAB6.proc_membership_ccsr_conditions_10_3dx
union all
select * from p928_PAB9.proc_membership_ccsr_conditions_10_3dx
union all
select * from p930_NYB3.proc_membership_ccsr_conditions_10_3dx
union all
select * from p938_INB2.proc_membership_ccsr_conditions_10_3dx
union all
select * from p938_WIL2.proc_membership_ccsr_conditions_10_3dx
union all
select * from p940_NCB2.proc_membership_ccsr_conditions_10_3dx
union all
select * from p946_RIB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p947_SCB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p948_SDB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p950_TNB2.proc_membership_ccsr_conditions_10_3dx
union all
select * from p950_TNL2.proc_membership_ccsr_conditions_10_3dx
union all
select * from p952_UTB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p954_VAB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p957_CAB2.proc_membership_ccsr_conditions_10_3dx
union all
select * from p958_PAB1.proc_membership_ccsr_conditions_10_3dx
union all
select * from p906_KSB1.proc_membership_ccsr_conditions_10_3dx
'




      if not exists (select * from INFORMATION_SCHEMA.VIEWS where TABLE_SCHEMA = 'all_plans' and TABLE_NAME = 'vw_proc_membership_ccsr_conditions_20_member_risk_score_3dx_b4_exclusion')
	    begin
	  	  exec sp_executesql @membership_views
        end
        else if @p_replace_existing = 'Y'
		       begin set @sql_temp = 'drop view all_plans.vw_proc_membership_ccsr_conditions_20_member_risk_score_3dx_b4_exclusion' 
                     exec (@sql_temp) 
		             exec sp_executesql @membership_views
		       end


      if not exists (select * from INFORMATION_SCHEMA.VIEWS where TABLE_SCHEMA = 'all_plans' and TABLE_NAME = 'vw_proc_membership_ccsr_conditions_10_3dx_b4_exclusion')
	    begin
	  	  exec sp_executesql @condition_views
        end
        else if @p_replace_existing = 'Y'
		       begin set @sql_temp = 'drop view all_plans.vw_proc_membership_ccsr_conditions_10_3dx_b4_exclusion' 
                     exec (@sql_temp) 
		             exec sp_executesql @condition_views
		       end




end/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/


GO
/****** Object:  StoredProcedure [dbo].[sp_Mercer_base_7_process_member_CCSR_Conditions]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_Mercer_base_7_process_member_CCSR_Conditions]
/*****************************************************************************
 Description: 
    Common process of processing membership 
	All common process happen in dbo (results refreshed when a plan product is run)


 Parameters:
    schema_name - the plan product to run

 Return:

 Notes:

 Change History:

	2017-10-10 SL - separate from [dbo].[sp_base_6_process_membership]	  
	2017-11-07 SL - revise the exclusion flags      
	
	2018-02-08 SL - remove the exclusion flags in intermediate tables, to make the code stable  
	                make proc_membership_CCSR_conditions_20_member_risk_score a view, need to be in another SP
	2018-02-21 SL - move the risk score calculation at the member level to another SP - need to incorporate various risk factors
	CY2017
	2018-07-02 SL - add the Compound CCSR step which is new in CY17
	2018-10-09 SL - revise for Mercer 3 dx code version
    2021-08-13 TK - deleted code for Compound ccs mapping due to new CCSR mapping. 
	2021-08-13  TK - changed field names and table names from ccs to ccsr where applicable
	2021-08-13  TK - Changed table name from proc_claims_diagnosis_code_50_with_Compound_CCS to proc_claims_diagnosis_code
	                
*****************************************************************************/
                                     @p_schema_name    varchar(50) = null,
									 @p_create_CCI     varchar(1) = 'Y'
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = '@p_schema_name'
	SET @Logging_Values = ISNULL(CAST(@p_schema_name AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/
begin


declare @schema_name varchar(100),
	    @dynSQL nvarchar(max),
		@indexName varchar(255),
		@indexSQL nvarchar(max)


set @schema_name = @p_schema_name



set @dynSQL = replace('



---1)
drop table if exists %schema_name%.proc_claims_diagnosis_code_50_3dx
select
	chp_carrier_id,
	pdr_product_id,
	chp_row_id,
	procedure_code,
	revenue_code,
	flag_exclude_diagnosis_code_3dx as flag_exclude_diagnosis_code,   --2018-10-09 rename here to standard field names so they can flow through with fewer code changes
	member_id,
	pos_diag_code,
	diagnosis_code,
	CCSR_category_code,
	flag_dup_member_condition_3dx as flag_dup_member_condition
into %schema_name%.proc_claims_diagnosis_code_50_3dx
from %schema_name%.proc_claims_diagnosis_code_40




--2. get diagnosis from claims
--use member_id from membership left join with member and diagnosis code


if object_id (''%schema_name%.proc_membership_CCSR_conditions_00_3dx'', ''U'') is not null
drop table %schema_name%.proc_membership_CCSR_conditions_00_3dx;

;with members_w_clm_no_conditions as
(
select 
	member_id
from %schema_name%.proc_claims_diagnosis_code_50_3dx
group by
	member_id
having count(case when flag_exclude_diagnosis_code = ''Y'' or CCSR_category_code = ''9999'' then null else CCSR_category_code end) = 0
)

select
	case when d.member_id is null then ''ConditionXXXXXX''      --no eligible claims
	     when e.member_id is not null then ''Condition000000''  --member has eligible claims, but no condition mapped (due to diagnosis codes are all excluded OR only have invalid diagnosis codes that could not mapped to a CCS condition)
		 when d.flag_exclude_diagnosis_code = ''N'' then convert(varchar(25),concat(''Condition'', d.ccsr_category_code)) --Condition9999 only exists when a member has invalid Conditions Mapped
		 when d.flag_exclude_diagnosis_code = ''Y'' then ''ConditionZZZZZZ''  --a member has conditions mapped from the excluded diagnosis codes
		 else null end as ccsr_condition_type,
	a.chp_carrier_id,
	a.pdr_product_id,
	a.member_id,
	a.home_hosted_indicator,
	a.zip3,
	a.member_gender,
	a.member_age,
	a.age_bracket,
	a.employer_id,
	a.account_id,
	a.group_id,
	a.subgroup,
	a.group_name,
	a.insurance_arrangement,
	a.enrollment_months,
	a.Member_Months_Q1,
	a.Member_Months_Q2,
	a.Member_Months_Q3,
    a.Member_Months_Q4,
	a.covid_related_indicator,
	a.duration_bracket,
	a.high_cost_claimant,
	d.chp_row_id,
	d.procedure_code,
	d.revenue_code,
	d.flag_exclude_diagnosis_code,
	d.member_id as member_id_w_eligible_clm,
	d.ccsr_category_code
into %schema_name%.proc_membership_CCSR_conditions_00_3dx
from 
%schema_name%.proc_membership_attributes_06_bracket_mapped a
left join
%schema_name%.proc_claims_diagnosis_code_50_3dx d
on d.chp_carrier_id = a.chp_carrier_id
and d.pdr_product_id = a.pdr_product_id
and d.member_id = a.member_id
and d.flag_dup_member_condition = ''N''
left join
members_w_clm_no_conditions e
on e.member_id = a.member_id;



--4. select distinct member and conditions and assign risk scores


drop table if exists %schema_name%.proc_membership_CCSR_conditions_10_table_3dx

select
    a.chp_carrier_id,
	a.pdr_product_id,
	a.ccsr_condition_type,
	a.ccsr_category_code,
	a.home_hosted_indicator,
	a.member_id,
	a.zip3,
	a.member_gender,
	a.member_age,
	a.age_bracket,
	a.enrollment_months,
	a.Member_Months_Q1,
	a.Member_Months_Q2,
	a.Member_Months_Q3,
    a.Member_Months_Q4,
	a.covid_related_indicator,
	a.duration_bracket,
	a.high_cost_claimant,
	a.employer_id,
	a.account_id,
	a.group_id,
	a.subgroup,
	a.group_name,
	a.insurance_arrangement,
	coalesce(RF_CCSR.risk_factor,0) as risk_factor_ccsr,
	RF_AG.risk_factor as risk_factor_age_gender
into %schema_name%.proc_membership_CCSR_conditions_10_table_3dx
from
(select distinct
	chp_carrier_id,
	pdr_product_id,
	ccsr_condition_type,
	case when ccsr_condition_type in (''Condition000000'', ''ConditionZZZZZZ'') then null else ccsr_category_code end as ccsr_category_code,
	member_id,
	zip3,
	home_hosted_indicator,
	member_gender,
	member_age,
	age_bracket,
	enrollment_months,
	Member_Months_Q1,
	Member_Months_Q2,
	Member_Months_Q3,
    Member_Months_Q4,
	covid_related_indicator,
	duration_bracket,
	high_cost_claimant,
	employer_id,
	account_id,
	group_id,
	subgroup,
	group_name,
	insurance_arrangement
from %schema_name%.proc_membership_CCSR_conditions_00_3dx) a
left join
reference.ref_risk_factor_CCSR RF_CCSR
on RF_CCSR.cond_code = a.CCSR_category_code
and RF_CCSR.duration_bracket = a.duration_bracket
left join
reference.ref_risk_factor_age_gender RF_AG
on RF_AG.age_bracket = a.age_bracket
and RF_AG.gender = a.member_gender
and RF_AG.duration_bracket = a.duration_bracket;

','%schema_name%',@schema_name)

exec sp_executesql @dynSQL





--create clustered columnstore index
if @p_create_CCI = 'Y'
begin
	select @indexName = name from sys.indexes where object_id = object_id(@schema_name + '.proc_membership_CCSR_conditions_10_table_3dx') and type_desc = 'CLUSTERED COLUMNSTORE'
	if @indexName is not null 
		begin 
		set @indexSQL = 'drop index ' + @indexName + ' on ' + @schema_name + '.proc_membership_CCSR_conditions_10_table_3dx' 
		exec sp_executesql @indexSQL 
		end

			
	set @indexSQL = 'create clustered columnstore index idx_' + @schema_name + 'proc_membership_CCSR_conditions_10_table_3dx on ' + @schema_name + '.proc_membership_CCSR_conditions_10_table_3dx with (MAXDOP = 4)'
	exec sp_executesql @indexSQL 
end


--drop intermediate table to cut space
set @dynSQL = replace('
drop table %schema_name%.proc_membership_CCSR_conditions_00_3dx
','%schema_name%',@schema_name)

exec sp_executesql @dynSQL





end

/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/



GO
/****** Object:  StoredProcedure [dbo].[sp_Mercer_base_75_process_member_risk_score]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_Mercer_base_75_process_member_risk_score]
/*****************************************************************************
 Description: 
    To calculate the various risk scores based on different risk factors


 Parameters:
    schema_name - the plan product to run

 Return:

 Notes:

 Change History:

	2018-02-21 SL - initial version 
	                separate from [dbo].[sp_base_7_process_member_ccsr_Conditions] 
					need to separate this step to minimize rerun of prior steps
	2018-07-03 SL - break down ccsr risk score to Regular and Compound risk scores
	2021-07-09 TK -Mercer risk score tables and fields becasue they are not used and the risk score tables are not obtained early enough to be used in the current upload
	2021-08-12 TK - Changed the table names from ccs to CCSR
	             
*****************************************************************************/
                                     @p_schema_name    varchar(50) = null
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = '@p_schema_name'
	SET @Logging_Values = ISNULL(CAST(@p_schema_name AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/
begin


declare @schema_name varchar(100),
	    @dynSQL nvarchar(max),
        @row_count int,
		@sql_temp nvarchar(max)


  declare cur_schema cursor local for
	select 
		schema_name
	from process.data_status_tracking
	  where include_in_uds_pmpm = 1
	  --and schema_name in (select schema_name from process.control_run)
	  and schema_name = isnull(@p_schema_name, schema_name)
	  order by case when chp_carrier_id in (895, 881, 885, 887) then 9999 else chp_carrier_id end



  open cur_schema
  fetch next from cur_schema into @schema_name

  while ( @@FETCH_STATUS = 0 )
    begin



--2018-02-21 New in CY2016 - Build views to incorporate various risk factors

set @dynSQL = replace('
create view %schema_name%.vw_proc_membership_ccsr_conditions_10_various_risk_factors_3dx as
select
	a.chp_carrier_id,
	a.pdr_product_id,
	a.ccsr_condition_type,
	a.ccsr_category_code,
	a.home_hosted_indicator,
	a.member_id,
	a.zip3,
	a.member_gender,
	a.member_age,
	a.age_bracket,
	a.enrollment_months,
	a.Member_Months_Q1,
	a.Member_Months_Q2,
	a.Member_Months_Q3,
    a.Member_Months_Q4,
	a.covid_related_indicator,
	a.duration_bracket,
	a.high_cost_claimant,
	a.employer_id,
	a.account_id,
	a.group_id,
	a.subgroup,
	a.group_name,
	a.insurance_arrangement,
	a.risk_factor_ccsr,
	a.risk_factor_age_gender

	--coalesce(RF_ccsr_UDS_Prev.risk_factor,0) as risk_factor_ccsr_UDS_Prev,
	--RF_AG_UDS_Prev.risk_factor as risk_factor_age_gender_UDS_Prev,

from %schema_name%.proc_membership_ccsr_conditions_10_table_3dx a

--UDS risk factors Prior 
--left join
--reference.ref_risk_factor_ccsr_UDS_Prev RF_ccsr_UDS_Prev
--on RF_ccsr_UDS_Prev.cond_code = a.ccsr_category_code
--and RF_ccsr_UDS_Prev.duration_bracket = a.duration_bracket
--left join
--reference.ref_risk_factor_age_gender_UDS_Prev RF_AG_UDS_Prev
--on RF_AG_UDS_Prev.age_bracket = a.age_bracket
--and RF_AG_UDS_Prev.gender = a.member_gender
--and RF_AG_UDS_Prev.duration_bracket = a.duration_bracket


','%schema_name%',@schema_name)



      if exists (select * from INFORMATION_SCHEMA.VIEWS where TABLE_SCHEMA = @schema_name and TABLE_NAME = 'vw_proc_membership_ccsr_conditions_10_various_risk_factors_3dx')
	    begin
		  set @sql_temp = 'drop view ' + @schema_name + '.vw_proc_membership_ccsr_conditions_10_various_risk_factors_3dx'
          exec (@sql_temp) 
        end


exec sp_executesql @dynSQL





--5. calculate risk score on member level

set @dynSQL = replace('
if object_id (''%schema_name%.proc_membership_ccsr_conditions_20_member_risk_score_table_3dx'', ''U'') is not null
drop table %schema_name%.proc_membership_ccsr_conditions_20_member_risk_score_table_3dx

select
	chp_carrier_id,
	pdr_product_id,
	zip3,
	home_hosted_indicator,
	a.member_id,
	member_gender,
	age_bracket,
	duration_bracket,
	high_cost_claimant,
	employer_id,
	account_id,
	group_id,
	subgroup,
	group_name,
	insurance_arrangement,
	enrollment_months,
	Member_Months_Q1,
	Member_Months_Q2,
	Member_Months_Q3,
    Member_Months_Q4,
	covid_related_indicator,
	risk_factor_ccsr,
	risk_factor_age_gender,
	risk_factor_ccsr + risk_factor_age_gender as risk_factor_tot
	--risk_factor_ccsr_UDS_Prev + risk_factor_age_gender_UDS_Prev as risk_factor_tot_UDS_Prev,

into %schema_name%.proc_membership_ccsr_conditions_20_member_risk_score_table_3dx
from %schema_name%.proc_membership_attributes_06_bracket_mapped a
left join
(select
	member_id,
	sum(risk_factor_ccsr) as risk_factor_ccsr,
	max(risk_factor_age_gender) as risk_factor_age_gender
	--sum(risk_factor_ccsr_UDS_Prev) as risk_factor_ccsr_UDS_Prev,
	--max(risk_factor_age_gender_UDS_Prev) as risk_factor_age_gender_UDS_Prev
from %schema_name%.vw_proc_membership_ccsr_conditions_10_various_risk_factors_3dx
group by
	member_id) r
on r.member_id = a.member_id;


','%schema_name%',@schema_name)

exec sp_executesql @dynSQL




	  fetch next from cur_schema into @schema_name

    end

  close cur_schema
  deallocate cur_schema


end

/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/




GO
/****** Object:  StoredProcedure [dbo].[sp_Mercer_base_9_create_mbr_clm_views_with_exclusion]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_Mercer_base_9_create_mbr_clm_views_with_exclusion]
/*****************************************************************************
 Description: 
    Common process of processing claims with financial data
	All common process happen in dbo (results refreshed when a plan product is run)


 Parameters:
    schema_name - the plan product to run

 Return:

 Notes:

 Change History:
	2015-10-22 SL - initial version
	2015-10-28 SL - add account paid to allowed ratio
	2015-10-29 SL - add parameter for logging row count purposes
	2015-11-10 SL - move savings and ucr amount to later step
	2016-01-27 SL - add three financial fields which used to created in later step
	                add paid_to_allowed_ratio_bracket
	2016-07-12 SL - change this to views

	2017-05-15 SL - pull additional fields from membership to implement CY15 resubmission 
					exclusion/inclusion
	CY2016
	2017-10-05 SL - groups are consistent with member attributes reassignments, all from reassigned membership 
	                remove the orignal financial fields which are not necessarily to keep for reconciliation purpose
					revise the exclusion flags to be consistent with membership
	2018-02-08 SL - add view for proc_membership_ccsr_conditions_10 and proc_membership_ccsr_conditions_20_member_risk_score
	2018-02-22 SL - add various risk scores from prior factors and firms' factors
 
*****************************************************************************/
											@p_schema_name    varchar(50) = null
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = '@p_schema_name'
	SET @Logging_Values = ISNULL(CAST(@p_schema_name AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/
begin


declare 
	@schema_name varchar(50), 
	@dynSQL nvarchar(max),
	@sql_temp nvarchar(max),
	@row_count int


  declare cur_schema cursor local for
	select 
		schema_name
	from process.data_status_tracking
	  where include_in_uds_pmpm = 1
	  and schema_name = isnull(@p_schema_name, schema_name)
	  order by case when chp_carrier_id in (895, 881, 885, 887) then 9999 else chp_carrier_id end



  open cur_schema
  fetch next from cur_schema into @schema_name

  while ( @@FETCH_STATUS = 0 )
    begin



--2018-02-08 create views for two member data inputs


set @dynSQL = replace('
create view %schema_name%.proc_membership_ccsr_conditions_10_3dx as
select
	a.chp_carrier_id,
	a.pdr_product_id,
	a.ccsr_condition_type,
	a.ccsr_category_code,
	a.home_hosted_indicator,
	a.member_id,
	a.zip3,
	a.member_gender,
	a.member_age,
	a.age_bracket,
	a.enrollment_months,
	a.Member_Months_Q1,
	a.Member_Months_Q2,
	a.Member_Months_Q3,
	a.Member_Months_Q4,
	a.duration_bracket,
	a.high_cost_claimant,
	a.employer_id,
	a.account_id,
	a.group_id,
	a.subgroup,
	a.group_name,
	a.covid_related_indicator,
	a.insurance_arrangement,
	m.employer_group_size,
	a.risk_factor_ccsr,
	a.risk_factor_age_gender,
	m.paid_to_allowed_ratio_bracket_ic,
	m.paid_to_allowed_ratio_bracket_all,
	/************* individual exclusion flags *************/
	m.flag_exclude_groups,
	m.match_ID_type_when_excl_groups,
	m.exclusion_reason,
	m.flag_exclude_fully_insured,
	m.zip_exclusion_flag,
	m.uds_pmpm_exclusion_flag,
	m.host_chp_carrier_id,
	m.host_pdr_product_id
from %schema_name%.proc_membership_ccsr_conditions_10_table_3dx a
left join
%schema_name%.proc_membership_attributes_10_bracket_mapped m
on m.member_id = a.member_id;
','%schema_name%',@schema_name)



      if exists (select * from INFORMATION_SCHEMA.VIEWS where TABLE_SCHEMA = @schema_name and TABLE_NAME = 'proc_membership_ccsr_conditions_10_3dx')
	    begin
		  set @sql_temp = 'drop view ' + @schema_name + '.proc_membership_ccsr_conditions_10_3dx'
          exec (@sql_temp) 
        end


exec sp_executesql @dynSQL


set @dynSQL = replace('
create view %schema_name%.proc_membership_ccsr_conditions_20_member_risk_score_3dx as
select
	a.chp_carrier_id,
	a.pdr_product_id,
	a.zip3,
	a.home_hosted_indicator,
	a.member_id,
	a.member_gender,
	a.age_bracket,
	a.duration_bracket,
	a.high_cost_claimant,
	a.employer_id,
	a.account_id,
	a.group_id,
	a.subgroup,
	a.group_name,
	a.insurance_arrangement,
	m.employer_group_size,
	a.enrollment_months,
	a.Member_Months_Q1,
	a.Member_Months_Q2,
	a.Member_Months_Q3,
	a.Member_Months_Q4,
	a.covid_related_indicator,
	a.risk_factor_ccsr,
	a.risk_factor_age_gender,
	a.risk_factor_tot,
	--a.risk_factor_tot_UDS_Prev,
	m.paid_to_allowed_ratio_bracket_ic,
	m.paid_to_allowed_ratio_bracket_all,
	m.flag_exclude_groups,
	m.match_ID_type_when_excl_groups,
	m.exclusion_reason,
	m.flag_exclude_fully_insured,
	m.zip_exclusion_flag,
	m.uds_pmpm_exclusion_flag,
	m.host_chp_carrier_id,
	m.host_pdr_product_id
from %schema_name%.proc_membership_ccsr_conditions_20_member_risk_score_table_3dx a
left join
%schema_name%.proc_membership_attributes_10_bracket_mapped m
on m.member_id = a.member_id;
','%schema_name%',@schema_name)



      if exists (select * from INFORMATION_SCHEMA.VIEWS where TABLE_SCHEMA = @schema_name and TABLE_NAME = 'proc_membership_ccsr_conditions_20_member_risk_score_3dx')
	    begin
		  set @sql_temp = 'drop view ' + @schema_name + '.proc_membership_ccsr_conditions_20_member_risk_score_3dx'
          exec (@sql_temp) 
        end


exec sp_executesql @dynSQL



	  fetch next from cur_schema into @schema_name

    end

  close cur_schema
  deallocate cur_schema






end/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/




GO
/****** Object:  StoredProcedure [dbo].[sp_Mercer_ra_uds_control_deliverables]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_Mercer_ra_uds_control_deliverables]
/*****************************************************************************
 Description: 
    This is the control center to create final UDS Aon Hewitt Deliverables
	By calling existing pre-packaged stored procedures
	
	Creation of pieces of data is stored in each schema
	View is built to union all plan products result and final conform to UDS Data Layout


 Parameters:
    schema_name - the plan product to run and write almost final results to
	number_of_dx_code - 9 or 3
	replace_tableshell - set to 'Y' for create table for the first time or table shells need revision

 Return:

 Notes:

 Change History:
	2015-12-09 SL - initial version
	2016-03-15 SL - add creating claims sp
					set @p_number_of_dx_code = 9 for the current request

	2016-10-11 SL - for CY2015 Mercer

	2017-05-17 SL - revise for CY15 resubmission

	2018-02-23 SL - revise for CY16 submission
 
*****************************************************************************/
	@p_run_message nvarchar(max), 
    @p_schema_name    varchar(50) = null

as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = '@p_run_message|@p_schema_name'
	SET @Logging_Values = ISNULL(CAST(@p_run_message AS NVARCHAR(MAX)), 'XNULLX') +'|'+ISNULL(CAST(@p_schema_name AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/

begin

SET NOCOUNT OFF


if @p_run_message is null
begin
	raiserror('You have to input message for parameter @p_run_message for logging purpose',1,1) with nowait
end


  declare
	@schema_name              varchar(255)


  declare cur_schema cursor for
	select 
		schema_name
	from process.data_status_tracking
	  where include_in_uds_pmpm = 1
	  and schema_name = isnull(@p_schema_name, schema_name)
	  order by case when chp_carrier_id in (895, 881, 885, 887) then 9999 else chp_carrier_id end



  open cur_schema
  fetch next from cur_schema into @schema_name

  while ( @@FETCH_STATUS = 0 )
    begin

begin try
	  --print 'BEGIN Mercer processing '+@schema_name

	  -- --process member conditions for Mercer
	  exec [dbo].[sp_Mercer_base_7_process_member_CCSR_Conditions] @schema_name
	  exec [dbo].[sp_Mercer_base_75_process_member_risk_score] @schema_name

	  ---- --views with exclusions
	  exec [dbo].[sp_Mercer_base_9_create_mbr_clm_views_with_exclusion] @schema_name

  	  print 'END Mercer processing '+@schema_name

end try

BEGIN CATCH
    -- Execute the error retrieval routine.
    EXECUTE log.usp_GetErrorInfo;
END CATCH

	  fetch next from cur_schema into @schema_name

    end

  close cur_schema
  deallocate cur_schema



--union all detail data together
exec [dbo].[sp_Mercer_base_11_build_views_all_plans_detail]



--run aggregate ONLY for the data that is included in PMPM submission
exec [dbo].[sp_Mercer_UDS_1_create_final_pieces_mbr_clm] 
--	  --proc_30_member_condition
--	  --proc_40_member_pivot


----create output tableshells for membership and claims (not final view for text files yet)
----if tableshell needs revision, revise tableshell sp and set input parameter 'Y'

--print 'Standard Output Table Shells are Recreated'
exec [dbo].[sp_Mercer_UDS_2_create_output_tableshell] 'Y'


----create final data and insert into tableshell
----apply exclusion of negative claim lines
--print 'Insert into Tableshells'
exec [dbo].[sp_Mercer_UDS_3_build_output_table_membership_and_claims]



----no need to change claims table

----build final tables for text files
--print 'Final Tables are built for Text Files'
exec [dbo].[sp_Mercer_UDS_4_build_standard_output_tables]



end
/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/

GO
/****** Object:  StoredProcedure [dbo].[sp_Mercer_UDS_1_create_final_pieces_mbr_clm]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_Mercer_UDS_1_create_final_pieces_mbr_clm]
/*****************************************************************************
 Description: 
    Common process of processing claims with financial data
	All common process happen in dbo (results refreshed when a plan product is run)


 Parameters:
    schema_name - the plan product to run
	rerun_code - 0 both membership and claims, 1 membership only, 2 claims only

 Return:

 Notes:

 Change History:
	
	2017-05-05 SL - CY15 resubmission revision for implement custom exclusion in deliverables
					move table creation of proc_membership_ccs_conditions_30_aggregated_risk_score to this SP from sp_base_9_process_membership
	2017-05-15 SL - change the source from to all_plans views
	CY2016
	2018-02-16 SL - apply the Fully Insured exclusion here - due to GAP and Anthem internal hosted data for CO/NV
	                insurance arrangement value replaced by employer_group_size (there are 500 members where insurance arrangement is F, but employer_group_size is SL or NULL for Highmark ALT, will use SL for those members)
	2018-02-22 SL - add various risk scores from prior factors and firms' factors
	2018-02-27 SL - add other_provider_payment
	2018-10-10 SL - add line_of_business in join clause for the Fully Insured exclusion
	2018-10-18 SL - revise for Anthem HOME version
	2021-08-11 TK - Added new fields and logic for quaterly fields and covid_related_indicator. Removed aon_risk_score fields and line_of_business fields
 
*****************************************************************************/
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = ''
	SET @Logging_Values = ISNULL(CAST(NULL AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/
begin

---fix for Anthem COB1/NVB1 with duplicate members ---to identify and fix the covid related indicator. Need a bettter fix for CY21
drop table if exists #a
select
	coalesce(b.host_chp_carrier_id, a.chp_carrier_id) as chp_carrier_id,
	coalesce(b.host_pdr_product_id, a.pdr_product_id) as pdr_product_id,
	a.zip3,
	member_id,
	a.home_hosted_indicator,
	member_gender,
	age_bracket,
	duration_bracket,
	paid_to_allowed_ratio_bracket_ic,
	paid_to_allowed_ratio_bracket_all,
	high_cost_claimant,
	employer_group_size, 
	covid_related_indicator,
	enrollment_months,
	Member_Months_Q1,
	Member_Months_Q2,
	Member_Months_Q3,
	Member_Months_Q4,
	risk_factor_ccsr,
	risk_factor_age_gender,
	risk_factor_tot
into #a
from all_plans.vw_proc_membership_ccsr_conditions_20_member_risk_score_3dx_b4_exclusion a
join
 Reference.ref_Fully_Insured_Final_Rules b
on b.chp_carrier_id = a.chp_carrier_id
and b.pdr_product_id = a.pdr_product_id
and b.home_hosted_indicator = a.home_hosted_indicator   
and b.zip3 = a.zip3
and b.insurance_arrangement = a.insurance_arrangement
and a.flag_exclude_groups = 'N'
and b.flag_exclude_FI = 'N'


Drop table if exists #two
select member_id, count(member_id) as cnt into #two 
from #a
where pdr_product_id in ('cob1', 'nvb1')
group by member_id
having count(member_id) >1



drop table if exists #duplicates
select * into #duplicates from #a where member_id in (select member_id from #two) and pdr_product_id in ('cob1', 'nvb1')
order by member_id

--select * from #duplicates order by member_id


Drop table if exists #covid
select * into #covid from(
select member_id,
covid_related_indicator,
row_number() over(partition by member_id order by case when covid_related_indicator='YI' then 1 when covid_related_indicator='YN' then 2 else 3 end) as covid_in
from #duplicates)a
where covid_in=1


update a
set covid_related_indicator=b.covid_related_indicator
from #a a
join #covid b
on a.member_id=b.member_id

--calculate member_count, member_months and average_risk_scores (group by)


if object_id ('all_plans.proc_membership_ccsr_conditions_30_aggregated_risk_score_3dx', 'U') is not null
drop table all_plans.proc_membership_ccsr_conditions_30_aggregated_risk_score_3dx;

select
	--coalesce(b.host_chp_carrier_id, a.chp_carrier_id) as chp_carrier_id,
	--coalesce(b.host_pdr_product_id, a.pdr_product_id) as pdr_product_id,
	chp_carrier_id,
	pdr_product_id,
	a.zip3,
	--member_id,
	--home_hosted_indicator,
	member_gender,
	age_bracket,
	duration_bracket,
	paid_to_allowed_ratio_bracket_ic,
	paid_to_allowed_ratio_bracket_all,
	high_cost_claimant,
	coalesce(employer_group_size, 'SL') as insurance_arrangement,
	covid_related_indicator,
	count(*) as member_count,
	sum(enrollment_months) as member_months_Annual,
	sum(Member_Months_Q1)as Member_Months_Q1,
	sum(Member_Months_Q2) as Member_Months_Q2,
	sum(Member_Months_Q3) as Member_Months_Q3,
	sum(Member_Months_Q4) as Member_Months_Q4,
	sum(risk_factor_ccsr)/count(*) as avg_risk_score_ccsr,
	sum(risk_factor_age_gender)/count(*) as avg_risk_score_age_gender,
	sum(risk_factor_tot)/count(*) as avg_risk_score
	--sum(risk_factor_tot_UDS_Prev)/count(*) as avg_risk_score_UDS_Prev   
into all_plans.proc_membership_ccsr_conditions_30_aggregated_risk_score_3dx
from  #a a
--all_plans.vw_proc_membership_ccsr_conditions_20_member_risk_score_3dx_b4_exclusion a
--join
-- Reference.ref_Fully_Insured_Final_Rules b
--on b.chp_carrier_id = a.chp_carrier_id
--and b.pdr_product_id = a.pdr_product_id
--and b.home_hosted_indicator = a.home_hosted_indicator   
--and b.zip3 = a.zip3
--and b.insurance_arrangement = a.insurance_arrangement
--and a.flag_exclude_groups = 'N'
--and b.flag_exclude_FI = 'N'
--and b.pdr_product_id <>'cal3'
group by
	--coalesce(b.host_chp_carrier_id, a.chp_carrier_id),
	--coalesce(b.host_pdr_product_id, a.pdr_product_id),
	chp_carrier_id,
	pdr_product_id,
	a.zip3,
	--member_id,
	--home_hosted_indicator,
	member_gender,
	age_bracket,
	duration_bracket,
	high_cost_claimant,
	coalesce(employer_group_size, 'SL'),
	paid_to_allowed_ratio_bracket_ic,
	paid_to_allowed_ratio_bracket_all,
	covid_related_indicator

--Members  whose dob are in 2020 which results in a null age bracket. Data needs to be excluded
Delete from all_plans.proc_membership_ccsr_conditions_30_aggregated_risk_score_3dx where age_bracket is null

select sum(member_count) from all_plans.proc_membership_ccsr_conditions_30_aggregated_risk_score_3dx where chp_carrier_id<>9999 and CONCAT(zip3, pdr_product_id)not in( '193PAB6', '193PAB1', '193PAL6', '193DEB1')

--apply pivot function to transform CCSR conditions

--create string in the pivot function


DECLARE @cols AS NVARCHAR(MAX),
    @query  AS NVARCHAR(MAX)

select @cols = STUFF((SELECT ',' + QUOTENAME(ccsr_condition_type) 
                    from reference.ref_ccsr_condition_shell
                    group by ccsr_condition_type
                    order by case when ccsr_condition_type like '%.[0-9]' then 'Z'
					              when ccsr_condition_type = 'ConditionXXXXXX' then 'A' else 'C' end,
								  ccsr_condition_type
            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')

--select @cols

if object_id ('all_plans.proc_membership_ccsr_conditions_40_transform_ccsr_conditions_3dx', 'U') is not null
drop table all_plans.proc_membership_ccsr_conditions_40_transform_ccsr_conditions_3dx;

set @query = 'SELECT chp_carrier_id, 
                      pdr_product_id, 
					  zip3, 
					  member_gender, 
					  age_bracket, 
					  duration_bracket, 
					  high_cost_claimant,
					  insurance_arrangement, 
					  paid_to_allowed_ratio_bracket_ic,
					  paid_to_allowed_ratio_bracket_all,
					  ' + @cols + 
' into all_plans.proc_membership_ccsr_conditions_40_transform_ccsr_conditions_3dx from 

             (
                select 
					coalesce(b.host_chp_carrier_id, a.chp_carrier_id) as chp_carrier_id,
					coalesce(b.host_pdr_product_id, a.pdr_product_id) as pdr_product_id,
					member_id,
					a.zip3,
					member_gender,
					age_bracket,
					duration_bracket,
					high_cost_claimant,
					coalesce(employer_group_size, ''SL'') as insurance_arrangement,
					paid_to_allowed_ratio_bracket_ic,
	                paid_to_allowed_ratio_bracket_all,
					ccsr_condition_type
                from all_plans.vw_proc_membership_ccsr_conditions_10_3dx_b4_exclusion a
				join
				Reference.ref_Fully_Insured_Final_Rules b
				on b.chp_carrier_id = a.chp_carrier_id
				and b.pdr_product_id = a.pdr_product_id
				and b.home_hosted_indicator = a.home_hosted_indicator   
				and b.zip3 = a.zip3
				and b.insurance_arrangement = a.insurance_arrangement
				and a.flag_exclude_groups = ''N''
				and b.flag_exclude_FI = ''N''
				and b.pdr_product_id <>''cal3''

            ) x
            pivot 
            (
                count(member_id)
                for ccsr_condition_type in (' + @cols + ')
            ) p '

--select @query

execute(@query);

--Members  whose dob are in 2020 which results in a null age bracket. Data needs to be excluded
delete from all_plans.proc_membership_ccsr_conditions_40_transform_ccsr_conditions_3dx where age_bracket is null




end/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/


GO
/****** Object:  StoredProcedure [dbo].[sp_Mercer_UDS_2_create_output_tableshell]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[sp_Mercer_UDS_2_create_output_tableshell]
/*****************************************************************************
Description: 
    Make create output tableshell as procedure


 Parameters:
    p_replace_existing - whether to drop tableshell and recreate

 Return:

 Notes:

 Change History:
	2015-11-19 SL - initial version
	2016-07-12 SL - add paid to allowed ratio bracket, rename ucr_amount to RnC_Cutback_amount
	2017-05-15 SL - remove schema_name from OUTPUT_STD.UDS_PMPM_Membership_and_Risk_Data

	2018-02-23 SL - add more risk scores fields, this is the INTERNAL table
	2018-10-10 SL - add the compound CCS categories in the membership table
	                add Adjusted RnC Cutback field in the claims table
	2020-08-12 TK - Removed ccs categories
	2020-08-12 TK - Added quaterly indicator fields, covid_related field and new CCSR categories
 
*****************************************************************************/
								@p_replace_existing          varchar(1)  = 'Y'

as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = NULL
	SET @Logging_Values = NULL
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/
begin




--membership, requires not null for all fields

drop table if exists OUTPUT_STD.UDS_PMPM_Membership_and_Risk_Data_INTERNAL_3dx

create table OUTPUT_STD.UDS_PMPM_Membership_and_Risk_Data_INTERNAL_3dx
(
chp_carrier_id	varchar(10)	NOT NULL,
pdr_product_id	varchar(10)	NOT NULL,
uds_network_identifier	varchar(255)	NOT NULL,
service_period	varchar(20)	NOT NULL,
zip3	varchar(3)	NOT NULL,
uds_prod_ind	varchar(10)	NOT NULL,
member_gender	varchar(1)	NOT NULL,
age_bracket	varchar(10)	NOT NULL,
duration_bracket	varchar(10)	NOT NULL,
paid_to_allowed_ratio_bracket_IC varchar(25) NOT NULL,
paid_to_allowed_ratio_bracket_ALL varchar(25) NOT NULL,
high_cost_claimant	varchar(1)	NOT NULL,
arrangement_group_size_indicator	varchar(2)	NOT NULL, 
[COVID-Related Indicator] varchar(2)	NOT NULL,
member_count	int	NOT NULL,
[Member Months - Annual] int	NOT NULL,
[Member Months - Q1] int	NOT NULL,
[Member Months - Q2] int	NOT NULL,
[Member Months - Q3] int	NOT NULL,
[Member Months - Q4] int	NOT NULL,
avg_risk_score_ccsr	decimal(20,4)	NOT NULL,
avg_risk_score_age_gender	decimal(20,4)	NOT NULL,
avg_risk_score	decimal(20,4)	NOT NULL,
--avg_risk_score_UDS_Prev decimal(20,4)	NOT NULL,     
[ConditionXXXXXX]      int  NOT NULL,
[Condition000000]      int  NOT NULL,
[ConditionBLD001]      int  NOT NULL,
[ConditionBLD002]      int  NOT NULL,
[ConditionBLD003]      int  NOT NULL,
[ConditionBLD004]      int  NOT NULL,
[ConditionBLD005]      int  NOT NULL,
[ConditionBLD006]      int  NOT NULL,
[ConditionBLD007]      int  NOT NULL,
[ConditionBLD008]      int  NOT NULL,
[ConditionBLD009]      int  NOT NULL,
[ConditionBLD010]      int  NOT NULL,
[ConditionCIR001]      int  NOT NULL,
[ConditionCIR002]      int  NOT NULL,
[ConditionCIR003]      int  NOT NULL,
[ConditionCIR004]      int  NOT NULL,
[ConditionCIR005]      int  NOT NULL,
[ConditionCIR006]      int  NOT NULL,
[ConditionCIR007]      int  NOT NULL,
[ConditionCIR008]      int  NOT NULL,
[ConditionCIR009]      int  NOT NULL,
[ConditionCIR010]      int  NOT NULL,
[ConditionCIR011]      int  NOT NULL,
[ConditionCIR012]      int  NOT NULL,
[ConditionCIR013]      int  NOT NULL,
[ConditionCIR014]      int  NOT NULL,
[ConditionCIR015]      int  NOT NULL,
[ConditionCIR016]      int  NOT NULL,
[ConditionCIR017]      int  NOT NULL,
[ConditionCIR018]      int  NOT NULL,
[ConditionCIR019]      int  NOT NULL,
[ConditionCIR020]      int  NOT NULL,
[ConditionCIR021]      int  NOT NULL,
[ConditionCIR022]      int  NOT NULL,
[ConditionCIR023]      int  NOT NULL,
[ConditionCIR024]      int  NOT NULL,
[ConditionCIR025]      int  NOT NULL,
[ConditionCIR026]      int  NOT NULL,
[ConditionCIR027]      int  NOT NULL,
[ConditionCIR028]      int  NOT NULL,
[ConditionCIR029]      int  NOT NULL,
[ConditionCIR030]      int  NOT NULL,
[ConditionCIR031]      int  NOT NULL,
[ConditionCIR032]      int  NOT NULL,
[ConditionCIR033]      int  NOT NULL,
[ConditionCIR034]      int  NOT NULL,
[ConditionCIR035]      int  NOT NULL,
[ConditionCIR036]      int  NOT NULL,
[ConditionCIR037]      int  NOT NULL,
[ConditionCIR038]      int  NOT NULL,
[ConditionCIR039]      int  NOT NULL,
[ConditionDIG001]      int  NOT NULL,
[ConditionDIG002]      int  NOT NULL,
[ConditionDIG003]      int  NOT NULL,
[ConditionDIG004]      int  NOT NULL,
[ConditionDIG005]      int  NOT NULL,
[ConditionDIG006]      int  NOT NULL,
[ConditionDIG007]      int  NOT NULL,
[ConditionDIG008]      int  NOT NULL,
[ConditionDIG009]      int  NOT NULL,
[ConditionDIG010]      int  NOT NULL,
[ConditionDIG011]      int  NOT NULL,
[ConditionDIG012]      int  NOT NULL,
[ConditionDIG013]      int  NOT NULL,
[ConditionDIG014]      int  NOT NULL,
[ConditionDIG015]      int  NOT NULL,
[ConditionDIG016]      int  NOT NULL,
[ConditionDIG017]      int  NOT NULL,
[ConditionDIG018]      int  NOT NULL,
[ConditionDIG019]      int  NOT NULL,
[ConditionDIG020]      int  NOT NULL,
[ConditionDIG021]      int  NOT NULL,
[ConditionDIG022]      int  NOT NULL,
[ConditionDIG023]      int  NOT NULL,
[ConditionDIG024]      int  NOT NULL,
[ConditionDIG025]      int  NOT NULL,
[ConditionEAR001]      int  NOT NULL,
[ConditionEAR002]      int  NOT NULL,
[ConditionEAR003]      int  NOT NULL,
[ConditionEAR004]      int  NOT NULL,
[ConditionEAR005]      int  NOT NULL,
[ConditionEAR006]      int  NOT NULL,
[ConditionEND001]      int  NOT NULL,
[ConditionEND002]      int  NOT NULL,
[ConditionEND003]      int  NOT NULL,
[ConditionEND004]      int  NOT NULL,
[ConditionEND005]      int  NOT NULL,
[ConditionEND006]      int  NOT NULL,
[ConditionEND007]      int  NOT NULL,
[ConditionEND008]      int  NOT NULL,
[ConditionEND009]      int  NOT NULL,
[ConditionEND010]      int  NOT NULL,
[ConditionEND011]      int  NOT NULL,
[ConditionEND012]      int  NOT NULL,
[ConditionEND013]      int  NOT NULL,
[ConditionEND014]      int  NOT NULL,
[ConditionEND015]      int  NOT NULL,
[ConditionEND016]      int  NOT NULL,
[ConditionEND017]      int  NOT NULL,
[ConditionEXT001]      int  NOT NULL,
[ConditionEXT002]      int  NOT NULL,
[ConditionEXT003]      int  NOT NULL,
[ConditionEXT004]      int  NOT NULL,
[ConditionEXT005]      int  NOT NULL,
[ConditionEXT006]      int  NOT NULL,
[ConditionEXT007]      int  NOT NULL,
[ConditionEXT008]      int  NOT NULL,
[ConditionEXT009]      int  NOT NULL,
[ConditionEXT010]      int  NOT NULL,
[ConditionEXT011]      int  NOT NULL,
[ConditionEXT012]      int  NOT NULL,
[ConditionEXT013]      int  NOT NULL,
[ConditionEXT014]      int  NOT NULL,
[ConditionEXT015]      int  NOT NULL,
[ConditionEXT016]      int  NOT NULL,
[ConditionEXT017]      int  NOT NULL,
[ConditionEXT018]      int  NOT NULL,
[ConditionEXT019]      int  NOT NULL,
[ConditionEXT020]      int  NOT NULL,
[ConditionEXT021]      int  NOT NULL,
[ConditionEXT022]      int  NOT NULL,
[ConditionEXT023]      int  NOT NULL,
[ConditionEXT024]      int  NOT NULL,
[ConditionEXT025]      int  NOT NULL,
[ConditionEXT026]      int  NOT NULL,
[ConditionEXT027]      int  NOT NULL,
[ConditionEXT028]      int  NOT NULL,
[ConditionEXT029]      int  NOT NULL,
[ConditionEXT030]      int  NOT NULL,
[ConditionEYE001]      int  NOT NULL,
[ConditionEYE002]      int  NOT NULL,
[ConditionEYE003]      int  NOT NULL,
[ConditionEYE004]      int  NOT NULL,
[ConditionEYE005]      int  NOT NULL,
[ConditionEYE006]      int  NOT NULL,
[ConditionEYE007]      int  NOT NULL,
[ConditionEYE008]      int  NOT NULL,
[ConditionEYE009]      int  NOT NULL,
[ConditionEYE010]      int  NOT NULL,
[ConditionEYE011]      int  NOT NULL,
[ConditionEYE012]      int  NOT NULL,
[ConditionFAC001]      int  NOT NULL,
[ConditionFAC002]      int  NOT NULL,
[ConditionFAC003]      int  NOT NULL,
[ConditionFAC004]      int  NOT NULL,
[ConditionFAC005]      int  NOT NULL,
[ConditionFAC006]      int  NOT NULL,
[ConditionFAC007]      int  NOT NULL,
[ConditionFAC008]      int  NOT NULL,
[ConditionFAC009]      int  NOT NULL,
[ConditionFAC010]      int  NOT NULL,
[ConditionFAC011]      int  NOT NULL,
[ConditionFAC012]      int  NOT NULL,
[ConditionFAC013]      int  NOT NULL,
[ConditionFAC014]      int  NOT NULL,
[ConditionFAC015]      int  NOT NULL,
[ConditionFAC016]      int  NOT NULL,
[ConditionFAC017]      int  NOT NULL,
[ConditionFAC018]      int  NOT NULL,
[ConditionFAC019]      int  NOT NULL,
[ConditionFAC020]      int  NOT NULL,
[ConditionFAC021]      int  NOT NULL,
[ConditionFAC022]      int  NOT NULL,
[ConditionFAC023]      int  NOT NULL,
[ConditionFAC024]      int  NOT NULL,
[ConditionFAC025]      int  NOT NULL,
[ConditionGEN001]      int  NOT NULL,
[ConditionGEN002]      int  NOT NULL,
[ConditionGEN003]      int  NOT NULL,
[ConditionGEN004]      int  NOT NULL,
[ConditionGEN005]      int  NOT NULL,
[ConditionGEN006]      int  NOT NULL,
[ConditionGEN007]      int  NOT NULL,
[ConditionGEN008]      int  NOT NULL,
[ConditionGEN009]      int  NOT NULL,
[ConditionGEN010]      int  NOT NULL,
[ConditionGEN011]      int  NOT NULL,
[ConditionGEN012]      int  NOT NULL,
[ConditionGEN013]      int  NOT NULL,
[ConditionGEN014]      int  NOT NULL,
[ConditionGEN015]      int  NOT NULL,
[ConditionGEN016]      int  NOT NULL,
[ConditionGEN017]      int  NOT NULL,
[ConditionGEN018]      int  NOT NULL,
[ConditionGEN019]      int  NOT NULL,
[ConditionGEN020]      int  NOT NULL,
[ConditionGEN021]      int  NOT NULL,
[ConditionGEN022]      int  NOT NULL,
[ConditionGEN023]      int  NOT NULL,
[ConditionGEN024]      int  NOT NULL,
[ConditionGEN025]      int  NOT NULL,
[ConditionGEN026]      int  NOT NULL,
[ConditionINF001]      int  NOT NULL,
[ConditionINF002]      int  NOT NULL,
[ConditionINF003]      int  NOT NULL,
[ConditionINF004]      int  NOT NULL,
[ConditionINF005]      int  NOT NULL,
[ConditionINF006]      int  NOT NULL,
[ConditionINF007]      int  NOT NULL,
[ConditionINF008]      int  NOT NULL,
[ConditionINF009]      int  NOT NULL,
[ConditionINF010]      int  NOT NULL,
[ConditionINF011]      int  NOT NULL,
[ConditionINJ001]      int  NOT NULL,
[ConditionINJ002]      int  NOT NULL,
[ConditionINJ003]      int  NOT NULL,
[ConditionINJ004]      int  NOT NULL,
[ConditionINJ005]      int  NOT NULL,
[ConditionINJ006]      int  NOT NULL,
[ConditionINJ007]      int  NOT NULL,
[ConditionINJ008]      int  NOT NULL,
[ConditionINJ009]      int  NOT NULL,
[ConditionINJ010]      int  NOT NULL,
[ConditionINJ011]      int  NOT NULL,
[ConditionINJ012]      int  NOT NULL,
[ConditionINJ013]      int  NOT NULL,
[ConditionINJ014]      int  NOT NULL,
[ConditionINJ015]      int  NOT NULL,
[ConditionINJ016]      int  NOT NULL,
[ConditionINJ017]      int  NOT NULL,
[ConditionINJ018]      int  NOT NULL,
[ConditionINJ019]      int  NOT NULL,
[ConditionINJ020]      int  NOT NULL,
[ConditionINJ021]      int  NOT NULL,
[ConditionINJ022]      int  NOT NULL,
[ConditionINJ023]      int  NOT NULL,
[ConditionINJ024]      int  NOT NULL,
[ConditionINJ025]      int  NOT NULL,
[ConditionINJ026]      int  NOT NULL,
[ConditionINJ027]      int  NOT NULL,
[ConditionINJ028]      int  NOT NULL,
[ConditionINJ029]      int  NOT NULL,
[ConditionINJ030]      int  NOT NULL,
[ConditionINJ031]      int  NOT NULL,
[ConditionINJ032]      int  NOT NULL,
[ConditionINJ033]      int  NOT NULL,
[ConditionINJ034]      int  NOT NULL,
[ConditionINJ035]      int  NOT NULL,
[ConditionINJ036]      int  NOT NULL,
[ConditionINJ037]      int  NOT NULL,
[ConditionINJ038]      int  NOT NULL,
[ConditionINJ039]      int  NOT NULL,
[ConditionINJ040]      int  NOT NULL,
[ConditionINJ041]      int  NOT NULL,
[ConditionINJ042]      int  NOT NULL,
[ConditionINJ043]      int  NOT NULL,
[ConditionINJ044]      int  NOT NULL,
[ConditionINJ045]      int  NOT NULL,
[ConditionINJ046]      int  NOT NULL,
[ConditionINJ047]      int  NOT NULL,
[ConditionINJ048]      int  NOT NULL,
[ConditionINJ049]      int  NOT NULL,
[ConditionINJ050]      int  NOT NULL,
[ConditionINJ051]      int  NOT NULL,
[ConditionINJ052]      int  NOT NULL,
[ConditionINJ053]      int  NOT NULL,
[ConditionINJ054]      int  NOT NULL,
[ConditionINJ055]      int  NOT NULL,
[ConditionINJ056]      int  NOT NULL,
[ConditionINJ057]      int  NOT NULL,
[ConditionINJ058]      int  NOT NULL,
[ConditionINJ059]      int  NOT NULL,
[ConditionINJ060]      int  NOT NULL,
[ConditionINJ061]      int  NOT NULL,
[ConditionINJ062]      int  NOT NULL,
[ConditionINJ063]      int  NOT NULL,
[ConditionINJ064]      int  NOT NULL,
[ConditionINJ065]      int  NOT NULL,
[ConditionINJ066]      int  NOT NULL,
[ConditionINJ067]      int  NOT NULL,
[ConditionINJ068]      int  NOT NULL,
[ConditionINJ069]      int  NOT NULL,
[ConditionINJ070]      int  NOT NULL,
[ConditionINJ071]      int  NOT NULL,
[ConditionINJ072]      int  NOT NULL,
[ConditionINJ073]      int  NOT NULL,
[ConditionINJ074]      int  NOT NULL,
[ConditionINJ075]      int  NOT NULL,
[ConditionINJ076]      int  NOT NULL,
[ConditionMAL001]      int  NOT NULL,
[ConditionMAL002]      int  NOT NULL,
[ConditionMAL003]      int  NOT NULL,
[ConditionMAL004]      int  NOT NULL,
[ConditionMAL005]      int  NOT NULL,
[ConditionMAL006]      int  NOT NULL,
[ConditionMAL007]      int  NOT NULL,
[ConditionMAL008]      int  NOT NULL,
[ConditionMAL009]      int  NOT NULL,
[ConditionMAL010]      int  NOT NULL,
[ConditionMBD001]      int  NOT NULL,
[ConditionMBD002]      int  NOT NULL,
[ConditionMBD003]      int  NOT NULL,
[ConditionMBD004]      int  NOT NULL,
[ConditionMBD005]      int  NOT NULL,
[ConditionMBD006]      int  NOT NULL,
[ConditionMBD007]      int  NOT NULL,
[ConditionMBD008]      int  NOT NULL,
[ConditionMBD009]      int  NOT NULL,
[ConditionMBD010]      int  NOT NULL,
[ConditionMBD011]      int  NOT NULL,
[ConditionMBD012]      int  NOT NULL,
[ConditionMBD013]      int  NOT NULL,
[ConditionMBD014]      int  NOT NULL,
[ConditionMBD017]      int  NOT NULL,
[ConditionMBD018]      int  NOT NULL,
[ConditionMBD019]      int  NOT NULL,
[ConditionMBD020]      int  NOT NULL,
[ConditionMBD021]      int  NOT NULL,
[ConditionMBD022]      int  NOT NULL,
[ConditionMBD023]      int  NOT NULL,
[ConditionMBD024]      int  NOT NULL,
[ConditionMBD025]      int  NOT NULL,
[ConditionMBD026]      int  NOT NULL,
[ConditionMBD027]      int  NOT NULL,
[ConditionMBD028]      int  NOT NULL,
[ConditionMBD029]      int  NOT NULL,
[ConditionMBD030]      int  NOT NULL,
[ConditionMBD031]      int  NOT NULL,
[ConditionMBD032]      int  NOT NULL,
[ConditionMBD033]      int  NOT NULL,
[ConditionMBD034]      int  NOT NULL,
[ConditionMUS001]      int  NOT NULL,
[ConditionMUS002]      int  NOT NULL,
[ConditionMUS003]      int  NOT NULL,
[ConditionMUS004]      int  NOT NULL,
[ConditionMUS005]      int  NOT NULL,
[ConditionMUS006]      int  NOT NULL,
[ConditionMUS007]      int  NOT NULL,
[ConditionMUS008]      int  NOT NULL,
[ConditionMUS009]      int  NOT NULL,
[ConditionMUS010]      int  NOT NULL,
[ConditionMUS011]      int  NOT NULL,
[ConditionMUS012]      int  NOT NULL,
[ConditionMUS013]      int  NOT NULL,
[ConditionMUS014]      int  NOT NULL,
[ConditionMUS015]      int  NOT NULL,
[ConditionMUS016]      int  NOT NULL,
[ConditionMUS017]      int  NOT NULL,
[ConditionMUS018]      int  NOT NULL,
[ConditionMUS019]      int  NOT NULL,
[ConditionMUS020]      int  NOT NULL,
[ConditionMUS021]      int  NOT NULL,
[ConditionMUS022]      int  NOT NULL,
[ConditionMUS023]      int  NOT NULL,
[ConditionMUS024]      int  NOT NULL,
[ConditionMUS025]      int  NOT NULL,
[ConditionMUS026]      int  NOT NULL,
[ConditionMUS027]      int  NOT NULL,
[ConditionMUS028]      int  NOT NULL,
[ConditionMUS029]      int  NOT NULL,
[ConditionMUS030]      int  NOT NULL,
[ConditionMUS031]      int  NOT NULL,
[ConditionMUS032]      int  NOT NULL,
[ConditionMUS033]      int  NOT NULL,
[ConditionMUS034]      int  NOT NULL,
[ConditionMUS035]      int  NOT NULL,
[ConditionMUS036]      int  NOT NULL,
[ConditionMUS037]      int  NOT NULL,
[ConditionMUS038]      int  NOT NULL,
[ConditionNEO001]      int  NOT NULL,
[ConditionNEO002]      int  NOT NULL,
[ConditionNEO003]      int  NOT NULL,
[ConditionNEO004]      int  NOT NULL,
[ConditionNEO005]      int  NOT NULL,
[ConditionNEO006]      int  NOT NULL,
[ConditionNEO007]      int  NOT NULL,
[ConditionNEO008]      int  NOT NULL,
[ConditionNEO009]      int  NOT NULL,
[ConditionNEO010]      int  NOT NULL,
[ConditionNEO011]      int  NOT NULL,
[ConditionNEO012]      int  NOT NULL,
[ConditionNEO013]      int  NOT NULL,
[ConditionNEO014]      int  NOT NULL,
[ConditionNEO015]      int  NOT NULL,
[ConditionNEO016]      int  NOT NULL,
[ConditionNEO017]      int  NOT NULL,
[ConditionNEO018]      int  NOT NULL,
[ConditionNEO019]      int  NOT NULL,
[ConditionNEO020]      int  NOT NULL,
[ConditionNEO021]      int  NOT NULL,
[ConditionNEO022]      int  NOT NULL,
[ConditionNEO023]      int  NOT NULL,
[ConditionNEO024]      int  NOT NULL,
[ConditionNEO025]      int  NOT NULL,
[ConditionNEO026]      int  NOT NULL,
[ConditionNEO027]      int  NOT NULL,
[ConditionNEO028]      int  NOT NULL,
[ConditionNEO029]      int  NOT NULL,
[ConditionNEO030]      int  NOT NULL,
[ConditionNEO031]      int  NOT NULL,
[ConditionNEO032]      int  NOT NULL,
[ConditionNEO033]      int  NOT NULL,
[ConditionNEO034]      int  NOT NULL,
[ConditionNEO035]      int  NOT NULL,
[ConditionNEO036]      int  NOT NULL,
[ConditionNEO037]      int  NOT NULL,
[ConditionNEO038]      int  NOT NULL,
[ConditionNEO039]      int  NOT NULL,
[ConditionNEO040]      int  NOT NULL,
[ConditionNEO041]      int  NOT NULL,
[ConditionNEO042]      int  NOT NULL,
[ConditionNEO043]      int  NOT NULL,
[ConditionNEO044]      int  NOT NULL,
[ConditionNEO045]      int  NOT NULL,
[ConditionNEO046]      int  NOT NULL,
[ConditionNEO047]      int  NOT NULL,
[ConditionNEO048]      int  NOT NULL,
[ConditionNEO049]      int  NOT NULL,
[ConditionNEO050]      int  NOT NULL,
[ConditionNEO051]      int  NOT NULL,
[ConditionNEO052]      int  NOT NULL,
[ConditionNEO053]      int  NOT NULL,
[ConditionNEO054]      int  NOT NULL,
[ConditionNEO055]      int  NOT NULL,
[ConditionNEO056]      int  NOT NULL,
[ConditionNEO057]      int  NOT NULL,
[ConditionNEO058]      int  NOT NULL,
[ConditionNEO059]      int  NOT NULL,
[ConditionNEO060]      int  NOT NULL,
[ConditionNEO061]      int  NOT NULL,
[ConditionNEO062]      int  NOT NULL,
[ConditionNEO063]      int  NOT NULL,
[ConditionNEO064]      int  NOT NULL,
[ConditionNEO065]      int  NOT NULL,
[ConditionNEO066]      int  NOT NULL,
[ConditionNEO067]      int  NOT NULL,
[ConditionNEO068]      int  NOT NULL,
[ConditionNEO069]      int  NOT NULL,
[ConditionNEO070]      int  NOT NULL,
[ConditionNEO071]      int  NOT NULL,
[ConditionNEO072]      int  NOT NULL,
[ConditionNEO073]      int  NOT NULL,
[ConditionNEO074]      int  NOT NULL,
[ConditionNVS001]      int  NOT NULL,
[ConditionNVS002]      int  NOT NULL,
[ConditionNVS003]      int  NOT NULL,
[ConditionNVS004]      int  NOT NULL,
[ConditionNVS005]      int  NOT NULL,
[ConditionNVS006]      int  NOT NULL,
[ConditionNVS007]      int  NOT NULL,
[ConditionNVS008]      int  NOT NULL,
[ConditionNVS009]      int  NOT NULL,
[ConditionNVS010]      int  NOT NULL,
[ConditionNVS011]      int  NOT NULL,
[ConditionNVS012]      int  NOT NULL,
[ConditionNVS013]      int  NOT NULL,
[ConditionNVS014]      int  NOT NULL,
[ConditionNVS015]      int  NOT NULL,
[ConditionNVS016]      int  NOT NULL,
[ConditionNVS017]      int  NOT NULL,
[ConditionNVS018]      int  NOT NULL,
[ConditionNVS019]      int  NOT NULL,
[ConditionNVS020]      int  NOT NULL,
[ConditionNVS021]      int  NOT NULL,
[ConditionNVS022]      int  NOT NULL,
[ConditionPNL001]      int  NOT NULL,
[ConditionPNL002]      int  NOT NULL,
[ConditionPNL003]      int  NOT NULL,
[ConditionPNL004]      int  NOT NULL,
[ConditionPNL005]      int  NOT NULL,
[ConditionPNL006]      int  NOT NULL,
[ConditionPNL007]      int  NOT NULL,
[ConditionPNL008]      int  NOT NULL,
[ConditionPNL009]      int  NOT NULL,
[ConditionPNL010]      int  NOT NULL,
[ConditionPNL011]      int  NOT NULL,
[ConditionPNL012]      int  NOT NULL,
[ConditionPNL013]      int  NOT NULL,
[ConditionPNL014]      int  NOT NULL,
[ConditionPNL015]      int  NOT NULL,
[ConditionPRG001]      int  NOT NULL,
[ConditionPRG002]      int  NOT NULL,
[ConditionPRG003]      int  NOT NULL,
[ConditionPRG004]      int  NOT NULL,
[ConditionPRG005]      int  NOT NULL,
[ConditionPRG006]      int  NOT NULL,
[ConditionPRG007]      int  NOT NULL,
[ConditionPRG008]      int  NOT NULL,
[ConditionPRG009]      int  NOT NULL,
[ConditionPRG010]      int  NOT NULL,
[ConditionPRG011]      int  NOT NULL,
[ConditionPRG012]      int  NOT NULL,
[ConditionPRG013]      int  NOT NULL,
[ConditionPRG014]      int  NOT NULL,
[ConditionPRG015]      int  NOT NULL,
[ConditionPRG016]      int  NOT NULL,
[ConditionPRG017]      int  NOT NULL,
[ConditionPRG018]      int  NOT NULL,
[ConditionPRG019]      int  NOT NULL,
[ConditionPRG020]      int  NOT NULL,
[ConditionPRG021]      int  NOT NULL,
[ConditionPRG022]      int  NOT NULL,
[ConditionPRG023]      int  NOT NULL,
[ConditionPRG024]      int  NOT NULL,
[ConditionPRG025]      int  NOT NULL,
[ConditionPRG026]      int  NOT NULL,
[ConditionPRG027]      int  NOT NULL,
[ConditionPRG028]      int  NOT NULL,
[ConditionPRG029]      int  NOT NULL,
[ConditionPRG030]      int  NOT NULL,
[ConditionRSP001]      int  NOT NULL,
[ConditionRSP002]      int  NOT NULL,
[ConditionRSP003]      int  NOT NULL,
[ConditionRSP004]      int  NOT NULL,
[ConditionRSP005]      int  NOT NULL,
[ConditionRSP006]      int  NOT NULL,
[ConditionRSP007]      int  NOT NULL,
[ConditionRSP008]      int  NOT NULL,
[ConditionRSP009]      int  NOT NULL,
[ConditionRSP010]      int  NOT NULL,
[ConditionRSP011]      int  NOT NULL,
[ConditionRSP012]      int  NOT NULL,
[ConditionRSP013]      int  NOT NULL,
[ConditionRSP014]      int  NOT NULL,
[ConditionRSP015]      int  NOT NULL,
[ConditionRSP016]      int  NOT NULL,
[ConditionRSP017]      int  NOT NULL,
[ConditionSKN001]      int  NOT NULL,
[ConditionSKN002]      int  NOT NULL,
[ConditionSKN003]      int  NOT NULL,
[ConditionSKN004]      int  NOT NULL,
[ConditionSKN005]      int  NOT NULL,
[ConditionSKN006]      int  NOT NULL,
[ConditionSKN007]      int  NOT NULL,
[ConditionSYM001]      int  NOT NULL,
[ConditionSYM002]      int  NOT NULL,
[ConditionSYM003]      int  NOT NULL,
[ConditionSYM004]      int  NOT NULL,
[ConditionSYM005]      int  NOT NULL,
[ConditionSYM006]      int  NOT NULL,
[ConditionSYM007]      int  NOT NULL,
[ConditionSYM008]      int  NOT NULL,
[ConditionSYM009]      int  NOT NULL,
[ConditionSYM010]      int  NOT NULL,
[ConditionSYM011]      int  NOT NULL,
[ConditionSYM012]      int  NOT NULL,
[ConditionSYM013]      int  NOT NULL,
[ConditionSYM014]      int  NOT NULL,
[ConditionSYM015]      int  NOT NULL,
[ConditionSYM016]      int  NOT NULL,
[ConditionSYM017]      int  NOT NULL
);






end/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/


GO
/****** Object:  StoredProcedure [dbo].[sp_Mercer_UDS_3_build_output_table_membership_and_claims]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_Mercer_UDS_3_build_output_table_membership_and_claims]
/*****************************************************************************
 Description: 
    Create Views Union All Plans' Membership Outputs
	And then Materialize the Membership View


 Parameters:

 Return:

 Notes:

 Change History:
	2017-05-15 SL - initial version
	2018-02-23 SL - revise for CY16
	2020-09-03 TK-  New paid_to_allowed_ratio_brackets added for CY19
 
*****************************************************************************/
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = NULL
	SET @Logging_Values = NULL
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/
begin


--materialize the membership data

truncate table OUTPUT_STD.UDS_PMPM_Membership_and_Risk_Data_INTERNAL_3dx;

insert into OUTPUT_STD.UDS_PMPM_Membership_and_Risk_Data_INTERNAL_3dx with (TABLOCK)
select
	a.chp_carrier_id,
	a.pdr_product_id,
	p.uds_network_identifier,
	cast(case when p.upload_number = 1 
				then '0101' + cast(right(p.data_year,2) + 0  as varchar (2))
				+'-'+'1231' + cast(right(p.data_year,2) + 0  as varchar (2))
				end as varchar (13)) as service_period,	
	a.zip3,
	p.uds_prod_ind,
	a.member_gender,
	a.age_bracket,
	a.duration_bracket,
	a.paid_to_allowed_ratio_bracket_ic,
	a.paid_to_allowed_ratio_bracket_all,
	a.high_cost_claimant,
	a.insurance_arrangement as arragement_group_size_indicator,
	a.covid_related_indicator,
	a.member_count,
	a.member_months_Annual,
	a.Member_Months_Q1,
	a.Member_Months_Q2,
	a.Member_Months_Q3,
	a.Member_Months_Q4,
	a.avg_risk_score_ccsr,
	a.avg_risk_score_age_gender,
	a.avg_risk_score,
	--a.avg_risk_score_UDS_Prev,
   b.[ConditionXXXXXX],b.[Condition000000],b.[ConditionBLD001],b.[ConditionBLD002],b.[ConditionBLD003],b.[ConditionBLD004],b.[ConditionBLD005],b.[ConditionBLD006],b.[ConditionBLD007],b.[ConditionBLD008],b.[ConditionBLD009],b.[ConditionBLD010],b.[ConditionCIR001],b.[ConditionCIR002],b.[ConditionCIR003],b.[ConditionCIR004],b.[ConditionCIR005],b.[ConditionCIR006],b.[ConditionCIR007],b.[ConditionCIR008],b.[ConditionCIR009],b.[ConditionCIR010],b.[ConditionCIR011],b.[ConditionCIR012],b.[ConditionCIR013],b.[ConditionCIR014],b.[ConditionCIR015],b.[ConditionCIR016],b.[ConditionCIR017],b.[ConditionCIR018],b.[ConditionCIR019],b.[ConditionCIR020],b.[ConditionCIR021],b.[ConditionCIR022],b.[ConditionCIR023],b.[ConditionCIR024],b.[ConditionCIR025],b.[ConditionCIR026],b.[ConditionCIR027],b.[ConditionCIR028],b.[ConditionCIR029],b.[ConditionCIR030],b.[ConditionCIR031],b.[ConditionCIR032],b.[ConditionCIR033],b.[ConditionCIR034],b.[ConditionCIR035],b.[ConditionCIR036],b.[ConditionCIR037],b.[ConditionCIR038],b.[ConditionCIR039],b.[ConditionDIG001],b.[ConditionDIG002],b.[ConditionDIG003],b.[ConditionDIG004],b.[ConditionDIG005],b.[ConditionDIG006],b.[ConditionDIG007],b.[ConditionDIG008],b.[ConditionDIG009],b.[ConditionDIG010],b.[ConditionDIG011],b.[ConditionDIG012],b.[ConditionDIG013],b.[ConditionDIG014],b.[ConditionDIG015],b.[ConditionDIG016],b.[ConditionDIG017],b.[ConditionDIG018],b.[ConditionDIG019],b.[ConditionDIG020],b.[ConditionDIG021],b.[ConditionDIG022],b.[ConditionDIG023],b.[ConditionDIG024],b.[ConditionDIG025],b.[ConditionEAR001],b.[ConditionEAR002],b.[ConditionEAR003],b.[ConditionEAR004],b.[ConditionEAR005],b.[ConditionEAR006],b.[ConditionEND001],b.[ConditionEND002],b.[ConditionEND003],b.[ConditionEND004],b.[ConditionEND005],b.[ConditionEND006],b.[ConditionEND007],b.[ConditionEND008],b.[ConditionEND009],b.[ConditionEND010],b.[ConditionEND011],b.[ConditionEND012],b.[ConditionEND013],b.[ConditionEND014],b.[ConditionEND015],b.[ConditionEND016],b.[ConditionEND017],b.[ConditionEXT001],b.[ConditionEXT002],b.[ConditionEXT003],b.[ConditionEXT004],b.[ConditionEXT005],b.[ConditionEXT006],b.[ConditionEXT007],b.[ConditionEXT008],b.[ConditionEXT009],b.[ConditionEXT010],b.[ConditionEXT011],b.[ConditionEXT012],b.[ConditionEXT013],b.[ConditionEXT014],b.[ConditionEXT015],b.[ConditionEXT016],b.[ConditionEXT017],b.[ConditionEXT018],b.[ConditionEXT019],b.[ConditionEXT020],b.[ConditionEXT021],b.[ConditionEXT022],b.[ConditionEXT023],b.[ConditionEXT024],b.[ConditionEXT025],b.[ConditionEXT026],b.[ConditionEXT027],b.[ConditionEXT028],b.[ConditionEXT029],b.[ConditionEXT030],b.[ConditionEYE001],b.[ConditionEYE002],b.[ConditionEYE003],b.[ConditionEYE004],b.[ConditionEYE005],b.[ConditionEYE006],b.[ConditionEYE007],b.[ConditionEYE008],b.[ConditionEYE009],b.[ConditionEYE010],b.[ConditionEYE011],b.[ConditionEYE012],b.[ConditionFAC001],b.[ConditionFAC002],b.[ConditionFAC003],b.[ConditionFAC004],b.[ConditionFAC005],b.[ConditionFAC006],b.[ConditionFAC007],b.[ConditionFAC008],b.[ConditionFAC009],b.[ConditionFAC010],b.[ConditionFAC011],b.[ConditionFAC012],b.[ConditionFAC013],b.[ConditionFAC014],b.[ConditionFAC015],b.[ConditionFAC016],b.[ConditionFAC017],b.[ConditionFAC018],b.[ConditionFAC019],b.[ConditionFAC020],b.[ConditionFAC021],b.[ConditionFAC022],b.[ConditionFAC023],b.[ConditionFAC024],b.[ConditionFAC025],b.[ConditionGEN001],b.[ConditionGEN002],b.[ConditionGEN003],b.[ConditionGEN004],b.[ConditionGEN005],b.[ConditionGEN006],b.[ConditionGEN007],b.[ConditionGEN008],b.[ConditionGEN009],b.[ConditionGEN010],b.[ConditionGEN011],b.[ConditionGEN012],b.[ConditionGEN013],b.[ConditionGEN014],b.[ConditionGEN015],b.[ConditionGEN016],b.[ConditionGEN017],b.[ConditionGEN018],b.[ConditionGEN019],b.[ConditionGEN020],b.[ConditionGEN021],b.[ConditionGEN022],b.[ConditionGEN023],b.[ConditionGEN024],b.[ConditionGEN025],b.[ConditionGEN026],b.[ConditionINF001],b.[ConditionINF002],b.[ConditionINF003],b.[ConditionINF004],b.[ConditionINF005],b.[ConditionINF006],b.[ConditionINF007],b.[ConditionINF008],b.[ConditionINF009],b.[ConditionINF010],b.[ConditionINF011],b.[ConditionINJ001],b.[ConditionINJ002],b.[ConditionINJ003],b.[ConditionINJ004],b.[ConditionINJ005],b.[ConditionINJ006],b.[ConditionINJ007],b.[ConditionINJ008],b.[ConditionINJ009],b.[ConditionINJ010],b.[ConditionINJ011],b.[ConditionINJ012],b.[ConditionINJ013],b.[ConditionINJ014],b.[ConditionINJ015],b.[ConditionINJ016],b.[ConditionINJ017],b.[ConditionINJ018],b.[ConditionINJ019],b.[ConditionINJ020],b.[ConditionINJ021],b.[ConditionINJ022],b.[ConditionINJ023],b.[ConditionINJ024],b.[ConditionINJ025],b.[ConditionINJ026],b.[ConditionINJ027],b.[ConditionINJ028],b.[ConditionINJ029],b.[ConditionINJ030],b.[ConditionINJ031],b.[ConditionINJ032],b.[ConditionINJ033],b.[ConditionINJ034],b.[ConditionINJ035],b.[ConditionINJ036],b.[ConditionINJ037],b.[ConditionINJ038],b.[ConditionINJ039],b.[ConditionINJ040],b.[ConditionINJ041],b.[ConditionINJ042],b.[ConditionINJ043],b.[ConditionINJ044],b.[ConditionINJ045],b.[ConditionINJ046],b.[ConditionINJ047],b.[ConditionINJ048],b.[ConditionINJ049],b.[ConditionINJ050],b.[ConditionINJ051],b.[ConditionINJ052],b.[ConditionINJ053],b.[ConditionINJ054],b.[ConditionINJ055],b.[ConditionINJ056],b.[ConditionINJ057],b.[ConditionINJ058],b.[ConditionINJ059],b.[ConditionINJ060],b.[ConditionINJ061],b.[ConditionINJ062],b.[ConditionINJ063],b.[ConditionINJ064],b.[ConditionINJ065],b.[ConditionINJ066],b.[ConditionINJ067],b.[ConditionINJ068],b.[ConditionINJ069],b.[ConditionINJ070],b.[ConditionINJ071],b.[ConditionINJ072],b.[ConditionINJ073],b.[ConditionINJ074],b.[ConditionINJ075],b.[ConditionINJ076],b.[ConditionMAL001],b.[ConditionMAL002],b.[ConditionMAL003],b.[ConditionMAL004],b.[ConditionMAL005],b.[ConditionMAL006],b.[ConditionMAL007],b.[ConditionMAL008],b.[ConditionMAL009],b.[ConditionMAL010],b.[ConditionMBD001],b.[ConditionMBD002],b.[ConditionMBD003],b.[ConditionMBD004],b.[ConditionMBD005],b.[ConditionMBD006],b.[ConditionMBD007],b.[ConditionMBD008],b.[ConditionMBD009],b.[ConditionMBD010],b.[ConditionMBD011],b.[ConditionMBD012],b.[ConditionMBD013],b.[ConditionMBD014],b.[ConditionMBD017],b.[ConditionMBD018],b.[ConditionMBD019],b.[ConditionMBD020],b.[ConditionMBD021],b.[ConditionMBD022],b.[ConditionMBD023],b.[ConditionMBD024],b.[ConditionMBD025],b.[ConditionMBD026],b.[ConditionMBD027],b.[ConditionMBD028],b.[ConditionMBD029],b.[ConditionMBD030],b.[ConditionMBD031],b.[ConditionMBD032],b.[ConditionMBD033],b.[ConditionMBD034],b.[ConditionMUS001],b.[ConditionMUS002],b.[ConditionMUS003],b.[ConditionMUS004],b.[ConditionMUS005],b.[ConditionMUS006],b.[ConditionMUS007],b.[ConditionMUS008],b.[ConditionMUS009],b.[ConditionMUS010],b.[ConditionMUS011],b.[ConditionMUS012],b.[ConditionMUS013],b.[ConditionMUS014],b.[ConditionMUS015],b.[ConditionMUS016],b.[ConditionMUS017],b.[ConditionMUS018],b.[ConditionMUS019],b.[ConditionMUS020],b.[ConditionMUS021],b.[ConditionMUS022],b.[ConditionMUS023],b.[ConditionMUS024],b.[ConditionMUS025],b.[ConditionMUS026],b.[ConditionMUS027],b.[ConditionMUS028],b.[ConditionMUS029],b.[ConditionMUS030],b.[ConditionMUS031],b.[ConditionMUS032],b.[ConditionMUS033],b.[ConditionMUS034],b.[ConditionMUS035],b.[ConditionMUS036],b.[ConditionMUS037],b.[ConditionMUS038],b.[ConditionNEO001],b.[ConditionNEO002],b.[ConditionNEO003],b.[ConditionNEO004],b.[ConditionNEO005],b.[ConditionNEO006],b.[ConditionNEO007],b.[ConditionNEO008],b.[ConditionNEO009],b.[ConditionNEO010],b.[ConditionNEO011],b.[ConditionNEO012],b.[ConditionNEO013],b.[ConditionNEO014],b.[ConditionNEO015],b.[ConditionNEO016],b.[ConditionNEO017],b.[ConditionNEO018],b.[ConditionNEO019],b.[ConditionNEO020],b.[ConditionNEO021],b.[ConditionNEO022],b.[ConditionNEO023],b.[ConditionNEO024],b.[ConditionNEO025],b.[ConditionNEO026],b.[ConditionNEO027],b.[ConditionNEO028],b.[ConditionNEO029],b.[ConditionNEO030],b.[ConditionNEO031],b.[ConditionNEO032],b.[ConditionNEO033],b.[ConditionNEO034],b.[ConditionNEO035],b.[ConditionNEO036],b.[ConditionNEO037],b.[ConditionNEO038],b.[ConditionNEO039],b.[ConditionNEO040],b.[ConditionNEO041],b.[ConditionNEO042],b.[ConditionNEO043],b.[ConditionNEO044],b.[ConditionNEO045],b.[ConditionNEO046],b.[ConditionNEO047],b.[ConditionNEO048],b.[ConditionNEO049],b.[ConditionNEO050],b.[ConditionNEO051],b.[ConditionNEO052],b.[ConditionNEO053],b.[ConditionNEO054],b.[ConditionNEO055],b.[ConditionNEO056],b.[ConditionNEO057],b.[ConditionNEO058],b.[ConditionNEO059],b.[ConditionNEO060],b.[ConditionNEO061],b.[ConditionNEO062],b.[ConditionNEO063],b.[ConditionNEO064],b.[ConditionNEO065],b.[ConditionNEO066],b.[ConditionNEO067],b.[ConditionNEO068],b.[ConditionNEO069],b.[ConditionNEO070],b.[ConditionNEO071],b.[ConditionNEO072],b.[ConditionNEO073],b.[ConditionNEO074],b.[ConditionNVS001],b.[ConditionNVS002],b.[ConditionNVS003],b.[ConditionNVS004],b.[ConditionNVS005],b.[ConditionNVS006],b.[ConditionNVS007],b.[ConditionNVS008],b.[ConditionNVS009],b.[ConditionNVS010],b.[ConditionNVS011],b.[ConditionNVS012],b.[ConditionNVS013],b.[ConditionNVS014],b.[ConditionNVS015],b.[ConditionNVS016],b.[ConditionNVS017],b.[ConditionNVS018],b.[ConditionNVS019],b.[ConditionNVS020],b.[ConditionNVS021],b.[ConditionNVS022],b.[ConditionPNL001],b.[ConditionPNL002],b.[ConditionPNL003],b.[ConditionPNL004],b.[ConditionPNL005],b.[ConditionPNL006],b.[ConditionPNL007],b.[ConditionPNL008],b.[ConditionPNL009],b.[ConditionPNL010],b.[ConditionPNL011],b.[ConditionPNL012],b.[ConditionPNL013],b.[ConditionPNL014],b.[ConditionPNL015],b.[ConditionPRG001],b.[ConditionPRG002],b.[ConditionPRG003],b.[ConditionPRG004],b.[ConditionPRG005],b.[ConditionPRG006],b.[ConditionPRG007],b.[ConditionPRG008],b.[ConditionPRG009],b.[ConditionPRG010],b.[ConditionPRG011],b.[ConditionPRG012],b.[ConditionPRG013],b.[ConditionPRG014],b.[ConditionPRG015],b.[ConditionPRG016],b.[ConditionPRG017],b.[ConditionPRG018],b.[ConditionPRG019],b.[ConditionPRG020],b.[ConditionPRG021],b.[ConditionPRG022],b.[ConditionPRG023],b.[ConditionPRG024],b.[ConditionPRG025],b.[ConditionPRG026],b.[ConditionPRG027],b.[ConditionPRG028],b.[ConditionPRG029],b.[ConditionPRG030],b.[ConditionRSP001],b.[ConditionRSP002],b.[ConditionRSP003],b.[ConditionRSP004],b.[ConditionRSP005],b.[ConditionRSP006],b.[ConditionRSP007],b.[ConditionRSP008],b.[ConditionRSP009],b.[ConditionRSP010],b.[ConditionRSP011],b.[ConditionRSP012],b.[ConditionRSP013],b.[ConditionRSP014],b.[ConditionRSP015],b.[ConditionRSP016],b.[ConditionRSP017],b.[ConditionSKN001],b.[ConditionSKN002],b.[ConditionSKN003],b.[ConditionSKN004],b.[ConditionSKN005],b.[ConditionSKN006],b.[ConditionSKN007],b.[ConditionSYM001],b.[ConditionSYM002],b.[ConditionSYM003],b.[ConditionSYM004],b.[ConditionSYM005],b.[ConditionSYM006],b.[ConditionSYM007],b.[ConditionSYM008],b.[ConditionSYM009],b.[ConditionSYM010],b.[ConditionSYM011],b.[ConditionSYM012],b.[ConditionSYM013],b.[ConditionSYM014],b.[ConditionSYM015],b.[ConditionSYM016],b.[ConditionSYM017]

from all_plans.proc_membership_ccsr_conditions_30_aggregated_risk_score_3dx a
full join
all_plans.proc_membership_ccsr_conditions_40_transform_ccsr_conditions_3dx b
on b.chp_carrier_id = a.chp_carrier_id
and b.pdr_product_id = a.pdr_product_id
and b.zip3 = a.zip3
and b.member_gender = a.member_gender
and b.age_bracket = a.age_bracket
and b.duration_bracket = a.duration_bracket
and b.high_cost_claimant = a.high_cost_claimant
and b.insurance_arrangement = a.insurance_arrangement
and b.paid_to_allowed_ratio_bracket_all = a.paid_to_allowed_ratio_bracket_all
and b.paid_to_allowed_ratio_bracket_ic = a.paid_to_allowed_ratio_bracket_ic
left join
reference.ref_uds_network_identifier_prod_ind p
on p.uds_chp_carrier_id = a.chp_carrier_id
and p.uds_pdr_product_id = a.pdr_product_id
where p.include_in_uds_pmpm = 1;



Delete from OUTPUT_STD.UDS_PMPM_Membership_and_Risk_Data_INTERNAL_3dx where zip3 = '193' and pdr_product_id in ('PAB6', 'PAB1', 'PAL6', 'DEB1')







--create unique index

--membership
IF EXISTS (SELECT name FROM sys.indexes
            WHERE name = N'IX_text_membership' and OBJECT_SCHEMA_NAME(object_id) = 'OUTPUT_STD' and OBJECT_NAME(object_id) = 'UDS_PMPM_Membership_and_Risk_Data_INTERNAL_3dx') 
    DROP INDEX IX_text_membership ON OUTPUT_STD.UDS_PMPM_Membership_and_Risk_Data_INTERNAL_3dx; 

-- Create a clustered index 
CREATE UNIQUE CLUSTERED INDEX IX_text_membership 
    ON OUTPUT_STD.UDS_PMPM_Membership_and_Risk_Data_INTERNAL_3dx (uds_network_identifier, uds_prod_ind, zip3, member_gender, age_bracket, duration_bracket,[COVID-Related Indicator], paid_to_allowed_ratio_bracket_ic,paid_to_allowed_ratio_bracket_all, high_cost_claimant, arrangement_group_size_indicator);



end/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/


GO
/****** Object:  StoredProcedure [dbo].[sp_Mercer_UDS_4_build_standard_output_tables]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_Mercer_UDS_4_build_standard_output_tables]
/*****************************************************************************
 Description: 
    Create Views for Text Files sent to Millman and Consulting Firms


 Parameters:

 Return:

 Notes:

 Change History:
	2015-11-19 SL - initial version
	2016-09-12 SL - add CHP Carrier ID and PDR Product ID
	2018-02-23 SL - materialize the tables and rename the tables, revised a few field names
	2018-10-10 SL - add the compound CCS in the membership, add the adjusted RnC in claims
	2020-08-12 TK- 
 
*****************************************************************************/
										@p_replace_existing varchar(5) = 'Y'
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = NULL
	SET @Logging_Values = NULL
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/
begin





--Membership
--create table for Final Text Dump 



drop table if exists OUTPUT_STD.[Mercer UDS PMPM - Membership and Risk Data]

select
	chp_carrier_id as [CHP Carrier ID],
	pdr_product_id as [PDR Product ID],
	cast('Blue Cross Blue Shield' as varchar(25)) as [Organization Name],
	uds_network_identifier as [Network Identifier],
	service_period as [Service Period],
	zip3 as [3 Digit Member Zip Code],
	uds_prod_ind as [Product Indicator],
	member_gender as [Gender],
	age_bracket as [Age Bracket],
	duration_bracket as [Duration Bracket],
	paid_to_allowed_ratio_bracket_ic as [Plan Benefit Value - IC],
	paid_to_allowed_ratio_bracket_all as [Plan Benefit Value - ALL],
	high_cost_claimant as [High Cost Claimant],
	arrangement_group_size_indicator as [Arrangement/Group Size Indicator],
	[COVID-Related Indicator],
	NULL as [Custom Study Group 1],
	NULL as [Custom Study Group 2],
	NULL as [Custom Study Group 3],
	member_count as [Member Count],
	[Member Months - Annual],
    [Member Months - Q1],
    [Member Months - Q2],
    [Member Months - Q3],
    [Member Months - Q4], 
	avg_risk_score as [Average Risk Score],
   [ConditionXXXXXX],	[Condition000000],	[ConditionBLD001],	[ConditionBLD002],	[ConditionBLD003],	[ConditionBLD004],	[ConditionBLD005],	[ConditionBLD006],	[ConditionBLD007],	[ConditionBLD008],	[ConditionBLD009],	[ConditionBLD010],	[ConditionCIR001],	[ConditionCIR002],	[ConditionCIR003],	[ConditionCIR004],	[ConditionCIR005],	[ConditionCIR006],	[ConditionCIR007],	[ConditionCIR008],	[ConditionCIR009],	[ConditionCIR010],	[ConditionCIR011],	[ConditionCIR012],	[ConditionCIR013],	[ConditionCIR014],	[ConditionCIR015],	[ConditionCIR016],	[ConditionCIR017],	[ConditionCIR018],	[ConditionCIR019],	[ConditionCIR020],	[ConditionCIR021],	[ConditionCIR022],	[ConditionCIR023],	[ConditionCIR024],	[ConditionCIR025],	[ConditionCIR026],	[ConditionCIR027],	[ConditionCIR028],	[ConditionCIR029],	[ConditionCIR030],	[ConditionCIR031],	[ConditionCIR032],	[ConditionCIR033],	[ConditionCIR034],	[ConditionCIR035],	[ConditionCIR036],	[ConditionCIR037],	[ConditionCIR038],	[ConditionCIR039],	[ConditionDIG001],	[ConditionDIG002],	[ConditionDIG003],	[ConditionDIG004],	[ConditionDIG005],	[ConditionDIG006],	[ConditionDIG007],	[ConditionDIG008],	[ConditionDIG009],	[ConditionDIG010],	[ConditionDIG011],	[ConditionDIG012],	[ConditionDIG013],	[ConditionDIG014],	[ConditionDIG015],	[ConditionDIG016],	[ConditionDIG017],	[ConditionDIG018],	[ConditionDIG019],	[ConditionDIG020],	[ConditionDIG021],	[ConditionDIG022],	[ConditionDIG023],	[ConditionDIG024],	[ConditionDIG025],	[ConditionEAR001],	[ConditionEAR002],	[ConditionEAR003],	[ConditionEAR004],	[ConditionEAR005],	[ConditionEAR006],	[ConditionEND001],	[ConditionEND002],	[ConditionEND003],	[ConditionEND004],	[ConditionEND005],	[ConditionEND006],	[ConditionEND007],	[ConditionEND008],	[ConditionEND009],	[ConditionEND010],	[ConditionEND011],	[ConditionEND012],	[ConditionEND013],	[ConditionEND014],	[ConditionEND015],	[ConditionEND016],	[ConditionEND017],	[ConditionEXT001],	[ConditionEXT002],	[ConditionEXT003],	[ConditionEXT004],	[ConditionEXT005],	[ConditionEXT006],	[ConditionEXT007],	[ConditionEXT008],	[ConditionEXT009],	[ConditionEXT010],	[ConditionEXT011],	[ConditionEXT012],	[ConditionEXT013],	[ConditionEXT014],	[ConditionEXT015],	[ConditionEXT016],	[ConditionEXT017],	[ConditionEXT018],	[ConditionEXT019],	[ConditionEXT020],	[ConditionEXT021],	[ConditionEXT022],	[ConditionEXT023],	[ConditionEXT024],	[ConditionEXT025],	[ConditionEXT026],	[ConditionEXT027],	[ConditionEXT028],	[ConditionEXT029],	[ConditionEXT030],	[ConditionEYE001],	[ConditionEYE002],	[ConditionEYE003],	[ConditionEYE004],	[ConditionEYE005],	[ConditionEYE006],	[ConditionEYE007],	[ConditionEYE008],	[ConditionEYE009],	[ConditionEYE010],	[ConditionEYE011],	[ConditionEYE012],	[ConditionFAC001],	[ConditionFAC002],	[ConditionFAC003],	[ConditionFAC004],	[ConditionFAC005],	[ConditionFAC006],	[ConditionFAC007],	[ConditionFAC008],	[ConditionFAC009],	[ConditionFAC010],	[ConditionFAC011],	[ConditionFAC012],	[ConditionFAC013],	[ConditionFAC014],	[ConditionFAC015],	[ConditionFAC016],	[ConditionFAC017],	[ConditionFAC018],	[ConditionFAC019],	[ConditionFAC020],	[ConditionFAC021],	[ConditionFAC022],	[ConditionFAC023],	[ConditionFAC024],	[ConditionFAC025],	[ConditionGEN001],	[ConditionGEN002],	[ConditionGEN003],	[ConditionGEN004],	[ConditionGEN005],	[ConditionGEN006],	[ConditionGEN007],	[ConditionGEN008],	[ConditionGEN009],	[ConditionGEN010],	[ConditionGEN011],	[ConditionGEN012],	[ConditionGEN013],	[ConditionGEN014],	[ConditionGEN015],	[ConditionGEN016],	[ConditionGEN017],	[ConditionGEN018],	[ConditionGEN019],	[ConditionGEN020],	[ConditionGEN021],	[ConditionGEN022],	[ConditionGEN023],	[ConditionGEN024],	[ConditionGEN025],	[ConditionGEN026],	[ConditionINF001],	[ConditionINF002],	[ConditionINF003],	[ConditionINF004],	[ConditionINF005],	[ConditionINF006],	[ConditionINF007],	[ConditionINF008],	[ConditionINF009],	[ConditionINF010],	[ConditionINF011],	[ConditionINJ001],	[ConditionINJ002],	[ConditionINJ003],	[ConditionINJ004],	[ConditionINJ005],	[ConditionINJ006],	[ConditionINJ007],	[ConditionINJ008],	[ConditionINJ009],	[ConditionINJ010],	[ConditionINJ011],	[ConditionINJ012],	[ConditionINJ013],	[ConditionINJ014],	[ConditionINJ015],	[ConditionINJ016],	[ConditionINJ017],	[ConditionINJ018],	[ConditionINJ019],	[ConditionINJ020],	[ConditionINJ021],	[ConditionINJ022],	[ConditionINJ023],	[ConditionINJ024],	[ConditionINJ025],	[ConditionINJ026],	[ConditionINJ027],	[ConditionINJ028],	[ConditionINJ029],	[ConditionINJ030],	[ConditionINJ031],	[ConditionINJ032],	[ConditionINJ033],	[ConditionINJ034],	[ConditionINJ035],	[ConditionINJ036],	[ConditionINJ037],	[ConditionINJ038],	[ConditionINJ039],	[ConditionINJ040],	[ConditionINJ041],	[ConditionINJ042],	[ConditionINJ043],	[ConditionINJ044],	[ConditionINJ045],	[ConditionINJ046],	[ConditionINJ047],	[ConditionINJ048],	[ConditionINJ049],	[ConditionINJ050],	[ConditionINJ051],	[ConditionINJ052],	[ConditionINJ053],	[ConditionINJ054],	[ConditionINJ055],	[ConditionINJ056],	[ConditionINJ057],	[ConditionINJ058],	[ConditionINJ059],	[ConditionINJ060],	[ConditionINJ061],	[ConditionINJ062],	[ConditionINJ063],	[ConditionINJ064],	[ConditionINJ065],	[ConditionINJ066],	[ConditionINJ067],	[ConditionINJ068],	[ConditionINJ069],	[ConditionINJ070],	[ConditionINJ071],	[ConditionINJ072],	[ConditionINJ073],	[ConditionINJ074],	[ConditionINJ075],	[ConditionINJ076],	[ConditionMAL001],	[ConditionMAL002],	[ConditionMAL003],	[ConditionMAL004],	[ConditionMAL005],	[ConditionMAL006],	[ConditionMAL007],	[ConditionMAL008],	[ConditionMAL009],	[ConditionMAL010],	[ConditionMBD001],	[ConditionMBD002],	[ConditionMBD003],	[ConditionMBD004],	[ConditionMBD005],	[ConditionMBD006],	[ConditionMBD007],	[ConditionMBD008],	[ConditionMBD009],	[ConditionMBD010],	[ConditionMBD011],	[ConditionMBD012],	[ConditionMBD013],	[ConditionMBD014],	[ConditionMBD017],	[ConditionMBD018],	[ConditionMBD019],	[ConditionMBD020],	[ConditionMBD021],	[ConditionMBD022],	[ConditionMBD023],	[ConditionMBD024],	[ConditionMBD025],	[ConditionMBD026],	[ConditionMBD027],	[ConditionMBD028],	[ConditionMBD029],	[ConditionMBD030],	[ConditionMBD031],	[ConditionMBD032],	[ConditionMBD033],	[ConditionMBD034],	[ConditionMUS001],	[ConditionMUS002],	[ConditionMUS003],	[ConditionMUS004],	[ConditionMUS005],	[ConditionMUS006],	[ConditionMUS007],	[ConditionMUS008],	[ConditionMUS009],	[ConditionMUS010],	[ConditionMUS011],	[ConditionMUS012],	[ConditionMUS013],	[ConditionMUS014],	[ConditionMUS015],	[ConditionMUS016],	[ConditionMUS017],	[ConditionMUS018],	[ConditionMUS019],	[ConditionMUS020],	[ConditionMUS021],	[ConditionMUS022],	[ConditionMUS023],	[ConditionMUS024],	[ConditionMUS025],	[ConditionMUS026],	[ConditionMUS027],	[ConditionMUS028],	[ConditionMUS029],	[ConditionMUS030],	[ConditionMUS031],	[ConditionMUS032],	[ConditionMUS033],	[ConditionMUS034],	[ConditionMUS035],	[ConditionMUS036],	[ConditionMUS037],	[ConditionMUS038],	[ConditionNEO001],	[ConditionNEO002],	[ConditionNEO003],	[ConditionNEO004],	[ConditionNEO005],	[ConditionNEO006],	[ConditionNEO007],	[ConditionNEO008],	[ConditionNEO009],	[ConditionNEO010],	[ConditionNEO011],	[ConditionNEO012],	[ConditionNEO013],	[ConditionNEO014],	[ConditionNEO015],	[ConditionNEO016],	[ConditionNEO017],	[ConditionNEO018],	[ConditionNEO019],	[ConditionNEO020],	[ConditionNEO021],	[ConditionNEO022],	[ConditionNEO023],	[ConditionNEO024],	[ConditionNEO025],	[ConditionNEO026],	[ConditionNEO027],	[ConditionNEO028],	[ConditionNEO029],	[ConditionNEO030],	[ConditionNEO031],	[ConditionNEO032],	[ConditionNEO033],	[ConditionNEO034],	[ConditionNEO035],	[ConditionNEO036],	[ConditionNEO037],	[ConditionNEO038],	[ConditionNEO039],	[ConditionNEO040],	[ConditionNEO041],	[ConditionNEO042],	[ConditionNEO043],	[ConditionNEO044],	[ConditionNEO045],	[ConditionNEO046],	[ConditionNEO047],	[ConditionNEO048],	[ConditionNEO049],	[ConditionNEO050],	[ConditionNEO051],	[ConditionNEO052],	[ConditionNEO053],	[ConditionNEO054],	[ConditionNEO055],	[ConditionNEO056],	[ConditionNEO057],	[ConditionNEO058],	[ConditionNEO059],	[ConditionNEO060],	[ConditionNEO061],	[ConditionNEO062],	[ConditionNEO063],	[ConditionNEO064],	[ConditionNEO065],	[ConditionNEO066],	[ConditionNEO067],	[ConditionNEO068],	[ConditionNEO069],	[ConditionNEO070],	[ConditionNEO071],	[ConditionNEO072],	[ConditionNEO073],	[ConditionNEO074],	[ConditionNVS001],	[ConditionNVS002],	[ConditionNVS003],	[ConditionNVS004],	[ConditionNVS005],	[ConditionNVS006],	[ConditionNVS007],	[ConditionNVS008],	[ConditionNVS009],	[ConditionNVS010],	[ConditionNVS011],	[ConditionNVS012],	[ConditionNVS013],	[ConditionNVS014],	[ConditionNVS015],	[ConditionNVS016],	[ConditionNVS017],	[ConditionNVS018],	[ConditionNVS019],	[ConditionNVS020],	[ConditionNVS021],	[ConditionNVS022],	[ConditionPNL001],	[ConditionPNL002],	[ConditionPNL003],	[ConditionPNL004],	[ConditionPNL005],	[ConditionPNL006],	[ConditionPNL007],	[ConditionPNL008],	[ConditionPNL009],	[ConditionPNL010],	[ConditionPNL011],	[ConditionPNL012],	[ConditionPNL013],	[ConditionPNL014],	[ConditionPNL015],	[ConditionPRG001],	[ConditionPRG002],	[ConditionPRG003],	[ConditionPRG004],	[ConditionPRG005],	[ConditionPRG006],	[ConditionPRG007],	[ConditionPRG008],	[ConditionPRG009],	[ConditionPRG010],	[ConditionPRG011],	[ConditionPRG012],	[ConditionPRG013],	[ConditionPRG014],	[ConditionPRG015],	[ConditionPRG016],	[ConditionPRG017],	[ConditionPRG018],	[ConditionPRG019],	[ConditionPRG020],	[ConditionPRG021],	[ConditionPRG022],	[ConditionPRG023],	[ConditionPRG024],	[ConditionPRG025],	[ConditionPRG026],	[ConditionPRG027],	[ConditionPRG028],	[ConditionPRG029],	[ConditionPRG030],	[ConditionRSP001],	[ConditionRSP002],	[ConditionRSP003],	[ConditionRSP004],	[ConditionRSP005],	[ConditionRSP006],	[ConditionRSP007],	[ConditionRSP008],	[ConditionRSP009],	[ConditionRSP010],	[ConditionRSP011],	[ConditionRSP012],	[ConditionRSP013],	[ConditionRSP014],	[ConditionRSP015],	[ConditionRSP016],	[ConditionRSP017],	[ConditionSKN001],	[ConditionSKN002],	[ConditionSKN003],	[ConditionSKN004],	[ConditionSKN005],	[ConditionSKN006],	[ConditionSKN007],	[ConditionSYM001],	[ConditionSYM002],	[ConditionSYM003],	[ConditionSYM004],	[ConditionSYM005],	[ConditionSYM006],	[ConditionSYM007],	[ConditionSYM008],	[ConditionSYM009],	[ConditionSYM010],	[ConditionSYM011],	[ConditionSYM012],	[ConditionSYM013],	[ConditionSYM014],	[ConditionSYM015],	[ConditionSYM016],	[ConditionSYM017]   
into OUTPUT_STD.[Mercer UDS PMPM - Membership and Risk Data]
from OUTPUT_STD.UDS_PMPM_Membership_and_Risk_Data_INTERNAL_3dx
where chp_carrier_id <> 9999  --added on 11/25/2019. Looked at CY17 submission and no gap data included but rather as a separate file which was not submitted

Delete from OUTPUT_STD.[Mercer UDS PMPM - Membership and Risk Data] where [3 Digit Member Zip Code] = '193' and [PDR Product ID] in ('PAB6', 'PAB1')
--create unique index

--membership
IF EXISTS (SELECT name FROM sys.indexes
            WHERE name = N'IX_text_membership' and OBJECT_SCHEMA_NAME(object_id) = 'OUTPUT_STD' and OBJECT_NAME(object_id) = 'Mercer UDS PMPM - Membership and Risk Data') 
    DROP INDEX IX_text_membership ON OUTPUT_STD.[Mercer UDS PMPM - Membership and Risk Data]; 

-- Create a clustered index 
CREATE UNIQUE CLUSTERED INDEX IX_text_membership 
    ON OUTPUT_STD.[Mercer UDS PMPM - Membership and Risk Data] ([Network Identifier], [Product Indicator], [3 Digit Member Zip Code], [Gender], [Age Bracket],[COVID-Related Indicator], [Duration Bracket], [Plan Benefit Value - IC] ,[Plan Benefit Value - ALL], [High Cost Claimant], [Arrangement/Group Size Indicator]);











end/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/


GO
/****** Object:  StoredProcedure [dbo].[sp_output_review_collect_results]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_output_review_collect_results] 
/*****************************************************************************
 Description: 
    To streamline results collection for comparison or impact analysis


 Parameters:
    schema_name - the plan product to run

 Return:

 Notes:

 Change History:
	2017-11-28 SL - initial version
	
	2018-06-29 SL - revise for CY17
 
*****************************************************************************/
                                     @p_schema_name    varchar(50) = null,
									 @p_run_message    varchar(250) = null
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = '@p_schema_name|@p_run_message'
	SET @Logging_Values = ISNULL(CAST(concat(@p_schema_name,'-',@p_run_message) AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/


begin

--table to collect run reasons

declare
	@message_id int

if not exists (select * from output_review.run_message_log where run_message = @p_run_message)
begin
	select @message_id = isnull(max(message_id),0) from output_review.run_message_log 
	--print @message_id
	set @message_id = @message_id + 1
	insert into output_review.run_message_log values (@message_id, @p_run_message, getdate())
end
else
begin
	select @message_id = message_id from output_review.run_message_log where run_message = @p_run_message
	--print @message_id
end


  declare
	@schema_name              varchar(255),
	@dynSQL					 nvarchar(max)

  declare cur_schema cursor local for
	select 
		schema_name
	from process.data_status_tracking
	  where include_in_uds_pmpm = 1 
	  and schema_name = isnull(@p_schema_name, schema_name)
	  order by case when chp_carrier_id in (895, 881, 885, 887) then 9999 else chp_carrier_id end



  open cur_schema
  fetch next from cur_schema into @schema_name

  while ( @@FETCH_STATUS = 0 )
    begin

begin try
	  print 'BEGIN collecting results of '+@schema_name

--============================================================================
-- PMPM Results for Current Upload
--============================================================================

--results on zip code level
--delete from output_review.results_proc_00_zip3  where concat('p',chp_carrier_id,'_', pdr_product_id)=''+@schema_name+''
set @dynSQL = replace('
if object_id(''output_review.results_proc_00_zip3'') is not null 
drop table output_review.results_proc_00_zip3
select
	m.chp_carrier_id,
	m.pdr_product_id,
	m.zip3,
	m.member_count,
	m.member_months,
	m.risk_factor_tot,
	m.risk_score,
	m.risk_factor_tot_UDS_Prev,
    m.risk_score_UDS_Prev,
	c.allowed_amount,
	c.RnC_cutback_amount,
	c.billed_amount_ixox,
	c.paid_amount,
	c.allowed_amount/m.member_months as [Unadj PMPM],
	c.allowed_amount/(m.member_months*m.risk_score) as [RA PMPM],
	(c.allowed_amount+c.RnC_cutback_amount)/(m.member_months*m.risk_score) as [RA PMPM w/ R&C],
	isnull(c.RnC_cutback_amount/nullif(c.billed_amount_ixox,0),0) as [R&C Cutback % of IX/OX Billed],
	isnull(c.paid_amount/nullif(c.allowed_amount,0),0) as paid_to_allowed_ratio
into output_review.results_proc_00_zip3
from
(select 
	chp_carrier_id,
	pdr_product_id,
	home_hosted_indicator,
	zip3,
	count(*) as member_count,
	sum(enrollment_months) as member_months,
	sum(risk_factor_tot) as risk_factor_tot,
	sum(risk_factor_tot)/count(*) as risk_score,
	sum(risk_factor_tot_UDS_Prev) as risk_factor_tot_UDS_Prev,    
	sum(risk_factor_tot_UDS_Prev)/count(*) as risk_score_UDS_Prev
from %schema_name%.proc_membership_ccsr_conditions_20_member_risk_score a
where home_hosted_indicator = ''HOME''
group by
	chp_carrier_id,
	pdr_product_id,
	home_hosted_indicator,
	zip3) m
join
(select 
	chp_carrier_id,
	pdr_product_id,
	home_hosted_indicator,
	zip3,
	sum(billed_amount) as billed_amount,
	sum(case when benefit_payment_contract_status in (''IX'',''OX'') then billed_amount else 0 end) as billed_amount_ixox,
	sum(allowed_amount_uds_pmpm) as allowed_amount,
	sum(paid_amount) as paid_amount,
	sum(RnC_cutback_amount) as RnC_cutback_amount
from %schema_name%.[vw_proc_claims_financial_20_detail]
where exclusion_flag = ''N''
and exclude_medical_benefit_flag = ''N''
and home_hosted_indicator = ''HOME''
group by
	chp_carrier_id,
	pdr_product_id,
	home_hosted_indicator,
	zip3) c
on c.chp_carrier_id = m.chp_carrier_id
and c.pdr_product_id = m.pdr_product_id
and c.home_hosted_indicator = m.home_hosted_indicator
and c.zip3 = m.zip3

','%schema_name%', @schema_name)

--print @dynSQL
exec sp_executesql @dynSQL



--Rollup to Market and Statewide
--delete from output_review.results_proc_10_all_GEO  where concat('p',chp_carrier_id,'_', pdr_product_id)=''+@schema_name+''
set @dynSQL = '
insert into output_review.results_proc_10_all_GEO with (tablock)
select 
	*,
	getdate() as update_time,
	'+cast(@message_id as varchar)+' as message_id
from 
(select 
	chp_carrier_id,
	pdr_product_id,
	case when a.zip3 is null and b.chp_market_subsection_code is null then 10
	     when b.chp_market_subsection_code is not null then 25
		 when a.zip3 is not null then 30
		 else null end as data_type_code,
	coalesce(a.zip3, b.chp_market_subsection_code, ''Statewide'') as data_level,
	sum(member_count) as member_count,
	sum(member_months) as member_months,
	sum(risk_factor_tot) as risk_factor_tot,
	sum(risk_factor_tot)/sum(member_count) as risk_score,
	sum(risk_factor_tot_UDS_Prev) as risk_factor_tot_UDS_Prev,
	sum(risk_factor_tot_UDS_Prev)/sum(member_count) as risk_score_UDS_Prev,
	sum(allowed_amount) as allowed_amount,
	sum(RnC_cutback_amount) as RnC_cutback_amount,
	sum(billed_amount_ixox) as billed_amount_ixox,
	sum(paid_amount) as paid_amount,
	sum(allowed_amount)/sum(member_months) as [Unadj PMPM],
	sum(allowed_amount)*sum(member_count)/(sum(member_months)*sum(risk_factor_tot)) as [RA PMPM],
	sum(allowed_amount+RnC_cutback_amount)*sum(member_count)/(sum(member_months)*sum(risk_factor_tot)) as [RA PMPM w/ R&C],
	isnull(sum(RnC_cutback_amount)/nullif(sum(billed_amount_ixox),0),0) as [R&C Cutback % of IX/OX Billed],
	isnull(sum(paid_amount)/nullif(sum(allowed_amount),0),0) as paid_to_allowed_ratio
from output_review.results_proc_00_zip3 a
left join
QDS.sliang.chp_markets b
on b.zip_3_code = a.zip3
and b.chp_market_type_code = 25
group by grouping sets
(
	(chp_carrier_id,
	pdr_product_id),  --planwide
	(chp_carrier_id,
	pdr_product_id,
	a.zip3),   --zip3
	(chp_carrier_id,
	pdr_product_id,
	b.chp_market_subsection_code)  --market
	)
	) c
'

--print @dynSQL
exec sp_executesql @dynSQL




  	  print 'END collecting results of '+@schema_name

end try

BEGIN CATCH
    -- Execute the error retrieval routine.
    EXECUTE log.usp_GetErrorInfo;
END CATCH

	  fetch next from cur_schema into @schema_name

    end

  close cur_schema
  deallocate cur_schema




end 


/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/


GO
/****** Object:  StoredProcedure [dbo].[sp_prep_0_identify_members_changed_products]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_prep_0_identify_members_changed_products]
/*****************************************************************************
 Description: 
    Process to identify members who changed products and zip3 summary


 Parameters:
    schema_name - the plan product to run

 Return:

 Notes:

 Change History:
	CY2016
	2017-10-18 SL - initial version 
	2018-07-10 SL - remove limit to HOME member part
					remove the zip summary 
 
*****************************************************************************/

							   @p_debug						varchar(1) = 'N',
							   @p_carrier_id_combo	        varchar(100) = null
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	 FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = '@p_carrier_id_combo'
	SET @Logging_Values = ISNULL(CAST(@p_carrier_id_combo AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/

begin


  declare
    @carrier_id_combo	varchar(10)


  declare cur_schema_source cursor local for
	select distinct 
		carrier_id_combo 
	from process.data_status_tracking 
	where include_in_uds_pmpm = 1 
	and flag_multi_prod = 'Y' 
	and carrier_id_combo =isnull(@p_carrier_id_combo, carrier_id_combo)
	

  open cur_schema_source
  fetch next from cur_schema_source into @carrier_id_combo

  while ( @@FETCH_STATUS = 0 )
    begin

	  print 'BEGIN identifying members changed products for '+@carrier_id_combo


--=================================================================================
--Dynamic SQL to union membership
--=================================================================================


declare 
		@sql_temp nvarchar(max),
		@dynSQL nvarchar(max),
		@dynUnionMbr nvarchar(max)


set @dynUnionMbr = ''


	select @dynUnionMbr = coalesce(@dynUnionMbr,'') + 
'select *
from xclaims_2020CY.'+schema_name+'.traceability_membership
union all
'
	from 
	(select 
		carrier_id_combo,
		chp_carrier_id,
		pdr_product_id,
		schema_name,
		carrier_group_code,
		carrier_group_name 
	from process.data_status_tracking 
	where include_in_uds_pmpm = 1 
	and flag_multi_prod = 'Y') a
	where carrier_id_combo = @carrier_id_combo
	order by pdr_product_id

--print @dynUnionMbr

	set @dynUnionMbr = left(@dynUnionMbr, len(@dynUnionMbr)-13)

	--print @dynUnionMbr



--Pull Members from PPO and ALT

set @dynSQL = '
if object_id(''process.Mbr_Chg_Products_proc_00_mbrs'') is not null
drop table process.Mbr_Chg_Products_proc_00_mbrs

;with base_data as
('+@dynUnionMbr+')
select 
	case when carrier_id = 1420 then 958 else carrier_id end as carrier_id,
	[PDR PRODUCT ID],
	[MEMBER ID],
	max([3DIGIT ZIP CODE]) as [3DIGIT ZIP CODE],
	sum([MEMBER MONTHS]) as [MEMBER MONTHS],
	min([EFFECTIVE DATE OF COVERAGE]) as [MIN EFFECTIVE DATE OF COVERAGE]
into process.Mbr_Chg_Products_proc_00_mbrs
from base_data
where [EXCLUSION FLAG (Y = EXCLUDE)] = ''N''
group by
	case when carrier_id = 1420 then 958 else carrier_id end,
	[PDR PRODUCT ID],
	[MEMBER ID]'


if @p_debug = 'Y' 
begin
select
(select 
	@dynSQL 
	for XML path(''), TYPE).value('.','nvarchar(max)') as dynamic_SQL --creates a print out statement of the code
end

if @p_debug = 'N'
begin
exec sp_executesql @dynSQL

--identify members that changed products

if object_id('process.Mbr_Chg_Products_proc_10_members_changed_product') is not null
drop table process.Mbr_Chg_Products_proc_10_members_changed_product

;with base_data as
(
select
	*,
	count(*) over (partition by carrier_id, [Member ID]) as cnt_pdr
from
(select
	carrier_id,
	[PDR PRODUCT ID],
	[MEMBER ID],
	sum([MEMBER MONTHS]) as [MEMBER MONTHS]
from process.Mbr_Chg_Products_proc_00_mbrs
group by
	carrier_id,
	[PDR PRODUCT ID],
	[MEMBER ID]) a)
select
	carrier_id,
	[MEMBER ID]
into process.Mbr_Chg_Products_proc_10_members_changed_product
from base_data
where cnt_pdr > 1
group by
	carrier_id,
	[MEMBER ID]

end

--determine the final product enrolled

set @dynSQL = '
if object_id(''process.Mbr_Chg_Products_proc_20_final_product'') is not null
drop table process.Mbr_Chg_Products_proc_20_final_product

;with base_data as
('+@dynUnionMbr+')
select
	CARRIER_ID,
	[PDR PRODUCT ID],
	[MEMBER ID],
	[EFFECTIVE DATE OF COVERAGE],
	[TERMINATION DATE OF COVERAGE],
	[YEAR MONTH],
	rank_last_enrollment
into process.Mbr_Chg_Products_proc_20_final_product	
from
(
select
	a.CARRIER_ID,
	a.[PDR PRODUCT ID],
	a.[MEMBER ID],
	a.[EFFECTIVE DATE OF COVERAGE],
	a.[TERMINATION DATE OF COVERAGE],
	a.[YEAR MONTH],
	row_number() over (partition by a.[MEMBER ID] order by a.[YEAR MONTH] desc, b.[MIN EFFECTIVE DATE OF COVERAGE] desc, a.[PDR PRODUCT ID]) as rank_last_enrollment
from base_data a
left join
process.Mbr_Chg_Products_proc_00_mbrs b   --if members are enrolled in both products in the same last month, assign to the product that was effective on a later date
on b.[MEMBER ID] = a.[MEMBER ID]
and b.[PDR PRODUCT ID] = a.[PDR PRODUCT ID]
where [EXCLUSION FLAG (Y = EXCLUDE)] = ''N''
and exists (select * from process.Mbr_Chg_Products_proc_10_members_changed_product
where [MEMBER ID] = a.[MEMBER ID])
) a
'

if @p_debug = 'Y' 
begin
select
(select 
	@dynSQL 
	for XML path(''), TYPE).value('.','nvarchar(max)') as dynamic_SQL
end

if @p_debug = 'N'
begin
exec sp_executesql @dynSQL





/*************** Collect the Results ****************/

/*************** Delete old results ****************/


--members who changed products and all their months

delete from process.Mbr_Chg_Products_proc_20_final_product_ALL_MONTHS with (tablock)
where carrier_id_combo = @carrier_id_combo

----members assigned with final product defined by the last enrollment month

delete from process.Mbr_Chg_Products_proc_20_final_product_ALL_Member with (tablock)
where carrier_id_combo = @carrier_id_combo




/*************** Insert new results ****************/


--members who changed products and all their months

insert into process.Mbr_Chg_Products_proc_20_final_product_ALL_MONTHS with (tablock)
select 
	@carrier_id_combo,
	*,
	getdate()
from process.Mbr_Chg_Products_proc_20_final_product


--members assigned with final product defined by the last enrollment month

insert into process.Mbr_Chg_Products_proc_20_final_product_ALL_Member with (tablock)
select 
	@carrier_id_combo,
	*,
	getdate() 
from process.Mbr_Chg_Products_proc_20_final_product
where rank_last_enrollment = 1



end
----------->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> finish SQL


	  print 'END identifying members changed products for '+@carrier_id_combo


	  fetch next from cur_schema_source into @carrier_id_combo

    end

  close cur_schema_source
  deallocate cur_schema_source



end/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/

GO
/****** Object:  StoredProcedure [dbo].[sp_ra_uds_control_run]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ra_uds_control_run]
/*****************************************************************************
 Description: 
    This is the control center to run various steps
	By calling existing pre-packaged stored procedures
	
	Applying patch is control by a variable used in dbo.sp_source_claims_diagnosis_codes_with_patch


 Parameters:
    schema_name - the plan product to run and write intermediate results to

 Return:

 Notes:

 Change History:
	2015-10-22 SL - initial version
	2015-10-26 SL - add input parameter for sp_7,
	                replace first 4 sp to insert source tables to create views and
					run this procedure outside of this sp
	2015-10-29 SL - add input parameter for sp_10
	2015-11-15 SL - re-arrange order of sp so that Apendix E is applied before diagnosis 
					codes are pulled
	2016-06-01 SL - test for prof header run
	2016-07-12 SL - reorganize based on CY15 code changes
	CY2016
	2017-10-10 SL - revise based on CY16 SP changes
	                add step to auto run dedup of dx codes
	2017-12-05 SL - revise the parameter for dedup dx code to @carrier_id_combo due to this is 
					input for the union view to re-assign products
	2017-12-12 SL - revise the parameter for create view SP to @carrier_id_combo due to this is 
					input for the union view to re-assign products
					add identify member who changed products SP to make it more streamlined
	2018-07-30 SL - incorporate build view for diagnosis code, used to run manually
 
*****************************************************************************/
										@p_run_message    nvarchar(max), 
										@p_schema_name    varchar(50) = NULL,
										@p_rerun_dx_codes varchar(1) = 'y'
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = '@p_schema_name|@p_run_message'
	SET @Logging_Values = ISNULL(CAST(concat(@p_schema_name,'-',@p_run_message) AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/

begin

SET NOCOUNT ON


if @p_run_message is null
begin
	raiserror('You have to input message for parameter @p_run_message for logging purpose',1,1) with nowait
end


  declare
	@schema_name              varchar(25),
	@carrier_id_combo         varchar(10)

 

  declare cur_schema cursor for
	select schema_name, carrier_id_combo
	  from process.data_status_tracking
	  where include_in_uds_pmpm = 1
	  --and flag_prof_header_dx_code=1
	 and pdr_product_id in ('TXB1')
	 --and carrier_group_code IN (658,702,699,680)
	  and schema_name = isnull(@p_schema_name, schema_name)
	  order by case when chp_carrier_id in (895, 881, 885, 887) then 9999 else chp_carrier_id end
	
	

  open cur_schema
  fetch next from cur_schema into @schema_name, @carrier_id_combo

  while ( @@FETCH_STATUS = 0 )
    begin

begin try
	  print 'BEGIN processing '+@schema_name

	 ---- for plan with multiple products, identify members who moved products
	  exec [dbo].[sp_prep_0_identify_members_changed_products] @p_carrier_id_combo = @carrier_id_combo



	 ------------- -- -- build views for diagnosis codes
	 exec [dbo].[sp_base_0_source_create_views_for_diagnosis_codes] @p_carrier_id_combo = @carrier_id_combo

	 -- -- check whether deduped dx code table is available, if not, run to create the deduped table
	  IF (NOT EXISTS (SELECT * 
                 FROM INFORMATION_SCHEMA.TABLES 
                 WHERE TABLE_NAME = 'dedup_dx_code_proc_20_deduped'
				 AND TABLE_SCHEMA = @schema_name)) OR @p_rerun_dx_codes = 'Y'
		BEGIN
			print 'Begin dedupe the Diagnosis Codes ...'
			exec [dbo].[sp_dedup_dx_code_claim_line] @p_carrier_id_combo = @carrier_id_combo
			--print 'Dedupe Diagnosis Codes is completed'
		END


	  ------ --for plans that provide professional header dx codes, create the dedupe table with prof header dx code
	    declare @apply_prof_header_dx_code varchar(50)
		set @apply_prof_header_dx_code = (select flag_prof_header_dx_code from process.data_status_tracking where schema_name = @schema_name)

		if @apply_prof_header_dx_code = 1
		begin
		 IF (NOT EXISTS (SELECT * 
                 FROM INFORMATION_SCHEMA.TABLES 
                 WHERE TABLE_NAME = 'dedup_dx_code_proc_20_deduped_prof_header'
				 AND TABLE_SCHEMA = @schema_name)) OR @p_rerun_dx_codes = 'Y'
		BEGIN
			print 'Begin dedupe the Diagnosis Codes with Prof Header Dx Codes ...'
			exec [dbo].[sp_dedup_dx_code_claim_line_prof_header] @p_carrier_id_combo = @carrier_id_combo
			print 'Dedupe Diagnosis Codes is completed'
		END
		end

		
	 exec dbo.sp_base_1_source_create_views_for_all_inputs @p_carrier_id_combo = @carrier_id_combo

	 exec dbo.sp_base_1_source1_reassign_products_for_members_changed_products @p_schema_name = @schema_name

	 exec dbo.sp_base_2_apply_membership_exclusions @p_schema_name = @schema_name, @p_create_CCI = 'Y'

    exec dbo.sp_base_3_process_claims_financial_step_1 @p_schema_name = @schema_name, @p_create_CCI = 'Y'
	  
	 exec dbo.sp_base_5_process_claims_diagnosis_codes @p_schema_name = @schema_name
	 
	 --exec dbo.sp_base_5_process_claims_diagnosis_codes_2019 @p_schema_name = @schema_name   --only needed for CY20
	  
	 exec dbo.sp_base_6_process_membership @p_schema_name = @schema_name

	 exec dbo.sp_base_7_process_member_CCSR_Conditions @p_schema_name = @schema_name

	 --exec dbo.sp_base_7_process_member_CCS_Conditions_2019  @p_schema_name = @schema_name  --only needed for CY20

	 exec [dbo].[sp_base_75_process_member_risk_score] @p_schema_name = @schema_name

	-- exec dbo.sp_base_75_process_member_risk_score_2019 @p_schema_name = @schema_name  --only needed for CY20

	 exec dbo.sp_base_8_process_exclusion_on_members @p_schema_name = @schema_name
	  
	 exec dbo.sp_base_9_create_mbr_clm_views_with_exclusion @p_schema_name = @schema_name  

	 exec dbo.sp_output_review_collect_results @p_schema_name = @schema_name, @p_run_message = @p_run_message

  	  print 'END processing '+@schema_name

end try

BEGIN CATCH
    -- Execute the error retrieval routine.
    EXECUTE log.usp_GetErrorInfo 
END CATCH

	  fetch next from cur_schema into @schema_name, @carrier_id_combo

    end

  close cur_schema
  deallocate cur_schema

end 

/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/

GO
/****** Object:  StoredProcedure [dbo].[sp_ra_uds_control_standard_deliverables]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_ra_uds_control_standard_deliverables]
/*****************************************************************************
 Description: 
    This is the control center to create final UDS Standard Deliverables
	By calling existing pre-packaged stored procedures
	
	Creation of pieces of data is stored in each schema
	View is built to union all plan products result and final conform to UDS Data Layout


 Parameters:
    schema_name - the plan product to run and write almost final results to
	rerun_code - 0 both membership and claims, 1 membership only, 2 claims only
	replace_tableshell - set to 'Y' for create table for the first time or table shells need revision

 Return:

 Notes:

 Change History:
	2015-11-09 SL - initial version
	2015-11-10 SL - add @p_rerun_code to control re-run membership or claims
	2015-11-11 SL - streamline downstream process of union all plans data
	2015-11-19 SL - add @p_replace_tableshell to integrate tableshell creation step
	2015-12-09 SL - set @p_replace_tableshell = 'Y' to always drop and create table shells

	2017-05-15 SL - revise the source data, no need to loop through plans
	CY2016
	2018-02-20 SL - add SP to evaluate Fully Insured exclusion
	
	CY2017
	2018-10-11 SL - add SP to rerun the calculation of AV values based on the final exclusion
					add SP to populate host_chp_carrier_id and host_pdr_product_id for Lindsey's review
 
*****************************************************************************/
	@p_run_message nvarchar(max), 
	@p_replace_tableshell	varchar(1) = 'Y'

as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = '@p_run_message|@p_replace_tableshell'
	SET @Logging_Values = ISNULL(CAST(@p_run_message AS NVARCHAR(MAX)), 'XNULLX') +'|'+ISNULL(CAST(@p_replace_tableshell AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/

begin

SET NOCOUNT OFF


if @p_run_message is null
begin
	raiserror('You have to input message for parameter @p_run_message for logging purpose',1,1) with nowait
end




 --determine the Fully Insured exclusion for hosted data
exec [dbo].[sp_UDS_0_Determine_Fully_Insured_Exclusions] @p_schema_name =NULL


-- --re-calculate the AV value based on the final exclusion
exec [dbo].[sp_base_8_UDS_process_exclusion_on_members_final] @p_schema_name =NULL
exec [dbo].[sp_base_9_UDS_create_mbr_clm_views_with_exclusion_Final] @p_schema_name = NULL


------union all detail data together
exec [dbo].[sp_base_11_build_views_all_plans_detail]



--run aggregate ONLY for the data that is included in PMPM submission
exec [dbo].[sp_UDS_1_create_final_pieces_mbr_clm] 


-------create output tableshells for membership and claims (not final view for text files yet)
-----if tableshell needs revision, revise tableshell sp and set input parameter 'Y'
if @p_replace_tableshell = 'Y'
begin
print 'Standard Output Table Shells are Recreated'
exec [dbo].[sp_UDS_2_create_output_tableshell] 
end


----create final data and insert into tableshell
----apply exclusion of negative claim lines
--print 'Insert into Tableshells'
exec [dbo].[sp_UDS_3_build_output_table_membership_and_claims]



----build final tables for text files
--print 'Final Tables are built for Text Files'
exec [dbo].[sp_UDS_4_build_standard_output_tables]



end

/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/


GO
/****** Object:  StoredProcedure [dbo].[sp_UDS_0_Determine_Fully_Insured_Exclusions]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_UDS_0_Determine_Fully_Insured_Exclusions]
/*****************************************************************************
 Description: 
 Determine the zip codes to exclude Fully Insured data


 Parameters:
 schema_name - the plan product to run

 Return:

 Notes:

 Change History:
	2018-02-20 SL - initial version
 
*****************************************************************************/
									@p_schema_name	varchar(50) = NULL
AS
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = '@p_schema_name'
	SET @Logging_Values = ISNULL(CAST(@p_schema_name AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/


BEGIN



--truncate table 
if @p_schema_name is null
begin
truncate table Reference.base_data_Fully_Insured_Eligible_by_Zip3_PMPM
end



declare 
	@schema_name    varchar(255),
	@chp_carrier_id varchar(25),
	@pdr_product_id varchar(25),
	@data_source varchar(25),

	@dynSQL nvarchar(max)



  declare cur_schema cursor for
	select 
		a.schema_name, chp_carrier_id, pdr_product_id
	from process.data_status_tracking a
	  where include_in_uds_pmpm = 1
	  and a.schema_name = isnull(@p_schema_name, schema_name)

  open cur_schema
  fetch next from cur_schema into @schema_name, @chp_carrier_id, @pdr_product_id

  while ( @@FETCH_STATUS = 0 )
    begin


--============================================================================
-- Determine zip3 where Fully Insured to be excluded
--============================================================================


DELETE FROM [reference].base_data_Fully_Insured_Eligible_by_Zip3_PMPM
        OUTPUT deleted.* INTO reference.base_data_Fully_Insured_Eligible_by_Zip3_PMPM_DELETED
where chp_carrier_id = @chp_carrier_id
and pdr_product_id = @pdr_product_id


set @dynSQL = replace('insert into Reference.base_data_Fully_Insured_Eligible_by_Zip3_PMPM with (tablock)
select
	*,
	getdate() as update_time
from
(select 
	chp_carrier_id,
	pdr_product_id,
	home_hosted_indicator,
	zip3, 
	insurance_arrangement,
	flag_exclude_groups,
	zip_exclusion_flag,
	sum(enrollment_months) member_months
from %schema_name%.proc_membership_attributes_10_bracket_mapped
group by 
	chp_carrier_id,
	pdr_product_id,
	home_hosted_indicator,
	zip3,
	insurance_arrangement,
	flag_exclude_groups,
	zip_exclusion_flag) a
','%schema_name%',@schema_name)



exec sp_executesql @dynSQL
fetch next from cur_schema into @schema_name, @chp_carrier_id, @pdr_product_id
end
close cur_schema
deallocate cur_schema



--hosted data for evaluation of Fully Insured exclusion


drop table if exists Reference.ref_Fully_Insured_Final_Rules_proc_00_hosted

;with base_data as
(select * 
from reference.base_data_Fully_Insured_Eligible_by_Zip3_PMPM
where flag_exclude_groups = 'N'
and zip_exclusion_flag='N')
select 
	a.chp_carrier_id,
	a.pdr_product_id, 
	a.home_hosted_indicator,
	a.zip3, 
	a.insurance_arrangement,
	a.flag_exclude_groups,
	a.member_months,
	case when c.carrier_group_code = 9999 then c.carrier_group_code else c.ca_id end as host_chp_carrier_id,
	c.pdr_product_id as host_pdr_product_id,
	a.[update time] as update_time
into Reference.ref_Fully_Insured_Final_Rules_proc_00_hosted
from base_data a
join
 Reference.ref_gap_creation_list_of_gap_zip3_Anthem_internally_hosted c        
on c.zip3 = a.zip3
join
Reference.ref_gap_creation_ppo_plan_prod_universe_Anthem_internally_hosted b  
on b.ca_id = a.chp_carrier_id
and b.pdr_product_id = a.pdr_product_id
and b.carrier_group_code = c.carrier_group_code



--add the HOME data points for evaluation 


drop table if exists Reference.ref_Fully_Insured_Final_Rules_proc_10_all_data_for_FI_exclusion_evaluation
--HOME data points
select 
	a.chp_carrier_id,
	a.pdr_product_id, 
	a.home_hosted_indicator,
	a.zip3,
	a.insurance_arrangement,
	a.flag_exclude_groups,
	a.member_months,
	chp_carrier_id as host_chp_carrier_id,
	pdr_product_id as host_pdr_product_id,
	a.[update time] as update_time
into Reference.ref_Fully_Insured_Final_Rules_proc_10_all_data_for_FI_exclusion_evaluation
from reference.base_data_Fully_Insured_Eligible_by_Zip3_PMPM a
where flag_exclude_groups = 'N'
and home_hosted_indicator = 'HOME'
and zip_exclusion_flag='N'
and not exists (select * from Reference.ref_Fully_Insured_Final_Rules_proc_00_hosted b
where b.host_chp_carrier_id = a.chp_carrier_id
and b.host_pdr_product_id = a.pdr_product_id)
--GAP and Anthem internally hosted data
union all
select *
from Reference.ref_Fully_Insured_Final_Rules_proc_00_hosted a


--evaluate the Fully Insured exclusion

drop table if exists Reference.ref_Fully_Insured_Final_Rules_proc_20_evaluated
select
	*,
	case when member_months_ASO >=20000  then 'Y' else 'N' end as flag_exclude_FI
into Reference.ref_Fully_Insured_Final_Rules_proc_20_evaluated
from
(select 
	host_chp_carrier_id,
	host_pdr_product_id,
	zip3,
	sum(member_months) as member_months_tot,
	sum(case when insurance_arrangement = 'S' then member_months else 0 end) as member_months_ASO,
	sum(case when insurance_arrangement = 'F' then member_months else 0 end) as member_months_FI,
	sum(case when insurance_arrangement = 'U' then member_months else 0 end) as member_months_Unknown
from Reference.ref_Fully_Insured_Final_Rules_proc_10_all_data_for_FI_exclusion_evaluation
group by
	host_chp_carrier_id,
	host_pdr_product_id,
	zip3) a

--Final Rule in one table

drop table if exists Reference.ref_Fully_Insured_Final_Rules
select 
	a.*,
	case when a.insurance_arrangement = 'U' then 'Y'
	     when b.zip3 is not null and a.insurance_arrangement = 'F' then b.flag_exclude_FI
		 else 'N' end as flag_exclude_FI
into Reference.ref_Fully_Insured_Final_Rules
from Reference.ref_Fully_Insured_Final_Rules_proc_10_all_data_for_FI_exclusion_evaluation a
left join
Reference.ref_Fully_Insured_Final_Rules_proc_20_evaluated b
on b.host_chp_carrier_id = a.host_chp_carrier_id
and b.host_pdr_product_id = a.host_pdr_product_id
and b.zip3 = a.zip3



--create index to make sure one member could only have one attribute

IF EXISTS (SELECT name FROM sys.indexes
            WHERE name = N'IX_ref_Fully_Insured_Final_Rules' and object_id = object_id('Reference.ref_Fully_Insured_Final_Rules')) 
    DROP INDEX IX_ref_Fully_Insured_Final_Rules ON Reference.ref_Fully_Insured_Final_Rules; 

-- Create a clustered index 
CREATE UNIQUE CLUSTERED INDEX IX_ref_Fully_Insured_Final_Rules
    ON Reference.ref_Fully_Insured_Final_Rules (chp_carrier_id, pdr_product_id, zip3, insurance_arrangement);





END

/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/





GO
/****** Object:  StoredProcedure [dbo].[sp_UDS_1_create_final_pieces_mbr_clm]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_UDS_1_create_final_pieces_mbr_clm]
/*****************************************************************************
 Description: 
    Common process of processing claims with financial data
	All common process happen in dbo (results refreshed when a plan product is run)


 Parameters:
    schema_name - the plan product to run
	rerun_code - 0 both membership and claims, 1 membership only, 2 claims only

 Return:

 Notes:

 Change History:
	
	2017-05-05 SL - CY15 resubmission revision for implement custom exclusion in deliverables
					move table creation of proc_membership_ccs_conditions_30_aggregated_risk_score to this SP from sp_base_9_process_membership
	2017-05-15 SL - change the source from to all_plans views
	CY2016
	2018-02-16 SL - apply the Fully Insured exclusion here - due to GAP and Anthem internal hosted data for CO/NV
	                insurance arrangement value replaced by employer_group_size (there are 500 members where insurance arrangement is F, but employer_group_size is SL or NULL for Highmark ALT, will use SL for those members)
	2018-02-22 SL - add various risk scores from prior factors and firms' factors
	2018-02-27 SL - add other_provider_payment
	2018-10-10 SL - add line_of_business in join clause for the Fully Insured exclusion
	2018-10-18 SL - revise for Anthem HOME version
	2021-08-11 TK - Added new fields and logic for quaterly fields and covid_related_indicator. Removed aon_risk_score fields and line_of_business fields
	2021-10-15 TK ---Changes made to fix a cob1/nvb1 duplicated issue. This Stored procedure needs to be modified in CY21
 
*****************************************************************************/
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = ''
	SET @Logging_Values = ISNULL(CAST(NULL AS NVARCHAR(MAX)), 'XNULLX') 
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/
begin


----------------------------------------------------------------DELETE FOR CY21---------------------------------------------------------------------------------------------------------------------------
---fix for Anthem COB1/NVB1 with duplicate members due to the addition of hosted data ---to identify and fix the covid related indicator. Need a bettter fix for CY21
drop table if exists #a
select
	coalesce(b.host_chp_carrier_id, a.chp_carrier_id) as chp_carrier_id,
	coalesce(b.host_pdr_product_id, a.pdr_product_id) as pdr_product_id,
	a.zip3,
	member_id,
	a.home_hosted_indicator,
	member_gender,
	age_bracket,
	duration_bracket,
	paid_to_allowed_ratio_bracket_ic,
	paid_to_allowed_ratio_bracket_all,
	high_cost_claimant,
	employer_group_size, 
	covid_related_indicator,
	enrollment_months,
	Member_Months_Q1,
	Member_Months_Q2,
	Member_Months_Q3,
	Member_Months_Q4,
	risk_factor_ccsr,
	risk_factor_age_gender,
	risk_factor_tot,
	risk_factor_tot_UDS_Prev   
into #a
from all_plans.vw_proc_membership_ccsr_conditions_20_member_risk_score_b4_exclusion a
join
 Reference.ref_Fully_Insured_Final_Rules b
on b.chp_carrier_id = a.chp_carrier_id
and b.pdr_product_id = a.pdr_product_id
and b.home_hosted_indicator = a.home_hosted_indicator   
and b.zip3 = a.zip3
and b.insurance_arrangement = a.insurance_arrangement
and a.flag_exclude_groups = 'N'
and b.flag_exclude_FI = 'N'


Drop table if exists #two
select member_id, count(member_id) as cnt into #two 
from #a
where pdr_product_id in ('cob1', 'nvb1')
group by member_id
having count(member_id) >1



drop table if exists #duplicates
select * into #duplicates from #a where member_id in (select member_id from #two) and pdr_product_id in ('cob1', 'nvb1')
---order by member_id

--select * from #duplicates order by member_id


Drop table if exists #covid
select * into #covid from(
select member_id,
covid_related_indicator,
row_number() over(partition by member_id order by case when covid_related_indicator='YI' then 1 when covid_related_indicator='YN' then 2 else 3 end) as covid_in
from #duplicates)a
where covid_in=1


update a
set covid_related_indicator=b.covid_related_indicator
from #a a
join #covid b
on a.member_id=b.member_id

---------------------------------------------------------------------------------------------DELETE STOPS HERE ----------------------------------------------------------------------------------------------------------------------




--calculate member_count, member_months and average_risk_scores (group by)
---UNCOMMENT FOR CY21
if object_id ('all_plans.proc_membership_ccsr_conditions_30_aggregated_risk_score', 'U') is not null
drop table all_plans.proc_membership_ccsr_conditions_30_aggregated_risk_score;

select
--coalesce(b.host_chp_carrier_id, a.chp_carrier_id) as chp_carrier_id, ---UNCOMMENT FOR CY21
--	coalesce(b.host_pdr_product_id, a.pdr_product_id) as pdr_product_id, ---UNCOMMENT FOR CY21
	chp_carrier_id, --delete for CY21
	pdr_product_id, --delete for CY21
	a.zip3,
	member_gender,
	age_bracket,
	duration_bracket,
	paid_to_allowed_ratio_bracket_ic,
	paid_to_allowed_ratio_bracket_all,
	high_cost_claimant,
	coalesce(employer_group_size, 'SL') as insurance_arrangement,
	covid_related_indicator,
	count(*) as member_count,
	sum(enrollment_months) as member_months_Annual,
	sum(Member_Months_Q1)as Member_Months_Q1,
	sum(Member_Months_Q2) as Member_Months_Q2,
	sum(Member_Months_Q3) as Member_Months_Q3,
	sum(Member_Months_Q4) as Member_Months_Q4,
	sum(risk_factor_ccsr)/count(*) as avg_risk_score_ccsr,
	sum(risk_factor_age_gender)/count(*) as avg_risk_score_age_gender,
	sum(risk_factor_tot)/count(*) as avg_risk_score,
	sum(risk_factor_tot_UDS_Prev)/count(*) as avg_risk_score_UDS_Prev   
into all_plans.proc_membership_ccsr_conditions_30_aggregated_risk_score
from 
#a a --delete for CY21

---UNCOMMENT FOR CY21
/*
all_plans.vw_proc_membership_ccsr_conditions_20_member_risk_score_b4_exclusion a 
join
 Reference.ref_Fully_Insured_Final_Rules b  
on b.chp_carrier_id = a.chp_carrier_id
and b.pdr_product_id = a.pdr_product_id
and b.home_hosted_indicator = a.home_hosted_indicator   
and b.zip3 = a.zip3
and b.insurance_arrangement = a.insurance_arrangement
and a.flag_exclude_groups = 'N'
and b.flag_exclude_FI = 'N'
and b.pdr_product_id <>'cal3'
*/
group by
--coalesce(b.host_chp_carrier_id, a.chp_carrier_id) as chp_carrier_id, ---UNCOMMENT FOR CY21
--	coalesce(b.host_pdr_product_id, a.pdr_product_id) as pdr_product_id, ---UNCOMMENT FOR CY21
	a.chp_carrier_id, --delete for CY21
	 a.pdr_product_id, --delete for CY21
      a.zip3,
	member_gender,
	age_bracket,
	duration_bracket,
	high_cost_claimant,
	coalesce(employer_group_size, 'SL'),
	paid_to_allowed_ratio_bracket_ic,
	paid_to_allowed_ratio_bracket_all,
	covid_related_indicator




--Members  whose dob are in 2020 which results in a null age bracket. Data needs to be excluded
Delete from all_plans.proc_membership_ccsr_conditions_30_aggregated_risk_score where age_bracket is null

--select sum(member_count) from all_plans.proc_membership_ccsr_conditions_30_aggregated_risk_score where chp_carrier_id<>9999 and CONCAT(zip3, pdr_product_id)not in( '193PAB6', '193PAB1', '193PAL6', '193DEB1')

--apply pivot function to transform CCSR conditions

DECLARE @cols AS NVARCHAR(MAX),
    @query  AS NVARCHAR(MAX)

select @cols = STUFF((SELECT ',' + QUOTENAME(ccsr_condition_type) 
                    from reference.ref_ccsr_condition_shell
                    group by ccsr_condition_type
                    order by case when ccsr_condition_type like '%.[0-9]' then 'Z'
					              when ccsr_condition_type = 'ConditionXXXXXX' then 'A' else 'C' end,
								  ccsr_condition_type
            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')

--select @cols

if object_id ('all_plans.proc_membership_ccsr_conditions_40_transform_ccsr_conditions', 'U') is not null
drop table all_plans.proc_membership_ccsr_conditions_40_transform_ccsr_conditions;

set @query = 'SELECT chp_carrier_id, 
                      pdr_product_id, 
					  zip3, 
					  member_gender, 
					  age_bracket, 
					  duration_bracket, 
					  high_cost_claimant,
					  insurance_arrangement, 
					  paid_to_allowed_ratio_bracket_ic,
					  paid_to_allowed_ratio_bracket_all,
					  ' + @cols + 
' into all_plans.proc_membership_ccsr_conditions_40_transform_ccsr_conditions from 

             (
                select 
					coalesce(b.host_chp_carrier_id, a.chp_carrier_id) as chp_carrier_id,
					coalesce(b.host_pdr_product_id, a.pdr_product_id) as pdr_product_id,
					member_id,
					a.zip3,
					member_gender,
					age_bracket,
					duration_bracket,
					high_cost_claimant,
					coalesce(employer_group_size, ''SL'') as insurance_arrangement,
					paid_to_allowed_ratio_bracket_ic,
	                paid_to_allowed_ratio_bracket_all,
					ccsr_condition_type
                from all_plans.vw_proc_membership_ccsr_conditions_10_b4_exclusion a
				join
				Reference.ref_Fully_Insured_Final_Rules b
				on b.chp_carrier_id = a.chp_carrier_id
				and b.pdr_product_id = a.pdr_product_id
				and b.home_hosted_indicator = a.home_hosted_indicator   
				and b.zip3 = a.zip3
				and b.insurance_arrangement = a.insurance_arrangement
				and a.flag_exclude_groups = ''N''
				and b.flag_exclude_FI = ''N''
				and b.pdr_product_id <>''cal3''

            ) x
            pivot 
            (
                count(member_id)
                for ccsr_condition_type in (' + @cols + ')
            ) p '

--select @query

execute(@query);

--Members  whose dob are in 2020 which results in a null age bracket. Data needs to be excluded
delete from  all_plans.proc_membership_ccsr_conditions_40_transform_ccsr_conditions where age_bracket is null

----------------------------------------------------------------DELETE FOR CY21---------------------------------------------------------------------------------------------------------------------------

---fix for Anthem COB1/NVB1 with duplicate members ---to identify and fix the covid related indicator. Need a bettter fix for CY21
drop table if exists #b
  select 
    coalesce(b.host_chp_carrier_id, a.chp_carrier_id) as chp_carrier_id,
	coalesce(b.host_pdr_product_id, a.pdr_product_id) as pdr_product_id, 
	a.zip3,
	a.member_id,
	a.home_hosted_indicator,
	member_gender,
	age_bracket,
	duration_bracket,
	high_cost_claimant,
	employer_group_size,
	benefit_payment_contract_status,
	claim_type,
	op_type_of_service,
	covid_related_indicator,
	paid_to_allowed_ratio_bracket_ic,
	paid_to_allowed_ratio_bracket_all,
    admits,
	a.year_month,
	actual_utilization,
	adjusted_admits,
	adjusted_utilization,
	billed_amount,
	adjusted_billed_amount,
	allowed_amount,
    adjusted_allowed_amount,
	paid_amount,
    adjusted_paid_amount,
    allowed_amount_uds_pmpm,
    RnC_cutback_amount,
    adjusted_RnC_cutback_amount,
    savings_amount,
    adjusted_savings_amount,
    other_provider_payment_direct,
    other_provider_payment_indirect	    
into #b
from  all_plans.vw_proc_claims_financial_20_detail_b4_exclusion  a
join
Reference.ref_Fully_Insured_Final_Rules b
on b.chp_carrier_id = a.chp_carrier_id
and b.pdr_product_id = a.pdr_product_id
and b.home_hosted_indicator = a.home_hosted_indicator   --needed for Empire 064 zip code
and b.zip3 = a.zip3
--and b.line_of_business = a.line_of_business       --2018-10-10 add line_of_business for Anthem host data
and b.insurance_arrangement = a.insurance_arrangement
and a.flag_exclude_groups = 'N'
and b.flag_exclude_FI = 'N'
and a.exclude_medical_benefit_flag = 'N'
and a.exclusion_flag = 'N'
and b.pdr_product_id <>'cal3'


update a
set covid_related_indicator=b.covid_related_indicator
from #b a
join #covid b
on a.member_id=b.member_id


delete from #B  where year_month in ('2021-01', '2021-02', '2019-12') --orphan claims where the year month is not in the incurred period. This does not affect membership

-------------------------------------------------------------------------------------------DELETE STOPS HERE -----------------------------------------------------------------------------------------------------------------------------------------------------------






----------------------------------------------create final claims outputs----------------------------------------------------
------group by from detail financial data
if object_id ('all_plans.proc_claims_financial_30_group_by', 'U') is not null
drop table all_plans.proc_claims_financial_30_group_by;
select
chp_carrier_id, ---delete FOR CY21
pdr_product_id,  ---delete FOR CY21
	--coalesce(b.host_chp_carrier_id, a.chp_carrier_id) as chp_carrier_id, ---UNCOMMENT FOR CY21
	--coalesce(b.host_pdr_product_id, a.pdr_product_id) as pdr_product_id, ---UNCOMMENT FOR CY21
	a.zip3,
	member_gender,
	age_bracket,
	duration_bracket,
	high_cost_claimant,
	coalesce(employer_group_size, 'SL') as insurance_arrangement,
	benefit_payment_contract_status,
	claim_type,
	op_type_of_service,
	covid_related_indicator,
	paid_to_allowed_ratio_bracket_ic,
	paid_to_allowed_ratio_bracket_all,
	sum(admits) as admits,
	sum(actual_utilization) as actual_utilization,
	sum(adjusted_admits) as adjusted_admits,
	sum(adjusted_utilization) as adjusted_utilization,
	sum(billed_amount) as billed_amount,
	sum(case when a.year_month between '2020-01' and '2020-03' then a.billed_amount else 0 end)  as billed_amount_Q1,
	sum(case when a.year_month between '2020-04' and '2020-06' then a.billed_amount else 0 end)  as billed_amount_Q2,
	sum(case when a.year_month between '2020-07' and '2020-09' then a.billed_amount else 0 end)  as billed_amount_Q3,
    sum(case when a.year_month between '2020-10' and '2020-12' then a.billed_amount else 0 end)  as billed_amount_Q4,
	sum(adjusted_billed_amount) as adjusted_billed_amount,
	sum(case when a.year_month between '2020-01' and '2020-03' then a.adjusted_billed_amount else 0 end)  as adjusted_billed_amount_Q1,
	sum(case when a.year_month between '2020-04' and '2020-06' then a.adjusted_billed_amount else 0 end)  as adjusted_billed_amount_Q2,
	sum(case when a.year_month between '2020-07' and '2020-09' then a.adjusted_billed_amount else 0 end)  as adjusted_billed_amount_Q3,
    sum(case when a.year_month between '2020-10' and '2020-12' then a.adjusted_billed_amount else 0 end)  as adjusted_billed_amount_Q4,
	sum(allowed_amount) as allowed_amount,
	sum(case when a.year_month between '2020-01' and '2020-03' then a.allowed_amount else 0 end)  as allowed_amount_Q1,
	sum(case when a.year_month between '2020-04' and '2020-06' then a.allowed_amount else 0 end)  as allowed_amount_Q2,
	sum(case when a.year_month between '2020-07' and '2020-09' then a.allowed_amount else 0 end)  as allowed_amount_Q3,
    sum(case when a.year_month between '2020-10' and '2020-12' then a.allowed_amount else 0 end)  as allowed_amount_Q4,
	sum(adjusted_allowed_amount) as adjusted_allowed_amount,
	sum(case when a.year_month between '2020-01' and '2020-03' then a.adjusted_allowed_amount else 0 end)  as adjusted_allowed_amount_Q1,
	sum(case when a.year_month between '2020-04' and '2020-06' then a.adjusted_allowed_amount else 0 end)  as adjusted_allowed_amount_Q2,
	sum(case when a.year_month between '2020-07' and '2020-09' then a.adjusted_allowed_amount else 0 end)  as adjusted_allowed_amount_Q3,
    sum(case when a.year_month between '2020-10' and '2020-12' then a.adjusted_allowed_amount else 0 end)  as adjusted_allowed_amount_Q4,
	sum(paid_amount) as paid_amount,
	sum(case when a.year_month between '2020-01' and '2020-03' then a.paid_amount else 0 end)  as paid_amount_Q1,
	sum(case when a.year_month between '2020-04' and '2020-06' then a.paid_amount else 0 end)  as paid_amount_Q2,
	sum(case when a.year_month between '2020-07' and '2020-09' then a.paid_amount else 0 end)  as paid_amount_Q3,
    sum(case when a.year_month between '2020-10' and '2020-12' then a.paid_amount else 0 end)  as paid_amount_Q4,
	sum(adjusted_paid_amount) as adjusted_paid_amount,
	sum(case when a.year_month between '2020-01' and '2020-03' then a.adjusted_paid_amount else 0 end)  as adjusted_paid_amount_Q1,
	sum(case when a.year_month between '2020-04' and '2020-06' then a.adjusted_paid_amount else 0 end)  as adjusted_paid_amount_Q2,
	sum(case when a.year_month between '2020-07' and '2020-09' then a.adjusted_paid_amount else 0 end)  as adjusted_paid_amount_Q3,
    sum(case when a.year_month between '2020-10' and '2020-12' then a.adjusted_paid_amount else 0 end)  as adjusted_paid_amount_Q4,
	sum(allowed_amount_uds_pmpm) as allowed_amount_uds_pmpm,
	sum(case when a.year_month between '2020-01' and '2020-03' then a.allowed_amount_uds_pmpm else 0 end)  as allowed_amount_uds_pmpm_Q1,
	sum(case when a.year_month between '2020-04' and '2020-06' then a.allowed_amount_uds_pmpm else 0 end)  as allowed_amount_uds_pmpm_Q2,
	sum(case when a.year_month between '2020-07' and '2020-09' then a.allowed_amount_uds_pmpm else 0 end)  as allowed_amount_uds_pmpm_Q3,
    sum(case when a.year_month between '2020-10' and '2020-12' then a.allowed_amount_uds_pmpm else 0 end)  as allowed_amount_uds_pmpm_Q4,
	sum(RnC_cutback_amount) as RnC_cutback_amount,
	sum(case when a.year_month between '2020-01' and '2020-03' then a.RnC_cutback_amount else 0 end)  as RnC_cutback_amount_Q1,
	sum(case when a.year_month between '2020-04' and '2020-06' then a.RnC_cutback_amount else 0 end)  as RnC_cutback_amountt_Q2,
	sum(case when a.year_month between '2020-07' and '2020-09' then a.RnC_cutback_amount else 0 end)  as RnC_cutback_amount_Q3,
    sum(case when a.year_month between '2020-10' and '2020-12' then a.RnC_cutback_amount else 0 end)  as RnC_cutback_amount_Q4,
	sum(adjusted_RnC_cutback_amount) as adjusted_RnC_cutback_amount,
	sum(case when a.year_month between '2020-01' and '2020-03' then a.adjusted_RnC_cutback_amount else 0 end)  as adjusted_RnC_cutback_amount_Q1,
	sum(case when a.year_month between '2020-04' and '2020-06' then a.adjusted_RnC_cutback_amount else 0 end)  as adjusted_RnC_cutback_amount_Q2,
	sum(case when a.year_month between '2020-07' and '2020-09' then a.adjusted_RnC_cutback_amount else 0 end)  as adjusted_RnC_cutback_amount_Q3,
    sum(case when a.year_month between '2020-10' and '2020-12' then a.adjusted_RnC_cutback_amount else 0 end)  as adjusted_RnC_cutback_amount_Q4,
	sum(savings_amount) as savings_amount,
	sum(case when a.year_month between '2020-01' and '2020-03' then a.savings_amount else 0 end)  as savings_amount_Q1,
	sum(case when a.year_month between '2020-04' and '2020-06' then a.savings_amount else 0 end)  as savings_amount_Q2,
	sum(case when a.year_month between '2020-07' and '2020-09' then a.savings_amount else 0 end)  as savings_amount_Q3,
    sum(case when a.year_month between '2020-10' and '2020-12' then a.savings_amount else 0 end)  as savings_amount_Q4,
	sum(adjusted_savings_amount) as adjusted_savings_amount,
	sum(case when a.year_month between '2020-01' and '2020-03' then a.adjusted_savings_amount else 0 end)  as adjusted_savings_amount_Q1,
	sum(case when a.year_month between '2020-04' and '2020-06' then a.adjusted_savings_amount else 0 end)  as adjusted_savings_amount_Q2,
	sum(case when a.year_month between '2020-07' and '2020-09' then a.adjusted_savings_amount else 0 end)  as adjusted_savings_amount_Q3,
    sum(case when a.year_month between '2020-10' and '2020-12' then a.adjusted_savings_amount else 0 end)  as adjusted_savings_amount_Q4,
	sum(other_provider_payment_direct) as other_provider_payment_direct,
	sum(other_provider_payment_indirect) as other_provider_payment_indirect	   
into all_plans.proc_claims_financial_30_group_by
from 
  #b a ---delete FOR CY21

---UNCOMMENT FOR CY21
/*
--all_plans.vw_proc_claims_financial_20_detail_b4_exclusion a
--join
--Reference.ref_Fully_Insured_Final_Rules b
--on b.chp_carrier_id = a.chp_carrier_id
--and b.pdr_product_id = a.pdr_product_id
--and b.home_hosted_indicator = a.home_hosted_indicator   --needed for Empire 064 zip code
--and b.zip3 = a.zip3
----and b.line_of_business = a.line_of_business       --2018-10-10 add line_of_business for Anthem host data
--and b.insurance_arrangement = a.insurance_arrangement
--and a.flag_exclude_groups = 'N'
--and b.flag_exclude_FI = 'N'
--and a.exclude_medical_benefit_flag = 'N'
--and a.exclusion_flag = 'N'
--and b.pdr_product_id <>'cal3'--add for CY2015 due to 65+ and COB member exclusion
*/
group by
    chp_carrier_id, ---delete FOR CY21
    pdr_product_id,  ---delete FOR CY21
	--coalesce(b.host_chp_carrier_id, a.chp_carrier_id), ---UNCOMMENT FOR CY21
	--coalesce(b.host_pdr_product_id, a.pdr_product_id), ---UNCOMMENT FOR CY21
	a.zip3,
	member_gender,
	age_bracket,
	duration_bracket,
	high_cost_claimant,
	coalesce(employer_group_size, 'SL'),
	benefit_payment_contract_status,
	claim_type,
	op_type_of_service,
	covid_related_indicator,
	paid_to_allowed_ratio_bracket_ic,
	paid_to_allowed_ratio_bracket_all

--Members  whose dob are in 2020 which results in a null age bracket. Data needs to be excluded
delete from all_plans.proc_claims_financial_30_group_by where age_bracket is null


--for CY20 only
update all_plans.proc_claims_financial_30_group_by
set adjusted_paid_amount_Q4=0.0000000000
where adjusted_paid_amount_Q4 is null

--for CY20 only
update all_plans.proc_claims_financial_30_group_by
set other_provider_payment_direct=allowed_amount-adjusted_allowed_amount
where chp_carrier_id in (913, 906, 881,947,898,1017)




end/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/


GO
/****** Object:  StoredProcedure [dbo].[sp_UDS_2_create_output_tableshell]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_UDS_2_create_output_tableshell]
/*****************************************************************************
 Description: 
    Make create output tableshell as procedure


 Parameters:
    p_replace_existing - whether to drop tableshell and recreate

 Return:

 Notes:

 Change History:
	2015-11-19 SL - initial version
	2016-07-12 SL - add paid to allowed ratio bracket, rename ucr_amount to RnC_Cutback_amount
	2017-05-15 SL - remove schema_name from OUTPUT_STD.UDS_PMPM_Membership_and_Risk_Data

	2018-02-23 SL - add more risk scores fields, this is the INTERNAL table
	2018-10-10 SL - add the compound CCS categories in the membership table
	                add Adjusted RnC Cutback field in the claims table
	2020-08-12 TK - Removed ccs categories
	2020-08-12 TK - Added quaterly indicator fields, covid_related field and new CCSR categories
 
*****************************************************************************/
								@p_replace_existing          varchar(1)  = 'Y'

as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = NULL
	SET @Logging_Values = NULL
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/
begin




--membership, requires not null for all fields

drop table if exists OUTPUT_STD.UDS_PMPM_Membership_and_Risk_Data_INTERNAL

create table OUTPUT_STD.UDS_PMPM_Membership_and_Risk_Data_INTERNAL
(
chp_carrier_id	varchar(10)	NOT NULL,
pdr_product_id	varchar(10)	NOT NULL,
uds_network_identifier	varchar(255)	NOT NULL,
service_period	varchar(20)	NOT NULL,
zip3	varchar(3)	NOT NULL,
uds_prod_ind	varchar(10)	NOT NULL,
member_gender	varchar(1)	NOT NULL,
age_bracket	varchar(10)	NOT NULL,
duration_bracket	varchar(10)	NOT NULL,
paid_to_allowed_ratio_bracket_IC varchar(25) NOT NULL,
paid_to_allowed_ratio_bracket_ALL varchar(25) NOT NULL,
high_cost_claimant	varchar(1)	NOT NULL,
arrangement_group_size_indicator	varchar(2)	NOT NULL, 
[COVID-Related Indicator] varchar(2)	NOT NULL,
member_count	int	NOT NULL,
[Member Months - Annual] int	NOT NULL,
[Member Months - Q1] int	NOT NULL,
[Member Months - Q2] int	NOT NULL,
[Member Months - Q3] int	NOT NULL,
[Member Months - Q4] int	NOT NULL,
avg_risk_score_ccsr	decimal(20,4)	NOT NULL,
avg_risk_score_age_gender	decimal(20,4)	NOT NULL,
avg_risk_score	decimal(20,4)	NOT NULL,
avg_risk_score_UDS_Prev decimal(20,4)	NOT NULL,     
[ConditionXXXXXX]      int  NOT NULL,
[Condition000000]      int  NOT NULL,
[ConditionBLD001]      int  NOT NULL,
[ConditionBLD002]      int  NOT NULL,
[ConditionBLD003]      int  NOT NULL,
[ConditionBLD004]      int  NOT NULL,
[ConditionBLD005]      int  NOT NULL,
[ConditionBLD006]      int  NOT NULL,
[ConditionBLD007]      int  NOT NULL,
[ConditionBLD008]      int  NOT NULL,
[ConditionBLD009]      int  NOT NULL,
[ConditionBLD010]      int  NOT NULL,
[ConditionCIR001]      int  NOT NULL,
[ConditionCIR002]      int  NOT NULL,
[ConditionCIR003]      int  NOT NULL,
[ConditionCIR004]      int  NOT NULL,
[ConditionCIR005]      int  NOT NULL,
[ConditionCIR006]      int  NOT NULL,
[ConditionCIR007]      int  NOT NULL,
[ConditionCIR008]      int  NOT NULL,
[ConditionCIR009]      int  NOT NULL,
[ConditionCIR010]      int  NOT NULL,
[ConditionCIR011]      int  NOT NULL,
[ConditionCIR012]      int  NOT NULL,
[ConditionCIR013]      int  NOT NULL,
[ConditionCIR014]      int  NOT NULL,
[ConditionCIR015]      int  NOT NULL,
[ConditionCIR016]      int  NOT NULL,
[ConditionCIR017]      int  NOT NULL,
[ConditionCIR018]      int  NOT NULL,
[ConditionCIR019]      int  NOT NULL,
[ConditionCIR020]      int  NOT NULL,
[ConditionCIR021]      int  NOT NULL,
[ConditionCIR022]      int  NOT NULL,
[ConditionCIR023]      int  NOT NULL,
[ConditionCIR024]      int  NOT NULL,
[ConditionCIR025]      int  NOT NULL,
[ConditionCIR026]      int  NOT NULL,
[ConditionCIR027]      int  NOT NULL,
[ConditionCIR028]      int  NOT NULL,
[ConditionCIR029]      int  NOT NULL,
[ConditionCIR030]      int  NOT NULL,
[ConditionCIR031]      int  NOT NULL,
[ConditionCIR032]      int  NOT NULL,
[ConditionCIR033]      int  NOT NULL,
[ConditionCIR034]      int  NOT NULL,
[ConditionCIR035]      int  NOT NULL,
[ConditionCIR036]      int  NOT NULL,
[ConditionCIR037]      int  NOT NULL,
[ConditionCIR038]      int  NOT NULL,
[ConditionCIR039]      int  NOT NULL,
[ConditionDIG001]      int  NOT NULL,
[ConditionDIG002]      int  NOT NULL,
[ConditionDIG003]      int  NOT NULL,
[ConditionDIG004]      int  NOT NULL,
[ConditionDIG005]      int  NOT NULL,
[ConditionDIG006]      int  NOT NULL,
[ConditionDIG007]      int  NOT NULL,
[ConditionDIG008]      int  NOT NULL,
[ConditionDIG009]      int  NOT NULL,
[ConditionDIG010]      int  NOT NULL,
[ConditionDIG011]      int  NOT NULL,
[ConditionDIG012]      int  NOT NULL,
[ConditionDIG013]      int  NOT NULL,
[ConditionDIG014]      int  NOT NULL,
[ConditionDIG015]      int  NOT NULL,
[ConditionDIG016]      int  NOT NULL,
[ConditionDIG017]      int  NOT NULL,
[ConditionDIG018]      int  NOT NULL,
[ConditionDIG019]      int  NOT NULL,
[ConditionDIG020]      int  NOT NULL,
[ConditionDIG021]      int  NOT NULL,
[ConditionDIG022]      int  NOT NULL,
[ConditionDIG023]      int  NOT NULL,
[ConditionDIG024]      int  NOT NULL,
[ConditionDIG025]      int  NOT NULL,
[ConditionEAR001]      int  NOT NULL,
[ConditionEAR002]      int  NOT NULL,
[ConditionEAR003]      int  NOT NULL,
[ConditionEAR004]      int  NOT NULL,
[ConditionEAR005]      int  NOT NULL,
[ConditionEAR006]      int  NOT NULL,
[ConditionEND001]      int  NOT NULL,
[ConditionEND002]      int  NOT NULL,
[ConditionEND003]      int  NOT NULL,
[ConditionEND004]      int  NOT NULL,
[ConditionEND005]      int  NOT NULL,
[ConditionEND006]      int  NOT NULL,
[ConditionEND007]      int  NOT NULL,
[ConditionEND008]      int  NOT NULL,
[ConditionEND009]      int  NOT NULL,
[ConditionEND010]      int  NOT NULL,
[ConditionEND011]      int  NOT NULL,
[ConditionEND012]      int  NOT NULL,
[ConditionEND013]      int  NOT NULL,
[ConditionEND014]      int  NOT NULL,
[ConditionEND015]      int  NOT NULL,
[ConditionEND016]      int  NOT NULL,
[ConditionEND017]      int  NOT NULL,
[ConditionEXT001]      int  NOT NULL,
[ConditionEXT002]      int  NOT NULL,
[ConditionEXT003]      int  NOT NULL,
[ConditionEXT004]      int  NOT NULL,
[ConditionEXT005]      int  NOT NULL,
[ConditionEXT006]      int  NOT NULL,
[ConditionEXT007]      int  NOT NULL,
[ConditionEXT008]      int  NOT NULL,
[ConditionEXT009]      int  NOT NULL,
[ConditionEXT010]      int  NOT NULL,
[ConditionEXT011]      int  NOT NULL,
[ConditionEXT012]      int  NOT NULL,
[ConditionEXT013]      int  NOT NULL,
[ConditionEXT014]      int  NOT NULL,
[ConditionEXT015]      int  NOT NULL,
[ConditionEXT016]      int  NOT NULL,
[ConditionEXT017]      int  NOT NULL,
[ConditionEXT018]      int  NOT NULL,
[ConditionEXT019]      int  NOT NULL,
[ConditionEXT020]      int  NOT NULL,
[ConditionEXT021]      int  NOT NULL,
[ConditionEXT022]      int  NOT NULL,
[ConditionEXT023]      int  NOT NULL,
[ConditionEXT024]      int  NOT NULL,
[ConditionEXT025]      int  NOT NULL,
[ConditionEXT026]      int  NOT NULL,
[ConditionEXT027]      int  NOT NULL,
[ConditionEXT028]      int  NOT NULL,
[ConditionEXT029]      int  NOT NULL,
[ConditionEXT030]      int  NOT NULL,
[ConditionEYE001]      int  NOT NULL,
[ConditionEYE002]      int  NOT NULL,
[ConditionEYE003]      int  NOT NULL,
[ConditionEYE004]      int  NOT NULL,
[ConditionEYE005]      int  NOT NULL,
[ConditionEYE006]      int  NOT NULL,
[ConditionEYE007]      int  NOT NULL,
[ConditionEYE008]      int  NOT NULL,
[ConditionEYE009]      int  NOT NULL,
[ConditionEYE010]      int  NOT NULL,
[ConditionEYE011]      int  NOT NULL,
[ConditionEYE012]      int  NOT NULL,
[ConditionFAC001]      int  NOT NULL,
[ConditionFAC002]      int  NOT NULL,
[ConditionFAC003]      int  NOT NULL,
[ConditionFAC004]      int  NOT NULL,
[ConditionFAC005]      int  NOT NULL,
[ConditionFAC006]      int  NOT NULL,
[ConditionFAC007]      int  NOT NULL,
[ConditionFAC008]      int  NOT NULL,
[ConditionFAC009]      int  NOT NULL,
[ConditionFAC010]      int  NOT NULL,
[ConditionFAC011]      int  NOT NULL,
[ConditionFAC012]      int  NOT NULL,
[ConditionFAC013]      int  NOT NULL,
[ConditionFAC014]      int  NOT NULL,
[ConditionFAC015]      int  NOT NULL,
[ConditionFAC016]      int  NOT NULL,
[ConditionFAC017]      int  NOT NULL,
[ConditionFAC018]      int  NOT NULL,
[ConditionFAC019]      int  NOT NULL,
[ConditionFAC020]      int  NOT NULL,
[ConditionFAC021]      int  NOT NULL,
[ConditionFAC022]      int  NOT NULL,
[ConditionFAC023]      int  NOT NULL,
[ConditionFAC024]      int  NOT NULL,
[ConditionFAC025]      int  NOT NULL,
[ConditionGEN001]      int  NOT NULL,
[ConditionGEN002]      int  NOT NULL,
[ConditionGEN003]      int  NOT NULL,
[ConditionGEN004]      int  NOT NULL,
[ConditionGEN005]      int  NOT NULL,
[ConditionGEN006]      int  NOT NULL,
[ConditionGEN007]      int  NOT NULL,
[ConditionGEN008]      int  NOT NULL,
[ConditionGEN009]      int  NOT NULL,
[ConditionGEN010]      int  NOT NULL,
[ConditionGEN011]      int  NOT NULL,
[ConditionGEN012]      int  NOT NULL,
[ConditionGEN013]      int  NOT NULL,
[ConditionGEN014]      int  NOT NULL,
[ConditionGEN015]      int  NOT NULL,
[ConditionGEN016]      int  NOT NULL,
[ConditionGEN017]      int  NOT NULL,
[ConditionGEN018]      int  NOT NULL,
[ConditionGEN019]      int  NOT NULL,
[ConditionGEN020]      int  NOT NULL,
[ConditionGEN021]      int  NOT NULL,
[ConditionGEN022]      int  NOT NULL,
[ConditionGEN023]      int  NOT NULL,
[ConditionGEN024]      int  NOT NULL,
[ConditionGEN025]      int  NOT NULL,
[ConditionGEN026]      int  NOT NULL,
[ConditionINF001]      int  NOT NULL,
[ConditionINF002]      int  NOT NULL,
[ConditionINF003]      int  NOT NULL,
[ConditionINF004]      int  NOT NULL,
[ConditionINF005]      int  NOT NULL,
[ConditionINF006]      int  NOT NULL,
[ConditionINF007]      int  NOT NULL,
[ConditionINF008]      int  NOT NULL,
[ConditionINF009]      int  NOT NULL,
[ConditionINF010]      int  NOT NULL,
[ConditionINF011]      int  NOT NULL,
[ConditionINJ001]      int  NOT NULL,
[ConditionINJ002]      int  NOT NULL,
[ConditionINJ003]      int  NOT NULL,
[ConditionINJ004]      int  NOT NULL,
[ConditionINJ005]      int  NOT NULL,
[ConditionINJ006]      int  NOT NULL,
[ConditionINJ007]      int  NOT NULL,
[ConditionINJ008]      int  NOT NULL,
[ConditionINJ009]      int  NOT NULL,
[ConditionINJ010]      int  NOT NULL,
[ConditionINJ011]      int  NOT NULL,
[ConditionINJ012]      int  NOT NULL,
[ConditionINJ013]      int  NOT NULL,
[ConditionINJ014]      int  NOT NULL,
[ConditionINJ015]      int  NOT NULL,
[ConditionINJ016]      int  NOT NULL,
[ConditionINJ017]      int  NOT NULL,
[ConditionINJ018]      int  NOT NULL,
[ConditionINJ019]      int  NOT NULL,
[ConditionINJ020]      int  NOT NULL,
[ConditionINJ021]      int  NOT NULL,
[ConditionINJ022]      int  NOT NULL,
[ConditionINJ023]      int  NOT NULL,
[ConditionINJ024]      int  NOT NULL,
[ConditionINJ025]      int  NOT NULL,
[ConditionINJ026]      int  NOT NULL,
[ConditionINJ027]      int  NOT NULL,
[ConditionINJ028]      int  NOT NULL,
[ConditionINJ029]      int  NOT NULL,
[ConditionINJ030]      int  NOT NULL,
[ConditionINJ031]      int  NOT NULL,
[ConditionINJ032]      int  NOT NULL,
[ConditionINJ033]      int  NOT NULL,
[ConditionINJ034]      int  NOT NULL,
[ConditionINJ035]      int  NOT NULL,
[ConditionINJ036]      int  NOT NULL,
[ConditionINJ037]      int  NOT NULL,
[ConditionINJ038]      int  NOT NULL,
[ConditionINJ039]      int  NOT NULL,
[ConditionINJ040]      int  NOT NULL,
[ConditionINJ041]      int  NOT NULL,
[ConditionINJ042]      int  NOT NULL,
[ConditionINJ043]      int  NOT NULL,
[ConditionINJ044]      int  NOT NULL,
[ConditionINJ045]      int  NOT NULL,
[ConditionINJ046]      int  NOT NULL,
[ConditionINJ047]      int  NOT NULL,
[ConditionINJ048]      int  NOT NULL,
[ConditionINJ049]      int  NOT NULL,
[ConditionINJ050]      int  NOT NULL,
[ConditionINJ051]      int  NOT NULL,
[ConditionINJ052]      int  NOT NULL,
[ConditionINJ053]      int  NOT NULL,
[ConditionINJ054]      int  NOT NULL,
[ConditionINJ055]      int  NOT NULL,
[ConditionINJ056]      int  NOT NULL,
[ConditionINJ057]      int  NOT NULL,
[ConditionINJ058]      int  NOT NULL,
[ConditionINJ059]      int  NOT NULL,
[ConditionINJ060]      int  NOT NULL,
[ConditionINJ061]      int  NOT NULL,
[ConditionINJ062]      int  NOT NULL,
[ConditionINJ063]      int  NOT NULL,
[ConditionINJ064]      int  NOT NULL,
[ConditionINJ065]      int  NOT NULL,
[ConditionINJ066]      int  NOT NULL,
[ConditionINJ067]      int  NOT NULL,
[ConditionINJ068]      int  NOT NULL,
[ConditionINJ069]      int  NOT NULL,
[ConditionINJ070]      int  NOT NULL,
[ConditionINJ071]      int  NOT NULL,
[ConditionINJ072]      int  NOT NULL,
[ConditionINJ073]      int  NOT NULL,
[ConditionINJ074]      int  NOT NULL,
[ConditionINJ075]      int  NOT NULL,
[ConditionINJ076]      int  NOT NULL,
[ConditionMAL001]      int  NOT NULL,
[ConditionMAL002]      int  NOT NULL,
[ConditionMAL003]      int  NOT NULL,
[ConditionMAL004]      int  NOT NULL,
[ConditionMAL005]      int  NOT NULL,
[ConditionMAL006]      int  NOT NULL,
[ConditionMAL007]      int  NOT NULL,
[ConditionMAL008]      int  NOT NULL,
[ConditionMAL009]      int  NOT NULL,
[ConditionMAL010]      int  NOT NULL,
[ConditionMBD001]      int  NOT NULL,
[ConditionMBD002]      int  NOT NULL,
[ConditionMBD003]      int  NOT NULL,
[ConditionMBD004]      int  NOT NULL,
[ConditionMBD005]      int  NOT NULL,
[ConditionMBD006]      int  NOT NULL,
[ConditionMBD007]      int  NOT NULL,
[ConditionMBD008]      int  NOT NULL,
[ConditionMBD009]      int  NOT NULL,
[ConditionMBD010]      int  NOT NULL,
[ConditionMBD011]      int  NOT NULL,
[ConditionMBD012]      int  NOT NULL,
[ConditionMBD013]      int  NOT NULL,
[ConditionMBD014]      int  NOT NULL,
[ConditionMBD017]      int  NOT NULL,
[ConditionMBD018]      int  NOT NULL,
[ConditionMBD019]      int  NOT NULL,
[ConditionMBD020]      int  NOT NULL,
[ConditionMBD021]      int  NOT NULL,
[ConditionMBD022]      int  NOT NULL,
[ConditionMBD023]      int  NOT NULL,
[ConditionMBD024]      int  NOT NULL,
[ConditionMBD025]      int  NOT NULL,
[ConditionMBD026]      int  NOT NULL,
[ConditionMBD027]      int  NOT NULL,
[ConditionMBD028]      int  NOT NULL,
[ConditionMBD029]      int  NOT NULL,
[ConditionMBD030]      int  NOT NULL,
[ConditionMBD031]      int  NOT NULL,
[ConditionMBD032]      int  NOT NULL,
[ConditionMBD033]      int  NOT NULL,
[ConditionMBD034]      int  NOT NULL,
[ConditionMUS001]      int  NOT NULL,
[ConditionMUS002]      int  NOT NULL,
[ConditionMUS003]      int  NOT NULL,
[ConditionMUS004]      int  NOT NULL,
[ConditionMUS005]      int  NOT NULL,
[ConditionMUS006]      int  NOT NULL,
[ConditionMUS007]      int  NOT NULL,
[ConditionMUS008]      int  NOT NULL,
[ConditionMUS009]      int  NOT NULL,
[ConditionMUS010]      int  NOT NULL,
[ConditionMUS011]      int  NOT NULL,
[ConditionMUS012]      int  NOT NULL,
[ConditionMUS013]      int  NOT NULL,
[ConditionMUS014]      int  NOT NULL,
[ConditionMUS015]      int  NOT NULL,
[ConditionMUS016]      int  NOT NULL,
[ConditionMUS017]      int  NOT NULL,
[ConditionMUS018]      int  NOT NULL,
[ConditionMUS019]      int  NOT NULL,
[ConditionMUS020]      int  NOT NULL,
[ConditionMUS021]      int  NOT NULL,
[ConditionMUS022]      int  NOT NULL,
[ConditionMUS023]      int  NOT NULL,
[ConditionMUS024]      int  NOT NULL,
[ConditionMUS025]      int  NOT NULL,
[ConditionMUS026]      int  NOT NULL,
[ConditionMUS027]      int  NOT NULL,
[ConditionMUS028]      int  NOT NULL,
[ConditionMUS029]      int  NOT NULL,
[ConditionMUS030]      int  NOT NULL,
[ConditionMUS031]      int  NOT NULL,
[ConditionMUS032]      int  NOT NULL,
[ConditionMUS033]      int  NOT NULL,
[ConditionMUS034]      int  NOT NULL,
[ConditionMUS035]      int  NOT NULL,
[ConditionMUS036]      int  NOT NULL,
[ConditionMUS037]      int  NOT NULL,
[ConditionMUS038]      int  NOT NULL,
[ConditionNEO001]      int  NOT NULL,
[ConditionNEO002]      int  NOT NULL,
[ConditionNEO003]      int  NOT NULL,
[ConditionNEO004]      int  NOT NULL,
[ConditionNEO005]      int  NOT NULL,
[ConditionNEO006]      int  NOT NULL,
[ConditionNEO007]      int  NOT NULL,
[ConditionNEO008]      int  NOT NULL,
[ConditionNEO009]      int  NOT NULL,
[ConditionNEO010]      int  NOT NULL,
[ConditionNEO011]      int  NOT NULL,
[ConditionNEO012]      int  NOT NULL,
[ConditionNEO013]      int  NOT NULL,
[ConditionNEO014]      int  NOT NULL,
[ConditionNEO015]      int  NOT NULL,
[ConditionNEO016]      int  NOT NULL,
[ConditionNEO017]      int  NOT NULL,
[ConditionNEO018]      int  NOT NULL,
[ConditionNEO019]      int  NOT NULL,
[ConditionNEO020]      int  NOT NULL,
[ConditionNEO021]      int  NOT NULL,
[ConditionNEO022]      int  NOT NULL,
[ConditionNEO023]      int  NOT NULL,
[ConditionNEO024]      int  NOT NULL,
[ConditionNEO025]      int  NOT NULL,
[ConditionNEO026]      int  NOT NULL,
[ConditionNEO027]      int  NOT NULL,
[ConditionNEO028]      int  NOT NULL,
[ConditionNEO029]      int  NOT NULL,
[ConditionNEO030]      int  NOT NULL,
[ConditionNEO031]      int  NOT NULL,
[ConditionNEO032]      int  NOT NULL,
[ConditionNEO033]      int  NOT NULL,
[ConditionNEO034]      int  NOT NULL,
[ConditionNEO035]      int  NOT NULL,
[ConditionNEO036]      int  NOT NULL,
[ConditionNEO037]      int  NOT NULL,
[ConditionNEO038]      int  NOT NULL,
[ConditionNEO039]      int  NOT NULL,
[ConditionNEO040]      int  NOT NULL,
[ConditionNEO041]      int  NOT NULL,
[ConditionNEO042]      int  NOT NULL,
[ConditionNEO043]      int  NOT NULL,
[ConditionNEO044]      int  NOT NULL,
[ConditionNEO045]      int  NOT NULL,
[ConditionNEO046]      int  NOT NULL,
[ConditionNEO047]      int  NOT NULL,
[ConditionNEO048]      int  NOT NULL,
[ConditionNEO049]      int  NOT NULL,
[ConditionNEO050]      int  NOT NULL,
[ConditionNEO051]      int  NOT NULL,
[ConditionNEO052]      int  NOT NULL,
[ConditionNEO053]      int  NOT NULL,
[ConditionNEO054]      int  NOT NULL,
[ConditionNEO055]      int  NOT NULL,
[ConditionNEO056]      int  NOT NULL,
[ConditionNEO057]      int  NOT NULL,
[ConditionNEO058]      int  NOT NULL,
[ConditionNEO059]      int  NOT NULL,
[ConditionNEO060]      int  NOT NULL,
[ConditionNEO061]      int  NOT NULL,
[ConditionNEO062]      int  NOT NULL,
[ConditionNEO063]      int  NOT NULL,
[ConditionNEO064]      int  NOT NULL,
[ConditionNEO065]      int  NOT NULL,
[ConditionNEO066]      int  NOT NULL,
[ConditionNEO067]      int  NOT NULL,
[ConditionNEO068]      int  NOT NULL,
[ConditionNEO069]      int  NOT NULL,
[ConditionNEO070]      int  NOT NULL,
[ConditionNEO071]      int  NOT NULL,
[ConditionNEO072]      int  NOT NULL,
[ConditionNEO073]      int  NOT NULL,
[ConditionNEO074]      int  NOT NULL,
[ConditionNVS001]      int  NOT NULL,
[ConditionNVS002]      int  NOT NULL,
[ConditionNVS003]      int  NOT NULL,
[ConditionNVS004]      int  NOT NULL,
[ConditionNVS005]      int  NOT NULL,
[ConditionNVS006]      int  NOT NULL,
[ConditionNVS007]      int  NOT NULL,
[ConditionNVS008]      int  NOT NULL,
[ConditionNVS009]      int  NOT NULL,
[ConditionNVS010]      int  NOT NULL,
[ConditionNVS011]      int  NOT NULL,
[ConditionNVS012]      int  NOT NULL,
[ConditionNVS013]      int  NOT NULL,
[ConditionNVS014]      int  NOT NULL,
[ConditionNVS015]      int  NOT NULL,
[ConditionNVS016]      int  NOT NULL,
[ConditionNVS017]      int  NOT NULL,
[ConditionNVS018]      int  NOT NULL,
[ConditionNVS019]      int  NOT NULL,
[ConditionNVS020]      int  NOT NULL,
[ConditionNVS021]      int  NOT NULL,
[ConditionNVS022]      int  NOT NULL,
[ConditionPNL001]      int  NOT NULL,
[ConditionPNL002]      int  NOT NULL,
[ConditionPNL003]      int  NOT NULL,
[ConditionPNL004]      int  NOT NULL,
[ConditionPNL005]      int  NOT NULL,
[ConditionPNL006]      int  NOT NULL,
[ConditionPNL007]      int  NOT NULL,
[ConditionPNL008]      int  NOT NULL,
[ConditionPNL009]      int  NOT NULL,
[ConditionPNL010]      int  NOT NULL,
[ConditionPNL011]      int  NOT NULL,
[ConditionPNL012]      int  NOT NULL,
[ConditionPNL013]      int  NOT NULL,
[ConditionPNL014]      int  NOT NULL,
[ConditionPNL015]      int  NOT NULL,
[ConditionPRG001]      int  NOT NULL,
[ConditionPRG002]      int  NOT NULL,
[ConditionPRG003]      int  NOT NULL,
[ConditionPRG004]      int  NOT NULL,
[ConditionPRG005]      int  NOT NULL,
[ConditionPRG006]      int  NOT NULL,
[ConditionPRG007]      int  NOT NULL,
[ConditionPRG008]      int  NOT NULL,
[ConditionPRG009]      int  NOT NULL,
[ConditionPRG010]      int  NOT NULL,
[ConditionPRG011]      int  NOT NULL,
[ConditionPRG012]      int  NOT NULL,
[ConditionPRG013]      int  NOT NULL,
[ConditionPRG014]      int  NOT NULL,
[ConditionPRG015]      int  NOT NULL,
[ConditionPRG016]      int  NOT NULL,
[ConditionPRG017]      int  NOT NULL,
[ConditionPRG018]      int  NOT NULL,
[ConditionPRG019]      int  NOT NULL,
[ConditionPRG020]      int  NOT NULL,
[ConditionPRG021]      int  NOT NULL,
[ConditionPRG022]      int  NOT NULL,
[ConditionPRG023]      int  NOT NULL,
[ConditionPRG024]      int  NOT NULL,
[ConditionPRG025]      int  NOT NULL,
[ConditionPRG026]      int  NOT NULL,
[ConditionPRG027]      int  NOT NULL,
[ConditionPRG028]      int  NOT NULL,
[ConditionPRG029]      int  NOT NULL,
[ConditionPRG030]      int  NOT NULL,
[ConditionRSP001]      int  NOT NULL,
[ConditionRSP002]      int  NOT NULL,
[ConditionRSP003]      int  NOT NULL,
[ConditionRSP004]      int  NOT NULL,
[ConditionRSP005]      int  NOT NULL,
[ConditionRSP006]      int  NOT NULL,
[ConditionRSP007]      int  NOT NULL,
[ConditionRSP008]      int  NOT NULL,
[ConditionRSP009]      int  NOT NULL,
[ConditionRSP010]      int  NOT NULL,
[ConditionRSP011]      int  NOT NULL,
[ConditionRSP012]      int  NOT NULL,
[ConditionRSP013]      int  NOT NULL,
[ConditionRSP014]      int  NOT NULL,
[ConditionRSP015]      int  NOT NULL,
[ConditionRSP016]      int  NOT NULL,
[ConditionRSP017]      int  NOT NULL,
[ConditionSKN001]      int  NOT NULL,
[ConditionSKN002]      int  NOT NULL,
[ConditionSKN003]      int  NOT NULL,
[ConditionSKN004]      int  NOT NULL,
[ConditionSKN005]      int  NOT NULL,
[ConditionSKN006]      int  NOT NULL,
[ConditionSKN007]      int  NOT NULL,
[ConditionSYM001]      int  NOT NULL,
[ConditionSYM002]      int  NOT NULL,
[ConditionSYM003]      int  NOT NULL,
[ConditionSYM004]      int  NOT NULL,
[ConditionSYM005]      int  NOT NULL,
[ConditionSYM006]      int  NOT NULL,
[ConditionSYM007]      int  NOT NULL,
[ConditionSYM008]      int  NOT NULL,
[ConditionSYM009]      int  NOT NULL,
[ConditionSYM010]      int  NOT NULL,
[ConditionSYM011]      int  NOT NULL,
[ConditionSYM012]      int  NOT NULL,
[ConditionSYM013]      int  NOT NULL,
[ConditionSYM014]      int  NOT NULL,
[ConditionSYM015]      int  NOT NULL,
[ConditionSYM016]      int  NOT NULL,
[ConditionSYM017]      int  NOT NULL
);




--claims, two fields may be null

drop table if exists OUTPUT_STD.UDS_PMPM_Claims_Data_INTERNAL

create table OUTPUT_STD.UDS_PMPM_Claims_Data_INTERNAL
(chp_carrier_id	varchar(10)	NOT NULL,
pdr_product_id	varchar(10)	NOT NULL,
uds_network_identifier	varchar(255)	NOT NULL,
service_period	varchar(20)	NOT NULL,
zip3	varchar(3)	NOT NULL,
uds_prod_ind	varchar(10)	NOT NULL,
member_gender	varchar(1)	NOT NULL,
age_bracket	varchar(10)	NOT NULL,
duration_bracket	varchar(10)	NOT NULL,
paid_to_allowed_ratio_bracket_IC varchar(25) NOT NULL,
paid_to_allowed_ratio_bracket_ALL varchar(25) NOT NULL,
high_cost_claimant	varchar(1)	NOT NULL,
arrangement_group_size_indicator	varchar(2)	NOT NULL,       
benefit_payment_contract_status	varchar(10)	NOT NULL,
claim_type	varchar(1)	NOT NULL,
op_type_of_service	varchar(10)	NULL,
[COVID-Related Indicator] varchar(2)	NOT NULL,
admits	int	NULL,
actual_utilization	int	NOT NULL,
adjusted_admits	int	NULL,
adjusted_utilization	int	NOT NULL,
[Actual Eligible Billed $ - Annual]   decimal(20,2) NOT NULL,
[Actual Eligible Billed $ - Q1]   decimal(20,2) NOT NULL,
[Actual Eligible Billed $ - Q2]   decimal(20,2) NOT NULL,
[Actual Eligible Billed $ - Q3]   decimal(20,2) NOT NULL,
[Actual Eligible Billed $ - Q4]   decimal(20,2) NOT NULL,
[Actual Negotiated Savings $ - Annual]   decimal(20,2) NOT NULL,
[Actual Negotiated Savings $ - Q1]   decimal(20,2) NOT NULL,
[Actual Negotiated Savings $ - Q2]   decimal(20,2) NOT NULL,
[Actual Negotiated Savings $ - Q3]   decimal(20,2) NOT NULL,
[Actual Negotiated Savings $ - Q4]   decimal(20,2) NOT NULL,
[Actual Allowed $ - Annual]   decimal(20,2) NOT NULL,
[Actual Allowed $ - Q1]   decimal(20,2) NOT NULL,
[Actual Allowed $ - Q2]   decimal(20,2) NOT NULL,
[Actual Allowed $ - Q3]   decimal(20,2) NOT NULL,
[Actual Allowed $ - Q4]   decimal(20,2) NOT NULL,
[Actual Paid $ - Annual]   decimal(20,2) NOT NULL,
[Actual Paid $ - Q1]   decimal(20,2) NOT NULL,
[Actual Paid $ - Q2]   decimal(20,2) NOT NULL,
[Actual Paid $ - Q3]   decimal(20,2) NOT NULL,
[Actual Paid $ - Q4]   decimal(20,2) NOT NULL,
[Actual Reasonable and Customary Cutback $ - Annual]   decimal(20,2) NOT NULL,
[Actual Reasonable and Customary Cutback $ - Q1]   decimal(20,2) NOT NULL,
[Actual Reasonable and Customary Cutback $ - Q2]   decimal(20,2) NOT NULL,
[Actual Reasonable and Customary Cutback $ - Q3]   decimal(20,2) NOT NULL,
[Actual Reasonable and Customary Cutback $ - Q4]   decimal(20,2) NOT NULL,
[Adjusted Eligible Billed $ - Annual]   decimal(20,2) NOT NULL,
[Adjusted Eligible Billed $ - Q1]   decimal(20,2) NOT NULL,
[Adjusted Eligible Billed $ - Q2]   decimal(20,2) NOT NULL,
[Adjusted Eligible Billed $ - Q3]   decimal(20,2) NOT NULL,
[Adjusted Eligible Billed $ - Q4]   decimal(20,2) NOT NULL,
[Adjusted Negotiated Savings $ - Annual]   decimal(20,2) NOT NULL,
[Adjusted Negotiated Savings $ - Q1]   decimal(20,2) NOT NULL,
[Adjusted Negotiated Savings $ - Q2]   decimal(20,2) NOT NULL,
[Adjusted Negotiated Savings $ - Q3]   decimal(20,2) NOT NULL,
[Adjusted Negotiated Savings $ - Q4]   decimal(20,2) NOT NULL,
[Adjusted Allowed $ - Annual]   decimal(20,2) NOT NULL,
[Adjusted Allowed $ - Q1]   decimal(20,2) NOT NULL,
[Adjusted Allowed $ - Q2]   decimal(20,2) NOT NULL,
[Adjusted Allowed $ - Q3]   decimal(20,2) NOT NULL,
[Adjusted Allowed $ - Q4]   decimal(20,2) NOT NULL,
[Adjusted Paid $ - Annual]   decimal(20,2) NOT NULL,
[Adjusted Paid $ - Q1]   decimal(20,2) NOT NULL,
[Adjusted Paid $ - Q2]   decimal(20,2) NOT NULL,
[Adjusted Paid $ - Q3]   decimal(20,2) NOT NULL,
[Adjusted Paid $ - Q4]   decimal(20,2) NOT NULL,
[Adjusted Reasonable and Customary Cutback $ - Annual]   decimal(20,2) NOT NULL,
[Adjusted Reasonable and Customary Cutback $ - Q1]   decimal(20,2) NOT NULL,
[Adjusted Reasonable and Customary Cutback $ - Q2]   decimal(20,2) NOT NULL,
[Adjusted Reasonable and Customary Cutback $ - Q3]   decimal(20,2) NOT NULL,
[Adjusted Reasonable and Customary Cutback $ - Q4]   decimal(20,2) NOT NULL

);   




end/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/


GO
/****** Object:  StoredProcedure [dbo].[sp_UDS_3_build_output_table_membership_and_claims]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_UDS_3_build_output_table_membership_and_claims]
/*****************************************************************************
 Description: 
    Create Views Union All Plans' Membership Outputs
	And then Materialize the Membership View


 Parameters:

 Return:

 Notes:

 Change History:
	2017-05-15 SL - initial version
	2018-02-23 SL - revise for CY16
	2020-09-03 TK-  New paid_to_allowed_ratio_brackets added for CY19
 
*****************************************************************************/
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = NULL
	SET @Logging_Values = NULL
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/
begin


--materialize the membership data

truncate table OUTPUT_STD.UDS_PMPM_Membership_and_Risk_Data_INTERNAL;

insert into OUTPUT_STD.UDS_PMPM_Membership_and_Risk_Data_INTERNAL with (TABLOCK)
select
	a.chp_carrier_id,
	a.pdr_product_id,
	p.uds_network_identifier,
	cast(case when p.upload_number = 1 
				then '0101' + cast(right(p.data_year,2) + 0  as varchar (2))
				+'-'+'1231' + cast(right(p.data_year,2) + 0  as varchar (2))
				end as varchar (13)) as service_period,	
	a.zip3,
	p.uds_prod_ind,
	a.member_gender,
	a.age_bracket,
	a.duration_bracket,
	a.paid_to_allowed_ratio_bracket_ic,
	a.paid_to_allowed_ratio_bracket_all,
	a.high_cost_claimant,
	a.insurance_arrangement as arragement_group_size_indicator,
	a.covid_related_indicator,
	a.member_count,
	a.member_months_Annual,
	a.Member_Months_Q1,
	a.Member_Months_Q2,
	a.Member_Months_Q3,
	a.Member_Months_Q4,
	a.avg_risk_score_ccsr,
	a.avg_risk_score_age_gender,
	a.avg_risk_score,
	a.avg_risk_score_UDS_Prev,
   b.[ConditionXXXXXX],b.[Condition000000],b.[ConditionBLD001],b.[ConditionBLD002],b.[ConditionBLD003],b.[ConditionBLD004],b.[ConditionBLD005],b.[ConditionBLD006],b.[ConditionBLD007],b.[ConditionBLD008],b.[ConditionBLD009],b.[ConditionBLD010],b.[ConditionCIR001],b.[ConditionCIR002],b.[ConditionCIR003],b.[ConditionCIR004],b.[ConditionCIR005],b.[ConditionCIR006],b.[ConditionCIR007],b.[ConditionCIR008],b.[ConditionCIR009],b.[ConditionCIR010],b.[ConditionCIR011],b.[ConditionCIR012],b.[ConditionCIR013],b.[ConditionCIR014],b.[ConditionCIR015],b.[ConditionCIR016],b.[ConditionCIR017],b.[ConditionCIR018],b.[ConditionCIR019],b.[ConditionCIR020],b.[ConditionCIR021],b.[ConditionCIR022],b.[ConditionCIR023],b.[ConditionCIR024],b.[ConditionCIR025],b.[ConditionCIR026],b.[ConditionCIR027],b.[ConditionCIR028],b.[ConditionCIR029],b.[ConditionCIR030],b.[ConditionCIR031],b.[ConditionCIR032],b.[ConditionCIR033],b.[ConditionCIR034],b.[ConditionCIR035],b.[ConditionCIR036],b.[ConditionCIR037],b.[ConditionCIR038],b.[ConditionCIR039],b.[ConditionDIG001],b.[ConditionDIG002],b.[ConditionDIG003],b.[ConditionDIG004],b.[ConditionDIG005],b.[ConditionDIG006],b.[ConditionDIG007],b.[ConditionDIG008],b.[ConditionDIG009],b.[ConditionDIG010],b.[ConditionDIG011],b.[ConditionDIG012],b.[ConditionDIG013],b.[ConditionDIG014],b.[ConditionDIG015],b.[ConditionDIG016],b.[ConditionDIG017],b.[ConditionDIG018],b.[ConditionDIG019],b.[ConditionDIG020],b.[ConditionDIG021],b.[ConditionDIG022],b.[ConditionDIG023],b.[ConditionDIG024],b.[ConditionDIG025],b.[ConditionEAR001],b.[ConditionEAR002],b.[ConditionEAR003],b.[ConditionEAR004],b.[ConditionEAR005],b.[ConditionEAR006],b.[ConditionEND001],b.[ConditionEND002],b.[ConditionEND003],b.[ConditionEND004],b.[ConditionEND005],b.[ConditionEND006],b.[ConditionEND007],b.[ConditionEND008],b.[ConditionEND009],b.[ConditionEND010],b.[ConditionEND011],b.[ConditionEND012],b.[ConditionEND013],b.[ConditionEND014],b.[ConditionEND015],b.[ConditionEND016],b.[ConditionEND017],b.[ConditionEXT001],b.[ConditionEXT002],b.[ConditionEXT003],b.[ConditionEXT004],b.[ConditionEXT005],b.[ConditionEXT006],b.[ConditionEXT007],b.[ConditionEXT008],b.[ConditionEXT009],b.[ConditionEXT010],b.[ConditionEXT011],b.[ConditionEXT012],b.[ConditionEXT013],b.[ConditionEXT014],b.[ConditionEXT015],b.[ConditionEXT016],b.[ConditionEXT017],b.[ConditionEXT018],b.[ConditionEXT019],b.[ConditionEXT020],b.[ConditionEXT021],b.[ConditionEXT022],b.[ConditionEXT023],b.[ConditionEXT024],b.[ConditionEXT025],b.[ConditionEXT026],b.[ConditionEXT027],b.[ConditionEXT028],b.[ConditionEXT029],b.[ConditionEXT030],b.[ConditionEYE001],b.[ConditionEYE002],b.[ConditionEYE003],b.[ConditionEYE004],b.[ConditionEYE005],b.[ConditionEYE006],b.[ConditionEYE007],b.[ConditionEYE008],b.[ConditionEYE009],b.[ConditionEYE010],b.[ConditionEYE011],b.[ConditionEYE012],b.[ConditionFAC001],b.[ConditionFAC002],b.[ConditionFAC003],b.[ConditionFAC004],b.[ConditionFAC005],b.[ConditionFAC006],b.[ConditionFAC007],b.[ConditionFAC008],b.[ConditionFAC009],b.[ConditionFAC010],b.[ConditionFAC011],b.[ConditionFAC012],b.[ConditionFAC013],b.[ConditionFAC014],b.[ConditionFAC015],b.[ConditionFAC016],b.[ConditionFAC017],b.[ConditionFAC018],b.[ConditionFAC019],b.[ConditionFAC020],b.[ConditionFAC021],b.[ConditionFAC022],b.[ConditionFAC023],b.[ConditionFAC024],b.[ConditionFAC025],b.[ConditionGEN001],b.[ConditionGEN002],b.[ConditionGEN003],b.[ConditionGEN004],b.[ConditionGEN005],b.[ConditionGEN006],b.[ConditionGEN007],b.[ConditionGEN008],b.[ConditionGEN009],b.[ConditionGEN010],b.[ConditionGEN011],b.[ConditionGEN012],b.[ConditionGEN013],b.[ConditionGEN014],b.[ConditionGEN015],b.[ConditionGEN016],b.[ConditionGEN017],b.[ConditionGEN018],b.[ConditionGEN019],b.[ConditionGEN020],b.[ConditionGEN021],b.[ConditionGEN022],b.[ConditionGEN023],b.[ConditionGEN024],b.[ConditionGEN025],b.[ConditionGEN026],b.[ConditionINF001],b.[ConditionINF002],b.[ConditionINF003],b.[ConditionINF004],b.[ConditionINF005],b.[ConditionINF006],b.[ConditionINF007],b.[ConditionINF008],b.[ConditionINF009],b.[ConditionINF010],b.[ConditionINF011],b.[ConditionINJ001],b.[ConditionINJ002],b.[ConditionINJ003],b.[ConditionINJ004],b.[ConditionINJ005],b.[ConditionINJ006],b.[ConditionINJ007],b.[ConditionINJ008],b.[ConditionINJ009],b.[ConditionINJ010],b.[ConditionINJ011],b.[ConditionINJ012],b.[ConditionINJ013],b.[ConditionINJ014],b.[ConditionINJ015],b.[ConditionINJ016],b.[ConditionINJ017],b.[ConditionINJ018],b.[ConditionINJ019],b.[ConditionINJ020],b.[ConditionINJ021],b.[ConditionINJ022],b.[ConditionINJ023],b.[ConditionINJ024],b.[ConditionINJ025],b.[ConditionINJ026],b.[ConditionINJ027],b.[ConditionINJ028],b.[ConditionINJ029],b.[ConditionINJ030],b.[ConditionINJ031],b.[ConditionINJ032],b.[ConditionINJ033],b.[ConditionINJ034],b.[ConditionINJ035],b.[ConditionINJ036],b.[ConditionINJ037],b.[ConditionINJ038],b.[ConditionINJ039],b.[ConditionINJ040],b.[ConditionINJ041],b.[ConditionINJ042],b.[ConditionINJ043],b.[ConditionINJ044],b.[ConditionINJ045],b.[ConditionINJ046],b.[ConditionINJ047],b.[ConditionINJ048],b.[ConditionINJ049],b.[ConditionINJ050],b.[ConditionINJ051],b.[ConditionINJ052],b.[ConditionINJ053],b.[ConditionINJ054],b.[ConditionINJ055],b.[ConditionINJ056],b.[ConditionINJ057],b.[ConditionINJ058],b.[ConditionINJ059],b.[ConditionINJ060],b.[ConditionINJ061],b.[ConditionINJ062],b.[ConditionINJ063],b.[ConditionINJ064],b.[ConditionINJ065],b.[ConditionINJ066],b.[ConditionINJ067],b.[ConditionINJ068],b.[ConditionINJ069],b.[ConditionINJ070],b.[ConditionINJ071],b.[ConditionINJ072],b.[ConditionINJ073],b.[ConditionINJ074],b.[ConditionINJ075],b.[ConditionINJ076],b.[ConditionMAL001],b.[ConditionMAL002],b.[ConditionMAL003],b.[ConditionMAL004],b.[ConditionMAL005],b.[ConditionMAL006],b.[ConditionMAL007],b.[ConditionMAL008],b.[ConditionMAL009],b.[ConditionMAL010],b.[ConditionMBD001],b.[ConditionMBD002],b.[ConditionMBD003],b.[ConditionMBD004],b.[ConditionMBD005],b.[ConditionMBD006],b.[ConditionMBD007],b.[ConditionMBD008],b.[ConditionMBD009],b.[ConditionMBD010],b.[ConditionMBD011],b.[ConditionMBD012],b.[ConditionMBD013],b.[ConditionMBD014],b.[ConditionMBD017],b.[ConditionMBD018],b.[ConditionMBD019],b.[ConditionMBD020],b.[ConditionMBD021],b.[ConditionMBD022],b.[ConditionMBD023],b.[ConditionMBD024],b.[ConditionMBD025],b.[ConditionMBD026],b.[ConditionMBD027],b.[ConditionMBD028],b.[ConditionMBD029],b.[ConditionMBD030],b.[ConditionMBD031],b.[ConditionMBD032],b.[ConditionMBD033],b.[ConditionMBD034],b.[ConditionMUS001],b.[ConditionMUS002],b.[ConditionMUS003],b.[ConditionMUS004],b.[ConditionMUS005],b.[ConditionMUS006],b.[ConditionMUS007],b.[ConditionMUS008],b.[ConditionMUS009],b.[ConditionMUS010],b.[ConditionMUS011],b.[ConditionMUS012],b.[ConditionMUS013],b.[ConditionMUS014],b.[ConditionMUS015],b.[ConditionMUS016],b.[ConditionMUS017],b.[ConditionMUS018],b.[ConditionMUS019],b.[ConditionMUS020],b.[ConditionMUS021],b.[ConditionMUS022],b.[ConditionMUS023],b.[ConditionMUS024],b.[ConditionMUS025],b.[ConditionMUS026],b.[ConditionMUS027],b.[ConditionMUS028],b.[ConditionMUS029],b.[ConditionMUS030],b.[ConditionMUS031],b.[ConditionMUS032],b.[ConditionMUS033],b.[ConditionMUS034],b.[ConditionMUS035],b.[ConditionMUS036],b.[ConditionMUS037],b.[ConditionMUS038],b.[ConditionNEO001],b.[ConditionNEO002],b.[ConditionNEO003],b.[ConditionNEO004],b.[ConditionNEO005],b.[ConditionNEO006],b.[ConditionNEO007],b.[ConditionNEO008],b.[ConditionNEO009],b.[ConditionNEO010],b.[ConditionNEO011],b.[ConditionNEO012],b.[ConditionNEO013],b.[ConditionNEO014],b.[ConditionNEO015],b.[ConditionNEO016],b.[ConditionNEO017],b.[ConditionNEO018],b.[ConditionNEO019],b.[ConditionNEO020],b.[ConditionNEO021],b.[ConditionNEO022],b.[ConditionNEO023],b.[ConditionNEO024],b.[ConditionNEO025],b.[ConditionNEO026],b.[ConditionNEO027],b.[ConditionNEO028],b.[ConditionNEO029],b.[ConditionNEO030],b.[ConditionNEO031],b.[ConditionNEO032],b.[ConditionNEO033],b.[ConditionNEO034],b.[ConditionNEO035],b.[ConditionNEO036],b.[ConditionNEO037],b.[ConditionNEO038],b.[ConditionNEO039],b.[ConditionNEO040],b.[ConditionNEO041],b.[ConditionNEO042],b.[ConditionNEO043],b.[ConditionNEO044],b.[ConditionNEO045],b.[ConditionNEO046],b.[ConditionNEO047],b.[ConditionNEO048],b.[ConditionNEO049],b.[ConditionNEO050],b.[ConditionNEO051],b.[ConditionNEO052],b.[ConditionNEO053],b.[ConditionNEO054],b.[ConditionNEO055],b.[ConditionNEO056],b.[ConditionNEO057],b.[ConditionNEO058],b.[ConditionNEO059],b.[ConditionNEO060],b.[ConditionNEO061],b.[ConditionNEO062],b.[ConditionNEO063],b.[ConditionNEO064],b.[ConditionNEO065],b.[ConditionNEO066],b.[ConditionNEO067],b.[ConditionNEO068],b.[ConditionNEO069],b.[ConditionNEO070],b.[ConditionNEO071],b.[ConditionNEO072],b.[ConditionNEO073],b.[ConditionNEO074],b.[ConditionNVS001],b.[ConditionNVS002],b.[ConditionNVS003],b.[ConditionNVS004],b.[ConditionNVS005],b.[ConditionNVS006],b.[ConditionNVS007],b.[ConditionNVS008],b.[ConditionNVS009],b.[ConditionNVS010],b.[ConditionNVS011],b.[ConditionNVS012],b.[ConditionNVS013],b.[ConditionNVS014],b.[ConditionNVS015],b.[ConditionNVS016],b.[ConditionNVS017],b.[ConditionNVS018],b.[ConditionNVS019],b.[ConditionNVS020],b.[ConditionNVS021],b.[ConditionNVS022],b.[ConditionPNL001],b.[ConditionPNL002],b.[ConditionPNL003],b.[ConditionPNL004],b.[ConditionPNL005],b.[ConditionPNL006],b.[ConditionPNL007],b.[ConditionPNL008],b.[ConditionPNL009],b.[ConditionPNL010],b.[ConditionPNL011],b.[ConditionPNL012],b.[ConditionPNL013],b.[ConditionPNL014],b.[ConditionPNL015],b.[ConditionPRG001],b.[ConditionPRG002],b.[ConditionPRG003],b.[ConditionPRG004],b.[ConditionPRG005],b.[ConditionPRG006],b.[ConditionPRG007],b.[ConditionPRG008],b.[ConditionPRG009],b.[ConditionPRG010],b.[ConditionPRG011],b.[ConditionPRG012],b.[ConditionPRG013],b.[ConditionPRG014],b.[ConditionPRG015],b.[ConditionPRG016],b.[ConditionPRG017],b.[ConditionPRG018],b.[ConditionPRG019],b.[ConditionPRG020],b.[ConditionPRG021],b.[ConditionPRG022],b.[ConditionPRG023],b.[ConditionPRG024],b.[ConditionPRG025],b.[ConditionPRG026],b.[ConditionPRG027],b.[ConditionPRG028],b.[ConditionPRG029],b.[ConditionPRG030],b.[ConditionRSP001],b.[ConditionRSP002],b.[ConditionRSP003],b.[ConditionRSP004],b.[ConditionRSP005],b.[ConditionRSP006],b.[ConditionRSP007],b.[ConditionRSP008],b.[ConditionRSP009],b.[ConditionRSP010],b.[ConditionRSP011],b.[ConditionRSP012],b.[ConditionRSP013],b.[ConditionRSP014],b.[ConditionRSP015],b.[ConditionRSP016],b.[ConditionRSP017],b.[ConditionSKN001],b.[ConditionSKN002],b.[ConditionSKN003],b.[ConditionSKN004],b.[ConditionSKN005],b.[ConditionSKN006],b.[ConditionSKN007],b.[ConditionSYM001],b.[ConditionSYM002],b.[ConditionSYM003],b.[ConditionSYM004],b.[ConditionSYM005],b.[ConditionSYM006],b.[ConditionSYM007],b.[ConditionSYM008],b.[ConditionSYM009],b.[ConditionSYM010],b.[ConditionSYM011],b.[ConditionSYM012],b.[ConditionSYM013],b.[ConditionSYM014],b.[ConditionSYM015],b.[ConditionSYM016],b.[ConditionSYM017]

from all_plans.proc_membership_ccsr_conditions_30_aggregated_risk_score a
full join
all_plans.proc_membership_ccsr_conditions_40_transform_ccsr_conditions b
on b.chp_carrier_id = a.chp_carrier_id
and b.pdr_product_id = a.pdr_product_id
and b.zip3 = a.zip3
and b.member_gender = a.member_gender
and b.age_bracket = a.age_bracket
and b.duration_bracket = a.duration_bracket
and b.high_cost_claimant = a.high_cost_claimant
and b.insurance_arrangement = a.insurance_arrangement
and b.paid_to_allowed_ratio_bracket_all = a.paid_to_allowed_ratio_bracket_all
and b.paid_to_allowed_ratio_bracket_ic = a.paid_to_allowed_ratio_bracket_ic
left join
reference.ref_uds_network_identifier_prod_ind p
on p.uds_chp_carrier_id = a.chp_carrier_id
and p.uds_pdr_product_id = a.pdr_product_id
where p.include_in_uds_pmpm = 1;


Delete from OUTPUT_STD.UDS_PMPM_Membership_and_Risk_Data_INTERNAL where zip3 = '193' and pdr_product_id in ('PAB6', 'PAB1', 'PAL6', 'DEB1')


--materialize the claims data


truncate table OUTPUT_STD.UDS_PMPM_Claims_Data_INTERNAL;

insert into OUTPUT_STD.UDS_PMPM_Claims_Data_INTERNAL with (TABLOCK)

select
	c.chp_carrier_id,
	c.pdr_product_id,
	p.uds_network_identifier,
	cast(case when p.upload_number = 1 
				then '0101' + cast(right(p.data_year,2) + 0  as varchar (2))
				+'-'+'1231' + cast(right(p.data_year,2) + 0  as varchar (2))
				end as varchar (13)) as service_period,	
	c.zip3,
	p.uds_prod_ind,
	c.member_gender,
	c.age_bracket,
	c.duration_bracket,
	c.paid_to_allowed_ratio_bracket_ic,
	c.paid_to_allowed_ratio_bracket_all,
	c.high_cost_claimant,
	c.insurance_arrangement as arragement_group_size_indicator,
	c.benefit_payment_contract_status,
	c.claim_type,
	c.op_type_of_service,
	c.covid_related_indicator,
	c.admits,
	c.actual_utilization,
	c.adjusted_admits,
	c.adjusted_utilization,
	c.billed_amount,
	c.billed_amount_q1,
	c.billed_amount_q2,
	c.billed_amount_q3,
	c.billed_amount_q4,
	c.savings_amount,
	c.savings_amount_q1,
	c.savings_amount_q2,
	c.savings_amount_q3,
	c.savings_amount_q4,
	c.allowed_amount,
	c.allowed_amount_q1,
	c.allowed_amount_q2,
	c.allowed_amount_q3,
	c.allowed_amount_q4,
	c.paid_amount,
	c.paid_amount_q1,
	c.paid_amount_q2,
	c.paid_amount_q3,
	c.paid_amount_q4,
	c.RnC_cutback_amount,
	c.RnC_cutback_amount_q1,
	c.RnC_cutback_amountt_q2,
	c.RnC_cutback_amount_q3,
	c.RnC_cutback_amount_q4,
	c.adjusted_billed_amount,
	c.adjusted_billed_amount_q1,
	c.adjusted_billed_amount_q2,
	c.adjusted_billed_amount_q3,
	c.adjusted_billed_amount_q4,
	c.adjusted_savings_amount,
	c.adjusted_savings_amount_q1,
	c.adjusted_savings_amount_q2,
	c.adjusted_savings_amount_q3,
	c.adjusted_savings_amount_q4,
	c.adjusted_allowed_amount,
	c.adjusted_allowed_amount_Q1,
	c.adjusted_allowed_amount_Q2,
	c.adjusted_allowed_amount_Q3,
	c.adjusted_allowed_amount_Q4,
	c.adjusted_paid_amount,
	c.adjusted_paid_amount_q1,
	c.adjusted_paid_amount_q2,
	c.adjusted_paid_amount_q3,
	c.adjusted_paid_amount_q4,
	c.adjusted_RnC_cutback_amount,
	c.adjusted_RnC_cutback_amount_q1,
	c.adjusted_RnC_cutback_amount_q2,
	c.adjusted_RnC_cutback_amount_q3,
	c.adjusted_RnC_cutback_amount_q4
from all_plans.proc_claims_financial_30_group_by c
left join
reference.ref_uds_network_identifier_prod_ind p
on p.uds_chp_carrier_id = c.chp_carrier_id
and p.uds_pdr_product_id = c.pdr_product_id
where p.include_in_uds_pmpm = 1


Delete from OUTPUT_STD.UDS_PMPM_Claims_Data_INTERNAL where zip3 = '193' and pdr_product_id in ('PAB6', 'PAB1', 'PAL6', 'DEB1')



--create unique index

--membership
IF EXISTS (SELECT name FROM sys.indexes
            WHERE name = N'IX_text_membership' and OBJECT_SCHEMA_NAME(object_id) = 'OUTPUT_STD' and OBJECT_NAME(object_id) = 'UDS_PMPM_Membership_and_Risk_Data_INTERNAL') 
    DROP INDEX IX_text_membership ON OUTPUT_STD.UDS_PMPM_Membership_and_Risk_Data_INTERNAL; 

-- Create a clustered index 
CREATE UNIQUE CLUSTERED INDEX IX_text_membership 
    ON OUTPUT_STD.UDS_PMPM_Membership_and_Risk_Data_INTERNAL (uds_network_identifier, uds_prod_ind, zip3, member_gender, age_bracket, duration_bracket, [COVID-Related Indicator],paid_to_allowed_ratio_bracket_ic,paid_to_allowed_ratio_bracket_all, high_cost_claimant, arrangement_group_size_indicator);


--claims
IF EXISTS (SELECT name FROM sys.indexes
            WHERE name = N'IX_text_claims' and OBJECT_SCHEMA_NAME(object_id) = 'OUTPUT_STD' and OBJECT_NAME(object_id) = 'UDS_PMPM_Claims_Data_INTERNAL') 
    DROP INDEX IX_text_claims ON OUTPUT_STD.UDS_PMPM_Claims_Data_INTERNAL; 

-- Create a clustered index 
CREATE UNIQUE CLUSTERED INDEX IX_text_claims 
    ON OUTPUT_STD.UDS_PMPM_Claims_Data_INTERNAL (uds_network_identifier, uds_prod_ind, zip3, member_gender, age_bracket, duration_bracket,[COVID-Related Indicator], paid_to_allowed_ratio_bracket_ic,paid_to_allowed_ratio_bracket_all ,high_cost_claimant, arrangement_group_size_indicator, benefit_payment_contract_status, claim_type, op_type_of_service);




end/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/

GO
/****** Object:  StoredProcedure [dbo].[sp_UDS_4_build_standard_output_tables]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_UDS_4_build_standard_output_tables]
/*****************************************************************************
 Description: 
    Create Views for Text Files sent to Millman and Consulting Firms


 Parameters:

 Return:

 Notes:

 Change History:
	2015-11-19 SL - initial version
	2016-09-12 SL - add CHP Carrier ID and PDR Product ID
	2018-02-23 SL - materialize the tables and rename the tables, revised a few field names
	2018-10-10 SL - add the compound CCS in the membership, add the adjusted RnC in claims
	2020-08-12 TK- 
 
*****************************************************************************/
										@p_replace_existing varchar(5) = 'Y'
as
/*Begin parameter logging*/
	DECLARE @Logging_Parameters NVARCHAR(MAX)
	DECLARE @Logging_Values NVARCHAR(MAX)
	DECLARE @Logging_DatabaseName SYSNAME
	DECLARE @Logging_ProcedureSchema SYSNAME
	DECLARE @Logging_ProcedureName SYSNAME
	DECLARE @Logging_ProcedureDefinition NVARCHAR(MAX)
	DECLARE @CallId INT
	SELECT
		@Logging_DatabaseName = SPECIFIC_CATALOG,
		@Logging_ProcedureSchema = SPECIFIC_SCHEMA,
		@Logging_ProcedureName = SPECIFIC_NAME,
		@Logging_ProcedureDefinition = definition
	FROM INFORMATION_SCHEMA.ROUTINES r
	JOIN sys.sql_modules m
	ON m.object_id = OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME)
	WHERE OBJECT_ID(ROUTINE_SCHEMA + '.' + ROUTINE_NAME) = @@PROCID
	SET @Logging_Parameters = NULL
	SET @Logging_Values = NULL
		EXEC Log.SpLogParameters @DatabaseName = @Logging_DatabaseName, @ProcedureName = @Logging_ProcedureName, @ProcedureDefinition = @Logging_ProcedureDefinition, @ProcedureSchema = @Logging_ProcedureSchema, @LoggingParameters = @Logging_Parameters, @LoggingValues = @Logging_Values, @Callid = @Callid OUTPUT
/*Endof parameter logging*/
begin





--Membership
--create table for Final Text Dump 



drop table if exists OUTPUT_STD.[UDS PMPM - Membership and Risk Data]

select
	chp_carrier_id as [CHP Carrier ID],
	pdr_product_id as [PDR Product ID],
	cast('Blue Cross Blue Shield' as varchar(25)) as [Organization Name],
	uds_network_identifier as [Network Identifier],
	service_period as [Service Period],
	zip3 as [3 Digit Member Zip Code],
	uds_prod_ind as [Product Indicator],
	member_gender as [Gender],
	age_bracket as [Age Bracket],
	duration_bracket as [Duration Bracket],
	paid_to_allowed_ratio_bracket_ic as [Plan Benefit Value - IC],
	paid_to_allowed_ratio_bracket_all as [Plan Benefit Value - ALL],
	high_cost_claimant as [High Cost Claimant],
	arrangement_group_size_indicator as [Arrangement/Group Size Indicator],
	[COVID-Related Indicator],
	NULL as [Custom Study Group 1],
	NULL as [Custom Study Group 2],
	NULL as [Custom Study Group 3],
	member_count as [Member Count],
	[Member Months - Annual],
    [Member Months - Q1],
    [Member Months - Q2],
    [Member Months - Q3],
    [Member Months - Q4], 
	avg_risk_score as [Average Risk Score],
	[ConditionXXXXXX],	[Condition000000],	[ConditionBLD001],	[ConditionBLD002],	[ConditionBLD003],	[ConditionBLD004],	[ConditionBLD005],	[ConditionBLD006],	[ConditionBLD007],	[ConditionBLD008],	[ConditionBLD009],	[ConditionBLD010],	[ConditionCIR001],	[ConditionCIR002],	[ConditionCIR003],	[ConditionCIR004],	[ConditionCIR005],	[ConditionCIR006],	[ConditionCIR007],	[ConditionCIR008],	[ConditionCIR009],	[ConditionCIR010],	[ConditionCIR011],	[ConditionCIR012],	[ConditionCIR013],	[ConditionCIR014],	[ConditionCIR015],	[ConditionCIR016],	[ConditionCIR017],	[ConditionCIR018],	[ConditionCIR019],	[ConditionCIR020],	[ConditionCIR021],	[ConditionCIR022],	[ConditionCIR023],	[ConditionCIR024],	[ConditionCIR025],	[ConditionCIR026],	[ConditionCIR027],	[ConditionCIR028],	[ConditionCIR029],	[ConditionCIR030],	[ConditionCIR031],	[ConditionCIR032],	[ConditionCIR033],	[ConditionCIR034],	[ConditionCIR035],	[ConditionCIR036],	[ConditionCIR037],	[ConditionCIR038],	[ConditionCIR039],	[ConditionDIG001],	[ConditionDIG002],	[ConditionDIG003],	[ConditionDIG004],	[ConditionDIG005],	[ConditionDIG006],	[ConditionDIG007],	[ConditionDIG008],	[ConditionDIG009],	[ConditionDIG010],	[ConditionDIG011],	[ConditionDIG012],	[ConditionDIG013],	[ConditionDIG014],	[ConditionDIG015],	[ConditionDIG016],	[ConditionDIG017],	[ConditionDIG018],	[ConditionDIG019],	[ConditionDIG020],	[ConditionDIG021],	[ConditionDIG022],	[ConditionDIG023],	[ConditionDIG024],	[ConditionDIG025],	[ConditionEAR001],	[ConditionEAR002],	[ConditionEAR003],	[ConditionEAR004],	[ConditionEAR005],	[ConditionEAR006],	[ConditionEND001],	[ConditionEND002],	[ConditionEND003],	[ConditionEND004],	[ConditionEND005],	[ConditionEND006],	[ConditionEND007],	[ConditionEND008],	[ConditionEND009],	[ConditionEND010],	[ConditionEND011],	[ConditionEND012],	[ConditionEND013],	[ConditionEND014],	[ConditionEND015],	[ConditionEND016],	[ConditionEND017],	[ConditionEXT001],	[ConditionEXT002],	[ConditionEXT003],	[ConditionEXT004],	[ConditionEXT005],	[ConditionEXT006],	[ConditionEXT007],	[ConditionEXT008],	[ConditionEXT009],	[ConditionEXT010],	[ConditionEXT011],	[ConditionEXT012],	[ConditionEXT013],	[ConditionEXT014],	[ConditionEXT015],	[ConditionEXT016],	[ConditionEXT017],	[ConditionEXT018],	[ConditionEXT019],	[ConditionEXT020],	[ConditionEXT021],	[ConditionEXT022],	[ConditionEXT023],	[ConditionEXT024],	[ConditionEXT025],	[ConditionEXT026],	[ConditionEXT027],	[ConditionEXT028],	[ConditionEXT029],	[ConditionEXT030],	[ConditionEYE001],	[ConditionEYE002],	[ConditionEYE003],	[ConditionEYE004],	[ConditionEYE005],	[ConditionEYE006],	[ConditionEYE007],	[ConditionEYE008],	[ConditionEYE009],	[ConditionEYE010],	[ConditionEYE011],	[ConditionEYE012],	[ConditionFAC001],	[ConditionFAC002],	[ConditionFAC003],	[ConditionFAC004],	[ConditionFAC005],	[ConditionFAC006],	[ConditionFAC007],	[ConditionFAC008],	[ConditionFAC009],	[ConditionFAC010],	[ConditionFAC011],	[ConditionFAC012],	[ConditionFAC013],	[ConditionFAC014],	[ConditionFAC015],	[ConditionFAC016],	[ConditionFAC017],	[ConditionFAC018],	[ConditionFAC019],	[ConditionFAC020],	[ConditionFAC021],	[ConditionFAC022],	[ConditionFAC023],	[ConditionFAC024],	[ConditionFAC025],	[ConditionGEN001],	[ConditionGEN002],	[ConditionGEN003],	[ConditionGEN004],	[ConditionGEN005],	[ConditionGEN006],	[ConditionGEN007],	[ConditionGEN008],	[ConditionGEN009],	[ConditionGEN010],	[ConditionGEN011],	[ConditionGEN012],	[ConditionGEN013],	[ConditionGEN014],	[ConditionGEN015],	[ConditionGEN016],	[ConditionGEN017],	[ConditionGEN018],	[ConditionGEN019],	[ConditionGEN020],	[ConditionGEN021],	[ConditionGEN022],	[ConditionGEN023],	[ConditionGEN024],	[ConditionGEN025],	[ConditionGEN026],	[ConditionINF001],	[ConditionINF002],	[ConditionINF003],	[ConditionINF004],	[ConditionINF005],	[ConditionINF006],	[ConditionINF007],	[ConditionINF008],	[ConditionINF009],	[ConditionINF010],	[ConditionINF011],	[ConditionINJ001],	[ConditionINJ002],	[ConditionINJ003],	[ConditionINJ004],	[ConditionINJ005],	[ConditionINJ006],	[ConditionINJ007],	[ConditionINJ008],	[ConditionINJ009],	[ConditionINJ010],	[ConditionINJ011],	[ConditionINJ012],	[ConditionINJ013],	[ConditionINJ014],	[ConditionINJ015],	[ConditionINJ016],	[ConditionINJ017],	[ConditionINJ018],	[ConditionINJ019],	[ConditionINJ020],	[ConditionINJ021],	[ConditionINJ022],	[ConditionINJ023],	[ConditionINJ024],	[ConditionINJ025],	[ConditionINJ026],	[ConditionINJ027],	[ConditionINJ028],	[ConditionINJ029],	[ConditionINJ030],	[ConditionINJ031],	[ConditionINJ032],	[ConditionINJ033],	[ConditionINJ034],	[ConditionINJ035],	[ConditionINJ036],	[ConditionINJ037],	[ConditionINJ038],	[ConditionINJ039],	[ConditionINJ040],	[ConditionINJ041],	[ConditionINJ042],	[ConditionINJ043],	[ConditionINJ044],	[ConditionINJ045],	[ConditionINJ046],	[ConditionINJ047],	[ConditionINJ048],	[ConditionINJ049],	[ConditionINJ050],	[ConditionINJ051],	[ConditionINJ052],	[ConditionINJ053],	[ConditionINJ054],	[ConditionINJ055],	[ConditionINJ056],	[ConditionINJ057],	[ConditionINJ058],	[ConditionINJ059],	[ConditionINJ060],	[ConditionINJ061],	[ConditionINJ062],	[ConditionINJ063],	[ConditionINJ064],	[ConditionINJ065],	[ConditionINJ066],	[ConditionINJ067],	[ConditionINJ068],	[ConditionINJ069],	[ConditionINJ070],	[ConditionINJ071],	[ConditionINJ072],	[ConditionINJ073],	[ConditionINJ074],	[ConditionINJ075],	[ConditionINJ076],	[ConditionMAL001],	[ConditionMAL002],	[ConditionMAL003],	[ConditionMAL004],	[ConditionMAL005],	[ConditionMAL006],	[ConditionMAL007],	[ConditionMAL008],	[ConditionMAL009],	[ConditionMAL010],	[ConditionMBD001],	[ConditionMBD002],	[ConditionMBD003],	[ConditionMBD004],	[ConditionMBD005],	[ConditionMBD006],	[ConditionMBD007],	[ConditionMBD008],	[ConditionMBD009],	[ConditionMBD010],	[ConditionMBD011],	[ConditionMBD012],	[ConditionMBD013],	[ConditionMBD014],	[ConditionMBD017],	[ConditionMBD018],	[ConditionMBD019],	[ConditionMBD020],	[ConditionMBD021],	[ConditionMBD022],	[ConditionMBD023],	[ConditionMBD024],	[ConditionMBD025],	[ConditionMBD026],	[ConditionMBD027],	[ConditionMBD028],	[ConditionMBD029],	[ConditionMBD030],	[ConditionMBD031],	[ConditionMBD032],	[ConditionMBD033],	[ConditionMBD034],	[ConditionMUS001],	[ConditionMUS002],	[ConditionMUS003],	[ConditionMUS004],	[ConditionMUS005],	[ConditionMUS006],	[ConditionMUS007],	[ConditionMUS008],	[ConditionMUS009],	[ConditionMUS010],	[ConditionMUS011],	[ConditionMUS012],	[ConditionMUS013],	[ConditionMUS014],	[ConditionMUS015],	[ConditionMUS016],	[ConditionMUS017],	[ConditionMUS018],	[ConditionMUS019],	[ConditionMUS020],	[ConditionMUS021],	[ConditionMUS022],	[ConditionMUS023],	[ConditionMUS024],	[ConditionMUS025],	[ConditionMUS026],	[ConditionMUS027],	[ConditionMUS028],	[ConditionMUS029],	[ConditionMUS030],	[ConditionMUS031],	[ConditionMUS032],	[ConditionMUS033],	[ConditionMUS034],	[ConditionMUS035],	[ConditionMUS036],	[ConditionMUS037],	[ConditionMUS038],	[ConditionNEO001],	[ConditionNEO002],	[ConditionNEO003],	[ConditionNEO004],	[ConditionNEO005],	[ConditionNEO006],	[ConditionNEO007],	[ConditionNEO008],	[ConditionNEO009],	[ConditionNEO010],	[ConditionNEO011],	[ConditionNEO012],	[ConditionNEO013],	[ConditionNEO014],	[ConditionNEO015],	[ConditionNEO016],	[ConditionNEO017],	[ConditionNEO018],	[ConditionNEO019],	[ConditionNEO020],	[ConditionNEO021],	[ConditionNEO022],	[ConditionNEO023],	[ConditionNEO024],	[ConditionNEO025],	[ConditionNEO026],	[ConditionNEO027],	[ConditionNEO028],	[ConditionNEO029],	[ConditionNEO030],	[ConditionNEO031],	[ConditionNEO032],	[ConditionNEO033],	[ConditionNEO034],	[ConditionNEO035],	[ConditionNEO036],	[ConditionNEO037],	[ConditionNEO038],	[ConditionNEO039],	[ConditionNEO040],	[ConditionNEO041],	[ConditionNEO042],	[ConditionNEO043],	[ConditionNEO044],	[ConditionNEO045],	[ConditionNEO046],	[ConditionNEO047],	[ConditionNEO048],	[ConditionNEO049],	[ConditionNEO050],	[ConditionNEO051],	[ConditionNEO052],	[ConditionNEO053],	[ConditionNEO054],	[ConditionNEO055],	[ConditionNEO056],	[ConditionNEO057],	[ConditionNEO058],	[ConditionNEO059],	[ConditionNEO060],	[ConditionNEO061],	[ConditionNEO062],	[ConditionNEO063],	[ConditionNEO064],	[ConditionNEO065],	[ConditionNEO066],	[ConditionNEO067],	[ConditionNEO068],	[ConditionNEO069],	[ConditionNEO070],	[ConditionNEO071],	[ConditionNEO072],	[ConditionNEO073],	[ConditionNEO074],	[ConditionNVS001],	[ConditionNVS002],	[ConditionNVS003],	[ConditionNVS004],	[ConditionNVS005],	[ConditionNVS006],	[ConditionNVS007],	[ConditionNVS008],	[ConditionNVS009],	[ConditionNVS010],	[ConditionNVS011],	[ConditionNVS012],	[ConditionNVS013],	[ConditionNVS014],	[ConditionNVS015],	[ConditionNVS016],	[ConditionNVS017],	[ConditionNVS018],	[ConditionNVS019],	[ConditionNVS020],	[ConditionNVS021],	[ConditionNVS022],	[ConditionPNL001],	[ConditionPNL002],	[ConditionPNL003],	[ConditionPNL004],	[ConditionPNL005],	[ConditionPNL006],	[ConditionPNL007],	[ConditionPNL008],	[ConditionPNL009],	[ConditionPNL010],	[ConditionPNL011],	[ConditionPNL012],	[ConditionPNL013],	[ConditionPNL014],	[ConditionPNL015],	[ConditionPRG001],	[ConditionPRG002],	[ConditionPRG003],	[ConditionPRG004],	[ConditionPRG005],	[ConditionPRG006],	[ConditionPRG007],	[ConditionPRG008],	[ConditionPRG009],	[ConditionPRG010],	[ConditionPRG011],	[ConditionPRG012],	[ConditionPRG013],	[ConditionPRG014],	[ConditionPRG015],	[ConditionPRG016],	[ConditionPRG017],	[ConditionPRG018],	[ConditionPRG019],	[ConditionPRG020],	[ConditionPRG021],	[ConditionPRG022],	[ConditionPRG023],	[ConditionPRG024],	[ConditionPRG025],	[ConditionPRG026],	[ConditionPRG027],	[ConditionPRG028],	[ConditionPRG029],	[ConditionPRG030],	[ConditionRSP001],	[ConditionRSP002],	[ConditionRSP003],	[ConditionRSP004],	[ConditionRSP005],	[ConditionRSP006],	[ConditionRSP007],	[ConditionRSP008],	[ConditionRSP009],	[ConditionRSP010],	[ConditionRSP011],	[ConditionRSP012],	[ConditionRSP013],	[ConditionRSP014],	[ConditionRSP015],	[ConditionRSP016],	[ConditionRSP017],	[ConditionSKN001],	[ConditionSKN002],	[ConditionSKN003],	[ConditionSKN004],	[ConditionSKN005],	[ConditionSKN006],	[ConditionSKN007],	[ConditionSYM001],	[ConditionSYM002],	[ConditionSYM003],	[ConditionSYM004],	[ConditionSYM005],	[ConditionSYM006],	[ConditionSYM007],	[ConditionSYM008],	[ConditionSYM009],	[ConditionSYM010],	[ConditionSYM011],	[ConditionSYM012],	[ConditionSYM013],	[ConditionSYM014],	[ConditionSYM015],	[ConditionSYM016],	[ConditionSYM017]   
into OUTPUT_STD.[UDS PMPM - Membership and Risk Data]
from OUTPUT_STD.UDS_PMPM_Membership_and_Risk_Data_INTERNAL
where chp_carrier_id <> 9999  --added on 11/25/2019. Looked at CY17 submission and no gap data included but rather as a separate file which was not submitted

Delete from OUTPUT_STD.[UDS PMPM - Membership and Risk Data] where [3 Digit Member Zip Code] = '193' and [PDR Product ID] in ('PAB6', 'PAB1', 'PAL6', 'DEB1')

--create unique index

--membership
IF EXISTS (SELECT name FROM sys.indexes
            WHERE name = N'IX_text_membership' and OBJECT_SCHEMA_NAME(object_id) = 'OUTPUT_STD' and OBJECT_NAME(object_id) = 'UDS PMPM - Membership and Risk Data') 
    DROP INDEX IX_text_membership ON OUTPUT_STD.[UDS PMPM - Membership and Risk Data]; 

-- Create a clustered index 
CREATE UNIQUE CLUSTERED INDEX IX_text_membership 
    ON OUTPUT_STD.[UDS PMPM - Membership and Risk Data] ([Network Identifier], [Product Indicator], [3 Digit Member Zip Code],[COVID-Related Indicator], [Gender], [Age Bracket], [Duration Bracket], [Plan Benefit Value - IC] ,[Plan Benefit Value - ALL], [High Cost Claimant], [Arrangement/Group Size Indicator]);


--claims
--create table for Final Text Dump 



drop table if exists OUTPUT_STD.[UDS PMPM - Claims Data]

select
	chp_carrier_id as [CHP Carrier ID],
	pdr_product_id as [PDR Product ID],
	cast('Blue Cross Blue Shield' as varchar(25)) as [Organization Name],
	uds_network_identifier as [Network Identifier],
	service_period as [Service Period],
	zip3 as [3 Digit Member ZIP Code],
	uds_prod_ind as [Product Indicator],
	member_gender as [Gender],
	age_bracket as [Age Bracket],
	duration_bracket as [Duration Bracket],
	paid_to_allowed_ratio_bracket_ic as [Plan Benefit Value - IC],
	paid_to_allowed_ratio_bracket_all as [Plan Benefit Value - ALL],
	high_cost_claimant as [High Cost Claimant],
	arrangement_group_size_indicator as [Arrangement/Group Size Indicator],
	benefit_payment_contract_status as [Benefit/Contract Status Indicator],
	claim_type as [Claim Type],
	op_type_of_service as [Outpatient Type of Service],
	[COVID-Related Indicator],
	NULL as [Custom Study Group 1],
	NULL as [Custom Study Group 2],
	NULL as [Custom Study Group 3],
	'AC' as [Actual Data Filler],
	round(admits,0) as [Actual Number of Admissions],
	round(actual_utilization,0) as [Actual Count of Utilization],
	cast([Actual Eligible Billed $ - Annual] as money) as [Actual Eligible Billed $ - Annual],
	cast([Actual Eligible Billed $ - Q1] as money) as [Actual Eligible Billed $ - Q1],
	cast([Actual Eligible Billed $ - Q2] as money) as [Actual Eligible Billed $ - Q2],
    cast([Actual Eligible Billed $ - Q3] as money) as [Actual Eligible Billed $ - Q3],
    cast([Actual Eligible Billed $ - Q4] as money) as [Actual Eligible Billed $ - Q4],
	cast([Actual Negotiated Savings $ - Annual] as money) as [Actual Negotiated Savings $ - Annual],
	cast([Actual Negotiated Savings $ - Q1] as money) as [Actual Negotiated Savings $ - Q1],
	cast([Actual Negotiated Savings $ - Q2] as money) as [Actual Negotiated Savings $ - Q2],
	cast([Actual Negotiated Savings $ - Q3] as money) as [Actual Negotiated Savings $ - Q3],
	cast([Actual Negotiated Savings $ - Q4] as money) as [Actual Negotiated Savings $ - Q4],
	cast([Actual Allowed $ - Annual] as money) as [Actual Allowed $ - Annual],
	cast([Actual Allowed $ - Q1] as money) as [Actual Allowed $ - Q1],
    cast([Actual Allowed $ - Q2] as money) as [Actual Allowed $ - Q2],
    cast([Actual Allowed $ - Q3] as money) as [Actual Allowed $ - Q3],
	cast([Actual Allowed $ - Q4] as money) as [Actual Allowed $ - Q4],
	cast([Actual Paid $ - Annual] as money) as [Actual Paid $ - Annual],
	cast([Actual Paid $ - Q1] as money) as [Actual Paid $ - Q1],
	cast([Actual Paid $ - Q2] as money) as [Actual Paid $ - Q2],
	cast([Actual Paid $ - Q3] as money) as [Actual Paid $ - Q3],
	cast([Actual Paid $ - Q4] as money) as [Actual Paid $ - Q4],
	cast([Actual Reasonable and Customary Cutback $ - Annual] as money) as [Actual Reasonable and Customary Cutback $ - Annual],
	cast([Actual Reasonable and Customary Cutback $ - Q1] as money) as [Actual Reasonable and Customary Cutback $ - Q1],
	cast([Actual Reasonable and Customary Cutback $ - Q2] as money) as [Actual Reasonable and Customary Cutback $ - Q2],
	cast([Actual Reasonable and Customary Cutback $ - Q3] as money) as [Actual Reasonable and Customary Cutback $ - Q3],
	cast([Actual Reasonable and Customary Cutback $ - Q4] as money) as [Actual Reasonable and Customary Cutback $ - Q4],
	'N' as AdjCopyofActual,
	'AD' as [Adjusted Data Filler],
	round(adjusted_admits,0) as [Adjusted Number of Admissions],
	round(adjusted_utilization,0) as [Adjusted Count of Utilization],

	cast([Adjusted Eligible Billed $ - Annual]as money) as [Adjusted Eligible Billed $ - Annual],
	cast([Adjusted Eligible Billed $ - Q1] as money) as [Adjusted Eligible Billed $ - Q1],
	cast([Adjusted Eligible Billed $ - Q2] as money) as [Adjusted Eligible Billed $ - Q2],
    cast([Adjusted Eligible Billed $ - Q3] as money) as [Adjusted Eligible Billed $ - Q3],
    cast([Adjusted Eligible Billed $ - Q4] as money) as [Adjusted Eligible Billed $ - Q4],
	cast([Adjusted Negotiated Savings $ - Annual] as money) as [Adjusted Negotiated Savings $ - Annual],
	cast([Adjusted Negotiated Savings $ - Q1] as money) as [Adjusted Negotiated Savings $ - Q1],
	cast([Adjusted Negotiated Savings $ - Q2] as money) as [Adjusted Negotiated Savings $ - Q2],
	cast([Adjusted Negotiated Savings $ - Q3] as money) as [Adjusted Negotiated Savings $ - Q3],
	cast([Adjusted Negotiated Savings $ - Q4] as money) as [Adjusted Negotiated Savings $ - Q4],
	cast([Adjusted Allowed $ - Annual] as money) as [Adjusted Allowed $ - Annual],
	cast([Adjusted Allowed $ - Q1] as money) as [Adjusted Allowed $ - Q1],
    cast([Adjusted Allowed $ - Q2] as money) as [Adjusted Allowed $ - Q2],
    cast([Adjusted Allowed $ - Q3] as money) as [Adjusted Allowed $ - Q3],
	cast([Adjusted Allowed $ - Q4] as money) as [Adjusted Allowed $ - Q4],
	cast([Adjusted Paid $ - Annual] as money) as [Adjusted Paid $ - Annual],
	cast([Adjusted Paid $ - Q1] as money) as [Adjusted Paid $ - Q1],
	cast([Adjusted Paid $ - Q2] as money) as [Adjusted Paid $ - Q2],
	cast([Adjusted Paid $ - Q3] as money) as [Adjusted Paid $ - Q3],
	cast([Adjusted Paid $ - Q4] as money) as [Adjusted Paid $ - Q4],
	cast([Adjusted Reasonable and Customary Cutback $ - Annual] as money) as [Adjusted Reasonable and Customary Cutback $ - Annual],
	cast([Adjusted Reasonable and Customary Cutback $ - Q1] as money) as [Adjusted Reasonable and Customary Cutback $ - Q1],
	cast([Adjusted Reasonable and Customary Cutback $ - Q2] as money) as [Adjusted Reasonable and Customary Cutback $ - Q2],
	cast([Adjusted Reasonable and Customary Cutback $ - Q3] as money) as [Adjusted Reasonable and Customary Cutback $ - Q3],
	cast([Adjusted Reasonable and Customary Cutback $ - Q4] as money) as [Adjusted Reasonable and Customary Cutback $ - Q4]
	--NULL as [Filler 1]
	--NULL as [Filler 2],
	--NULL as [Filler 3],
	--NULL as [Filler 4],
	--NULL as [Filler 5]
into OUTPUT_STD.[UDS PMPM - Claims Data]
from OUTPUT_STD.UDS_PMPM_Claims_Data_INTERNAL
where chp_carrier_id <>9999 

Delete from OUTPUT_STD.[UDS PMPM - Claims Data] where [3 Digit Member Zip Code] = '193' and [PDR Product ID] in ('PAB6', 'PAB1', 'PAL6', 'DEB1')



--claims
IF EXISTS (SELECT name FROM sys.indexes
            WHERE name = N'IX_text_claims' and OBJECT_SCHEMA_NAME(object_id) = 'OUTPUT_STD' and OBJECT_NAME(object_id) = 'UDS PMPM - Claims Data') 
    DROP INDEX IX_text_claims ON OUTPUT_STD.[UDS PMPM - Claims Data]; 

-- Create a clustered index 
CREATE UNIQUE CLUSTERED INDEX IX_text_claims 
    ON OUTPUT_STD.[UDS PMPM - Claims Data] ([Network Identifier], [Product Indicator], [3 Digit Member Zip Code], [Gender], [Age Bracket],[COVID-Related Indicator], [Duration Bracket],[Plan Benefit Value - IC] ,[Plan Benefit Value - ALL], [High Cost Claimant], [Arrangement/Group Size Indicator], [Benefit/Contract Status Indicator], [Claim Type], [Outpatient Type of Service]);









end/*Begin logging update*/
EXEC Log.SpUpdateLoggingForEndDate @CallId = @CallId
/*Endof logging update*/


GO
/****** Object:  StoredProcedure [dbo].[sp_uds_7_OON_MULTIPLAN]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Tola Kalejaiye
-- Create date: 12/02/2019
-- Description:	create a Multiplan version from the OX/OC
-- =============================================
-- =============================================

CREATE PROCEDURE  [dbo].[sp_uds_7_OON_MULTIPLAN]

AS
BEGIN

/***********************************STEP 1. Create UDS Multiplan table by copying data from the original table********************************************************************************************/
DROP TABLE IF EXISTS OUTPUT_STD.[UDS PMPM - Claims Data_Multiplan]
SELECT * INTO OUTPUT_STD.[UDS PMPM - Claims Data_Multiplan] --3,222,086 rows
    FROM OUTPUT_STD.[UDS PMPM - Claims Data]
	--select sum([Actual Eligible Billed $]) as billed
	--    ,sum([Adjusted Eligible Billed $]) as Adj_billed  from OUTPUT_STD.[UDS PMPM - Claims Data]
	--	where [Benefit/Contract Status Indicator] in ('OX','OC')
/*********************************STEP 2. Create temp table to aggregate data for those plans in the reference data that have been flagged as Multiplan and create multiplan data *******************************************/

 DROP TABLE IF EXISTS #BASE_Multiplan_change_step2
 CREATE TABLE  #BASE_Multiplan_change_step2
 (	[CHP Carrier ID] [varchar](10) NOT NULL,
	[PDR Product ID] [varchar](10) NOT NULL,
	[Organization Name] [varchar](25) NULL,
	[Network Identifier] [varchar](255) NOT NULL,
	[Service Period] [varchar](20) NOT NULL,
	[3 Digit Member ZIP Code] [varchar](3) NOT NULL,
	[Product Indicator] [varchar](10) NOT NULL,
	[Gender] [varchar](1) NOT NULL,
	[Age Bracket] [varchar](10) NOT NULL,
	[Duration Bracket] [varchar](10) NOT NULL,
	[Plan Benefit Value - IC] [varchar](25) NOT NULL,
	[Plan Benefit Value - ALL] [varchar](25) NOT NULL,
	[High Cost Claimant] [varchar](1) NOT NULL,
	[Arrangement/Group Size Indicator] [varchar](2) NOT NULL,
	[Benefit/Contract Status Indicator] [varchar](10) NOT NULL,
	[Claim Type] [varchar](1) NOT NULL,
	[Outpatient Type of Service] [varchar](10) NULL,
	[COVID-Related Indicator] [varchar](2) NOT NULL,
	[Actual_Billed] [decimal] (38,6) NULL,
	[Actual_Billed_q1] [decimal] (38,6) NULL,
	[Actual_Billed_q2] [decimal] (38,6) NULL,
	[Actual_Billed_q3] [decimal] (38,6) NULL,
	[Actual_Billed_q4] [decimal] (38,6) NULL,
	[Adjusted_Billed] [decimal] (38,6)  NULL,
	[Adjusted_Billed_q1]  [decimal] (38,6) NULL,
	[Adjusted_Billed_q2]  [decimal] (38,6) NULL,
	[Adjusted_Billed_q3]  [decimal] (38,6) NULL,
	[Adjusted_Billed_q4] [decimal] (38,6) NULL,
	[Actual_Admit] [Decimal] (38,6) NULL,
	[Actual_Utilization] [Decimal] (38,6)  NULL,
	[Adjusted_Admit] [Decimal] (38,6) NULL,
	[Adjusted_Utilization] [Decimal] (38,6)  NULL,
	[Actual AV Value] [Decimal] (38,6) NULL,
    [Adjusted AV Value] [Decimal] (38,6) NULL,
	Discount [Decimal] (38,6) NULL
	)

INSERT INTO #BASE_Multiplan_change_step2 with (Tablock)--215,346 rows
SELECT [CHP Carrier ID]
	,[PDR Product ID]
	,[Organization Name]
	,[Network Identifier] 
	,[Service Period]
	,[3 Digit Member ZIP Code]
	,[Product Indicator] 
	,[Gender]
	,[Age Bracket] 
	,[Duration Bracket] 
	,[Plan Benefit Value - IC]
	,[Plan Benefit Value - ALL]
	,[High Cost Claimant]
	,[Arrangement/Group Size Indicator] 
	,[Benefit/Contract Status Indicator] 
	,[Claim Type] 
	,[Outpatient Type of Service]
	,[COVID-Related Indicator]
    ,cast([Actual Eligible Billed $]  *b.mp_oc_pct  as money)        as Actual_Billed
	,cast([Actual Eligible Billed $ - Q1]  *b.mp_oc_pct  as money)   as Actual_Billed_q1
	,cast([Actual Eligible Billed $ - Q2]  *b.mp_oc_pct  as money)   as Actual_Billed_q2
	,cast([Actual Eligible Billed $ - Q3]  *b.mp_oc_pct  as money)   as Actual_Billed_q3
	,cast([Actual Eligible Billed $ - Q4]  *b.mp_oc_pct  as money)   as Actual_Billed_q4

	,cast([Adjusted Eligible Billed $]*b.mp_oc_pct  as money)        as Adjusted_Billed
	,cast([Adjusted Eligible Billed $ - Q1]  *b.mp_oc_pct  as money)   as Adjusted_Billed_q1
	,cast([Adjusted Eligible Billed $ - Q2]  *b.mp_oc_pct  as money)   as Adjusted_Billed_q2
	,cast([Adjusted Eligible Billed $ - Q3]  *b.mp_oc_pct  as money)   as Adjusted_Billed_q3
	,cast([Adjusted Eligible Billed $ - Q4]  *b.mp_oc_pct  as money)   as Adjusted_Billed_q4

	,[Actual Number of Admissions] * b.mp_oc_admit           as Actual_admit
	,[Actual Count of Utilization] * b.mp_oc_utilization     as Actual_Utilization
	,case when        ([Adjusted Number of Admissions] * b.mp_oc_admit) <0.5 
	      then floor  ([Adjusted Number of Admissions] * b.mp_oc_admit) 
		  when        ([Adjusted Number of Admissions] * b.mp_oc_admit) between 0.5 and 0.9 
	      then ceiling([Adjusted Number of Admissions] * b.mp_oc_admit)
		  else round  ([Adjusted Number of Admissions] * b.mp_oc_admit,0) end as Adjusted_admit
	,case when        ([Adjusted Count of Utilization] * b.mp_oc_utilization) <0.5 
	      then floor  ([Adjusted Count of Utilization] * b.mp_oc_utilization)
		  when        ([Adjusted Count of Utilization] * b.mp_oc_utilization) between 0.5 and 0.9 
	      then ceiling([Adjusted Count of Utilization] * b.mp_oc_utilization)
		  else round  ([Adjusted Count of Utilization] * b.mp_oc_utilization,0) end as Adjusted_utilization
	,[Actual AV Value]
	,[Adjusted AV Value]
	,mp_oc_disc as discount	

FROM(
SELECT[CHP Carrier ID]
	,[PDR Product ID]
	,[Organization Name]
	,[Network Identifier] 
	,[Service Period]
	,[3 Digit Member ZIP Code]
	,[Product Indicator] 
	,[Gender]
	,[Age Bracket] 
	,[Duration Bracket] 
	,[Plan Benefit Value - IC]
	,[Plan Benefit Value - ALL]
	,[High Cost Claimant]
	,[Arrangement/Group Size Indicator] 
	,'OC' as [Benefit/Contract Status Indicator] 
	,[Claim Type] 
	,[Outpatient Type of Service]
	,[COVID-Related Indicator]
	,sum([Actual Eligible Billed $ - Annual])  as [Actual Eligible Billed $]
	,sum([Actual Eligible Billed $ - Q1])      as [Actual Eligible Billed $ - Q1]
	,sum([Actual Eligible Billed $ - Q2])      as [Actual Eligible Billed $ - Q2]
	,sum([Actual Eligible Billed $ - Q3])      as [Actual Eligible Billed $ - Q3]
	,sum([Actual Eligible Billed $ - Q4])      as [Actual Eligible Billed $ - Q4]
    ,sum([Adjusted Eligible Billed $ - Annual]) as [Adjusted Eligible Billed $]
	,sum([Adjusted Eligible Billed $ - Q1])     as [Adjusted Eligible Billed $ - Q1]
	,sum([Adjusted Eligible Billed $ - Q2])     as [Adjusted Eligible Billed $ - Q2]
	,sum([Adjusted Eligible Billed $ - Q3])     as [Adjusted Eligible Billed $ - Q3]
	,sum([Adjusted Eligible Billed $ - Q4])     as [Adjusted Eligible Billed $ - Q4]
	,sum([Actual Number of Admissions])   as [Actual Number of Admissions]
	,sum([Actual Count of Utilization])   as [Actual Count of Utilization]
	,sum([Adjusted Number of Admissions]) as [Adjusted Number of Admissions]
	,sum([Adjusted Count of Utilization]) as [Adjusted Count of Utilization]
    ,isnull(sum([Actual Paid $ - Annual])/nullif(sum([Actual Allowed $ - Annual]),0),0)      as [Actual AV Value]
	,isnull(sum([Adjusted Paid $ - Annual])/nullif(sum([Adjusted Allowed $ - Annual]),0),0)  as [Adjusted AV Value]
	FROM OUTPUT_STD.[UDS PMPM - Claims Data_Multiplan]
	    where [Benefit/Contract Status Indicator] in ('OX','OC')

	GROUP BY  [CHP Carrier ID]
	,[PDR Product ID]
	,[Organization Name]
	,[Network Identifier] 
	,[Service Period]
	,[3 Digit Member ZIP Code]
	,[Product Indicator] 
	,[Gender]
	,[Age Bracket] 
	,[Duration Bracket] 
	,[Plan Benefit Value - IC]
	,[Plan Benefit Value - ALL]
	,[High Cost Claimant]
	,[Arrangement/Group Size Indicator] 
	,[Claim Type] 
	,[Outpatient Type of Service]
	,[COVID-Related Indicator]) a
JOIN   analytics.OON_factors b
	  on  a.[PDR Product ID] =b.pdr_product_id
	  and a.[3 Digit Member ZIP Code]=b.zip3
	  and a.[Claim Type]=b.ctype
	  where( b.home_flag IN ('NON',  'MP')) 
	  and b.pdr_product_id not in (select distinct PDR_Product_ID from Reference.ref_tpv_factor_development   where TPV_nonTPV = 'Yes') 
	
UNION ALL

SELECT [CHP Carrier ID]
	,[PDR Product ID]
	,[Organization Name]
	,[Network Identifier] 
	,[Service Period]
	,[3 Digit Member ZIP Code]
	,[Product Indicator] 
	,[Gender]
	,[Age Bracket] 
	,[Duration Bracket] 
	,[Plan Benefit Value - IC]
	,[Plan Benefit Value - ALL]
	,[High Cost Claimant]
	,[Arrangement/Group Size Indicator] 
	,[Benefit/Contract Status Indicator] 
	,[Claim Type] 
	,[Outpatient Type of Service]
   ,[COVID-Related Indicator]
    ,cast([Actual Eligible Billed $]  *b.mp_ox_pct  as money)        as Actual_Billed
	,cast([Actual Eligible Billed $ - Q1]  *b.mp_ox_pct  as money)   as Actual_Billed_q1
	,cast([Actual Eligible Billed $ - Q2]  *b.mp_ox_pct  as money)   as Actual_Billed_q2
	,cast([Actual Eligible Billed $ - Q3]  *b.mp_ox_pct  as money)   as Actual_Billed_q3
	,cast([Actual Eligible Billed $ - Q4]  *b.mp_ox_pct  as money)   as Actual_Billed_q4
	,cast([Adjusted Eligible Billed $]*b.mp_ox_pct  as money)        as Adjusted_Billed
	,cast([Adjusted Eligible Billed $ - Q1]  *b.mp_ox_pct  as money)   as Adjusted_Billed_q1
	,cast([Adjusted Eligible Billed $ - Q2]  *b.mp_ox_pct  as money)   as Adjusted_Billed_q2
	,cast([Adjusted Eligible Billed $ - Q3]  *b.mp_ox_pct  as money)   as Adjusted_Billed_q3
	,cast([Adjusted Eligible Billed $ - Q4]  *b.mp_ox_pct  as money)   as Adjusted_Billed_q4
	,[Actual Number of Admissions] * b.mp_ox_admit           as Actual_admit
	,[Actual Count of Utilization] * b.mp_ox_utilization     as Actual_Utilization
	,case when        ([Adjusted Number of Admissions] * b.mp_ox_admit) <0.5 
	      then floor  ([Adjusted Number of Admissions] * b.mp_ox_admit) 
		  when        ([Adjusted Number of Admissions] * b.mp_ox_admit) between 0.5 and 0.9 
	      then ceiling([Adjusted Number of Admissions] * b.mp_ox_admit)
		  else round  ([Adjusted Number of Admissions] * b.mp_ox_admit,0) end as Adjusted_admit
	,case when        ([Adjusted Count of Utilization] * b.mp_ox_utilization) <0.5 
	      then floor  ([Adjusted Count of Utilization] * b.mp_ox_utilization)
		  when        ([Adjusted Count of Utilization] * b.mp_ox_utilization) between 0.5 and 0.9 
	      then ceiling([Adjusted Count of Utilization] * b.mp_ox_utilization)
		  else round  ([Adjusted Count of Utilization] * b.mp_ox_utilization,0) end as Adjusted_utilization
	,[Actual AV Value]
	,[Adjusted AV Value]
	,mp_ox_disc as discount	

FROM(
SELECT[CHP Carrier ID]
	,[PDR Product ID]
	,[Organization Name]
	,[Network Identifier] 
	,[Service Period]
	,[3 Digit Member ZIP Code]
	,[Product Indicator] 
	,[Gender]
	,[Age Bracket] 
	,[Duration Bracket] 
	,[Plan Benefit Value - IC]
	,[Plan Benefit Value - ALL]
	,[High Cost Claimant]
	,[Arrangement/Group Size Indicator] 
	,'OX' as [Benefit/Contract Status Indicator] 
	,[Claim Type] 
	,[Outpatient Type of Service]
	,[COVID-Related Indicator]
	,sum([Actual Eligible Billed $ - Annual])  as [Actual Eligible Billed $]
	,sum([Actual Eligible Billed $ - Q1])      as [Actual Eligible Billed $ - Q1]
	,sum([Actual Eligible Billed $ - Q2])      as [Actual Eligible Billed $ - Q2]
	,sum([Actual Eligible Billed $ - Q3])      as [Actual Eligible Billed $ - Q3]
	,sum([Actual Eligible Billed $ - Q4])      as [Actual Eligible Billed $ - Q4]
    ,sum([Adjusted Eligible Billed $ - Annual]) as [Adjusted Eligible Billed $]
	,sum([Adjusted Eligible Billed $ - Q1])     as [Adjusted Eligible Billed $ - Q1]
	,sum([Adjusted Eligible Billed $ - Q2])     as [Adjusted Eligible Billed $ - Q2]
	,sum([Adjusted Eligible Billed $ - Q3])     as [Adjusted Eligible Billed $ - Q3]
	,sum([Adjusted Eligible Billed $ - Q4])     as [Adjusted Eligible Billed $ - Q4]
	,sum([Actual Number of Admissions])   as [Actual Number of Admissions]
	,sum([Actual Count of Utilization])   as [Actual Count of Utilization]
	,sum([Adjusted Number of Admissions]) as [Adjusted Number of Admissions]
	,sum([Adjusted Count of Utilization]) as [Adjusted Count of Utilization]
    ,isnull(sum([Actual Paid $ - Annual])/nullif(sum([Actual Allowed $ - Annual]),0),0)      as [Actual AV Value]
	,isnull(sum([Adjusted Paid $ - Annual])/nullif(sum([Adjusted Allowed $ - Annual]),0),0)  as [Adjusted AV Value]
	FROM OUTPUT_STD.[UDS PMPM - Claims Data_Multiplan]
	where [Benefit/Contract Status Indicator] in ('OX','OC')

	GROUP BY  [CHP Carrier ID]
	,[PDR Product ID]
	,[Organization Name]
	,[Network Identifier] 
	,[Service Period]
	,[3 Digit Member ZIP Code]
	,[Product Indicator] 
	,[Gender]
	,[Age Bracket] 
	,[Duration Bracket] 
	,[Plan Benefit Value - IC]
	,[Plan Benefit Value - ALL]
	,[High Cost Claimant]
	,[Arrangement/Group Size Indicator] 
	,[Claim Type] 
	,[Outpatient Type of Service]
	,[COVID-Related Indicator]) a
JOIN  analytics.OON_factors b
	  on  a.[PDR Product ID] =b.pdr_product_id
	  and a.[3 Digit Member ZIP Code]=b.zip3
	  and a.[Claim Type]=b.ctype
	  where( b.home_flag IN ('NON',  'MP')) 
	  and b.pdr_product_id not in (select distinct PDR_Product_ID from Reference.ref_tpv_factor_development   where TPV_nonTPV = 'Yes') 
	

---test to ensure factors is applied to the right products (results should be anthem, bcbs ma, horizon and bs ca)
--Select distinct [CHP Carrier ID], [PDR Product ID]   from #BASE_NonMultiplan_change_step2 order by [PDR Product ID]
select [CHP Carrier ID], [PDR Product ID],sum(actual_billed) from #BASE_Multiplan_change_step2 group by [CHP Carrier ID], [PDR Product ID] order by 1,2
select [CHP Carrier ID], [PDR Product ID],sum([Actual Eligible Billed $ - Annual]) from OUTPUT_STD.[UDS PMPM - Claims Data] where [Benefit/Contract Status Indicator] in ('OX','OC') 
and concat([CHP Carrier ID], [PDR Product ID]) in (select distinct concat([CHP Carrier ID], [PDR Product ID])   from #BASE_Multiplan_change_step2)
group by [CHP Carrier ID], [PDR Product ID] order by 1,2

/******** To keep the table structure of the original base table*********************************************************************/

DROP TABLE IF EXISTS dbo.[Multiplan_change_final]
SELECT TOP 0 *INTO dbo.[Multiplan_change_final]
FROM OUTPUT_STD.[UDS PMPM - Claims Data]

INSERT INTO dbo.[Multiplan_change_final] with (tablock)--261,366 rows
SELECT	[CHP Carrier ID],
	    [PDR Product ID],
	    [Organization Name],
	    [Network Identifier],
	    [Service Period],
	    [3 Digit Member ZIP Code],
	    [Product Indicator],
	    [Gender],
	    [Age Bracket],
	    [Duration Bracket],
	    [Plan Benefit Value - IC],
	    [Plan Benefit Value - ALL],
	    [High Cost Claimant],
	    [Arrangement/Group Size Indicator],
	    [Benefit/Contract Status Indicator],
	    [Claim Type],
	    [Outpatient Type of Service],
		[COVID-Related Indicator],
	    NULL as [Custom Study Group 1],
	    NULL as [Custom Study Group 2],
	    NULL as [Custom Study Group 3],
	   'AC' as [Actual Data Filler],
	   [Actual Number of Admissions],
	   [Actual Count of Utilization],
	   cast([Actual Eligible Billed $ - Annual] as money) as [Actual Eligible Billed $ - Annual],
	   [Actual Eligible Billed $ - Q1],
	   [Actual Eligible Billed $ - Q2],
	   [Actual Eligible Billed $ - Q3],
	   [Actual Eligible Billed $ - Q4],
	   cast(case when [Benefit/Contract Status Indicator]='oc' then [Actual Eligible Billed $ - Annual]-[Actual Allowed $ - Annual] else 0 end as money) as [Actual Negotiated Savings $ - Annual],
	   cast(case when [Benefit/Contract Status Indicator]='oc' then [Actual Eligible Billed $ - Q1]-[Actual Allowed $ - Q1] else 0 end as money) as [Actual Negotiated Savings $ - Q1],
	   cast(case when [Benefit/Contract Status Indicator]='oc' then [Actual Eligible Billed $ - Q2]-[Actual Allowed $ - Q2] else 0 end as money) as [Actual Negotiated Savings $ - Q2],
	   cast(case when [Benefit/Contract Status Indicator]='oc' then [Actual Eligible Billed $ - Q3]-[Actual Allowed $ - Q3] else 0 end as money) as [Actual Negotiated Savings $ - Q3],
	   cast(case when [Benefit/Contract Status Indicator]='oc' then [Actual Eligible Billed $ - Q4]-[Actual Allowed $ - Q4] else 0 end as money) as [Actual Negotiated Savings $ - Q4],
       [Actual Allowed $ - Annual],
	   [Actual Allowed $ - Q1],
	   [Actual Allowed $ - Q2],
	   [Actual Allowed $ - Q3],
	   [Actual Allowed $ - Q4],
	   cast([Actual AV Value]* [Actual Allowed $ - Annual] as money) as [Actual Paid $ - Annual],
	   cast([Actual AV Value]* [Actual Allowed $ - Q1] as money) as [Actual Paid $ - Q1],
	   cast([Actual AV Value]* [Actual Allowed $ - Q2] as money) as [Actual Paid $ - Q2],
	   cast([Actual AV Value]* [Actual Allowed $ - Q3] as money) as [Actual Paid $ - Q3],
	   cast([Actual AV Value]* [Actual Allowed $ - Q4] as money) as [Actual Paid $ - Q4],
	   cast(case when [Benefit/Contract Status Indicator]='ox' then [Actual Eligible Billed $ - Annual]-[Actual Allowed $ - Annual] else 0 end as money) as [Adjusted Reasonable and Customary Cutback $ - Annual],
	   cast(case when [Benefit/Contract Status Indicator]='ox' then [Actual Eligible Billed $ - Q1]-[Actual Allowed $ - Q1] else 0 end as money) as [Adjusted Reasonable and Customary Cutback $ - Q1],
	   cast(case when [Benefit/Contract Status Indicator]='ox' then [Actual Eligible Billed $ - Q2]-[Actual Allowed $ - Q2] else 0 end as money) as [Adjusted Reasonable and Customary Cutback $ - Q2],
	   cast(case when [Benefit/Contract Status Indicator]='ox' then [Actual Eligible Billed $ - Q3]-[Actual Allowed $ - Q3] else 0 end as money) as [Adjusted Reasonable and Customary Cutback $ - Q3],
	   cast(case when [Benefit/Contract Status Indicator]='ox' then [Actual Eligible Billed $ - Q4]-[Actual Allowed $ - Q4] else 0 end as money) as [Adjusted Reasonable and Customary Cutback $ - Q4],
	   'N' as AdjCopyofActual,
	   'AD' as [Adjusted Data Filler],
	   [Adjusted Number of Admissions],
	   [Adjusted Count of Utilization],
	   [Adjusted Eligible Billed $ - Annual],
	   [Adjusted Eligible Billed $ - Q1],
	   [Adjusted Eligible Billed $ - Q2],
	   [Adjusted Eligible Billed $ - Q3],
	   [Adjusted Eligible Billed $ - Q4],
	   cast(case when [Benefit/Contract Status Indicator]='oc' then [Adjusted Eligible Billed $ - Annual]-[Adjusted Allowed $ - Annual] else 0 end as money) as [Adjusted Negotiated Savings $ - Annual],
	   cast(case when [Benefit/Contract Status Indicator]='oc' then [Adjusted Eligible Billed $ - Q1]-[Adjusted Allowed $ - Q1] else 0 end as money) as [Adjusted Negotiated Savings $ - Q1],
	   cast(case when [Benefit/Contract Status Indicator]='oc' then [Adjusted Eligible Billed $ - Q2]-[Adjusted Allowed $ - Q2] else 0 end as money) as [Adjusted Negotiated Savings $ - Q2],
	   cast(case when [Benefit/Contract Status Indicator]='oc' then [Adjusted Eligible Billed $ - Q3]-[Adjusted Allowed $ - Q3] else 0 end as money) as [Adjusted Negotiated Savings $ - Q3],
	   cast(case when [Benefit/Contract Status Indicator]='oc' then [Adjusted Eligible Billed $ - Q4]-[Adjusted Allowed $ - Q4] else 0 end as money) as [Adjusted Negotiated Savings $ - Q4],
       [Adjusted Allowed $ - Annual],
	   [Adjusted Allowed $ - Q1],
	   [Adjusted Allowed $ - Q2],
	   [Adjusted Allowed $ - Q3],
	   [Adjusted Allowed $ - Q4],
	   cast([Adjusted AV Value]* [Adjusted Allowed $ - Annual] as money) as [Adjusted Paid $ - Annual],
	   cast([Adjusted AV Value]* [Adjusted Allowed $ - Q1] as money) as [Adjusted Paid $ - Q1],
	   cast([Adjusted AV Value]* [Adjusted Allowed $ - Q2] as money) as [Adjusted Paid $ - Q2],
	   cast([Adjusted AV Value]* [Adjusted Allowed $ - Q3] as money) as [Adjusted Paid $ - Q3],
	   cast([Adjusted AV Value]* [Adjusted Allowed $ - Q4] as money) as [Adjusted Paid $ - Q4],
	   cast(case when [Benefit/Contract Status Indicator]='ox' then [Adjusted Eligible Billed $ - Annual]-[Adjusted Allowed $ - Annual] else 0 end as money) as [Adjusted Reasonable and Customary Cutback $ - Annual],
	   cast(case when [Benefit/Contract Status Indicator]='ox' then [Adjusted Eligible Billed $ - Q1]-[Adjusted Allowed $ - Q1] else 0 end as money) as [Adjusted Reasonable and Customary Cutback $ - Q1],
	   cast(case when [Benefit/Contract Status Indicator]='ox' then [Adjusted Eligible Billed $ - Q2]-[Adjusted Allowed $ - Q2] else 0 end as money) as [Adjusted Reasonable and Customary Cutback $ - Q2],
	   cast(case when [Benefit/Contract Status Indicator]='ox' then [Adjusted Eligible Billed $ - Q3]-[Adjusted Allowed $ - Q3] else 0 end as money) as [Adjusted Reasonable and Customary Cutback $ - Q3],
	   cast(case when [Benefit/Contract Status Indicator]='ox' then [Adjusted Eligible Billed $ - Q4]-[Adjusted Allowed $ - Q4] else 0 end as money) as [Adjusted Reasonable and Customary Cutback $ - Q4]
	   
	   

FROM
(SELECT [CHP Carrier ID]
	,[PDR Product ID]
	,[Organization Name]
	,[Network Identifier] 
	,[Service Period]
	,[3 Digit Member ZIP Code]
	,[Product Indicator] 
	,[Gender]
	,[Age Bracket] 
	,[Duration Bracket] 
	,[Plan Benefit Value - IC]
	,[Plan Benefit Value - ALL]
	,[High Cost Claimant]
	,[Arrangement/Group Size Indicator] 
	,[Benefit/Contract Status Indicator] 
	,[Claim Type] 
	,[Outpatient Type of Service]
	,[COVID-Related Indicator]

	,actual_billed                                      as [Actual Eligible Billed $ - Annual]
	,Actual_Billed_q1									as [Actual Eligible Billed $ - Q1]
	,Actual_Billed_q2									as [Actual Eligible Billed $ - Q2]
	,Actual_Billed_q3									as [Actual Eligible Billed $ - Q3]
	,Actual_Billed_q4									as [Actual Eligible Billed $ - Q4]

	,adjusted_billed                                    as [Adjusted Eligible Billed $ - Annual]
	,Adjusted_Billed_q1                                 as [Adjusted Eligible Billed $ - Q1]
	,Adjusted_Billed_q2                                 as [Adjusted Eligible Billed $ - Q2]
	,Adjusted_Billed_q3                                 as [Adjusted Eligible Billed $ - Q3]
	,Adjusted_Billed_q4                                 as [Adjusted Eligible Billed $ - Q4]

	,cast(Actual_Billed     *(1-discount)as money)    as [Actual Allowed $ - Annual]
	,cast(Actual_Billed_q1  *(1-discount)as money) as [Actual Allowed $ - Q1]
	,cast(Actual_Billed_q2  *(1-discount)as money) as [Actual Allowed $ - Q2]
	,cast(Actual_Billed_q3  *(1-discount)as money) as [Actual Allowed $ - Q3]
	,cast(Actual_Billed_q4  *(1-discount)as money) as [Actual Allowed $ - Q4]

    ,cast(Adjusted_billed*(1-discount)as money) as [Adjusted Allowed $ - Annual]
	,cast(Adjusted_Billed_q1  *(1-discount)as money) as [Adjusted Allowed $ - Q1]
	,cast(Adjusted_Billed_q2  *(1-discount)as money) as [Adjusted Allowed $ - Q2]
	,cast(Adjusted_Billed_q3  *(1-discount)as money) as [Adjusted Allowed $ - Q3]
	,cast(Adjusted_Billed_q4  *(1-discount)as money) as [Adjusted Allowed $ - Q4]

	,Actual_Admit                                       as [Actual Number of Admissions]
	,Actual_Utilization                                 as [Actual Count of Utilization]
	,cast(Adjusted_Admit as int)                        as [Adjusted Number of Admissions]
	,cast(Adjusted_Utilization as int)                  as [Adjusted Count of Utilization]
	,[Actual AV Value]                                  as [Actual AV Value]
	,[Adjusted AV Value]                                as [Adjusted AV Value]
	
	
FROM #BASE_Multiplan_change_step2
)A

---------------Test to check partition by quarter matches annual figures
SELECT 
--[CHP Carrier ID],
--[PDR Product ID],
sum([Actual Eligible Billed $ - Annual]) as [Actual Eligible Billed $ - Annual]
,sum([Actual Eligible Billed $ - Q1]) as [Actual Eligible Billed $ - Q1]
,sum([Actual Eligible Billed $ - Q2]) as [Actual Eligible Billed $ - Q2]
,sum([Actual Eligible Billed $ - Q3]) as [Actual Eligible Billed $ - Q3]
,sum([Actual Eligible Billed $ - Q4]) as [Actual Eligible Billed $ - Q4]
,sum([Actual Negotiated Savings $ - Annual]) as [Actual Negotiated Savings $ - Annual]
,sum([Actual Negotiated Savings $ - Q1]) as [Actual Negotiated Savings $ - Q1]
,sum([Actual Negotiated Savings $ - Q2]) as [Actual Negotiated Savings $ - Q2]
,sum([Actual Negotiated Savings $ - Q3]) as [Actual Negotiated Savings $ - Q3]
,sum([Actual Negotiated Savings $ - Q4]) as [Actual Negotiated Savings $ - Q4]
,sum([Actual Allowed $ - Annual]) as [Actual Allowed $ - Annual]
,sum([Actual Allowed $ - Q1]) as [Actual Allowed $ - Q1]
,sum([Actual Allowed $ - Q2]) as [Actual Allowed $ - Q2]
,sum([Actual Allowed $ - Q3]) as [Actual Allowed $ - Q3]
,sum([Actual Allowed $ - Q4]) as [Actual Allowed $ - Q4]
,sum([Actual Paid $ - Annual]) as [Actual Paid $ - Annual]
,sum([Actual Paid $ - Q1]) as [Actual Paid $ - Q1]
,sum([Actual Paid $ - Q2]) as [Actual Paid $ - Q2]
,sum([Actual Paid $ - Q3]) as [Actual Paid $ - Q3]
,sum([Actual Paid $ - Q4]) as [Actual Paid $ - Q4]
,sum([Actual Reasonable and Customary Cutback $ - Annual]) as [Actual Reasonable and Customary Cutback $ - Annual]
,sum([Actual Reasonable and Customary Cutback $ - Q1]) as [Actual Reasonable and Customary Cutback $ - Q1]
,sum([Actual Reasonable and Customary Cutback $ - Q2]) as [Actual Reasonable and Customary Cutback $ - Q2]
,sum([Actual Reasonable and Customary Cutback $ - Q3]) as [Actual Reasonable and Customary Cutback $ - Q3]
,sum([Actual Reasonable and Customary Cutback $ - Q4]) as [Actual Reasonable and Customary Cutback $ - Q4]
,sum([Adjusted Eligible Billed $ - Annual]) as [Adjusted Eligible Billed $ - Annual]
,sum([Adjusted Eligible Billed $ - Q1]) as [Adjusted Eligible Billed $ - Q1]
,sum([Adjusted Eligible Billed $ - Q2]) as [Adjusted Eligible Billed $ - Q2]
,sum([Adjusted Eligible Billed $ - Q3]) as [Adjusted Eligible Billed $ - Q3]
,sum([Adjusted Eligible Billed $ - Q4]) as [Adjusted Eligible Billed $ - Q4]
,sum([Adjusted Negotiated Savings $ - Annual]) as [Adjusted Negotiated Savings $ - Annual]
,sum([Adjusted Negotiated Savings $ - Q1]) as [Adjusted Negotiated Savings $ - Q1]
,sum([Adjusted Negotiated Savings $ - Q2]) as [Adjusted Negotiated Savings $ - Q2]
,sum([Adjusted Negotiated Savings $ - Q3]) as [Adjusted Negotiated Savings $ - Q3]
,sum([Adjusted Negotiated Savings $ - Q4]) as [Adjusted Negotiated Savings $ - Q4]
,sum([Adjusted Allowed $ - Annual]) as [Adjusted Allowed $ - Annual]
,sum([Adjusted Allowed $ - Q1]) as [Adjusted Allowed $ - Q1]
,sum([Adjusted Allowed $ - Q2]) as [Adjusted Allowed $ - Q2]
,sum([Adjusted Allowed $ - Q3]) as [Adjusted Allowed $ - Q3]
,sum([Adjusted Allowed $ - Q4]) as [Adjusted Allowed $ - Q4]
,sum([Adjusted Paid $ - Annual]) as [Adjusted Paid $ - Annual]
,sum([Adjusted Paid $ - Q1]) as [Adjusted Paid $ - Q1]
,sum([Adjusted Paid $ - Q2]) as [Adjusted Paid $ - Q2]
,sum([Adjusted Paid $ - Q3]) as [Adjusted Paid $ - Q3]
,sum([Adjusted Paid $ - Q4]) as [Adjusted Paid $ - Q4]
,sum([Adjusted Reasonable and Customary Cutback $ - Annual]) as [Adjusted Reasonable and Customary Cutback $ - Annual]
,sum([Adjusted Reasonable and Customary Cutback $ - Q1]) as [Adjusted Reasonable and Customary Cutback $ - Q1]
,sum([Adjusted Reasonable and Customary Cutback $ - Q2]) as [Adjusted Reasonable and Customary Cutback $ - Q2]
,sum([Adjusted Reasonable and Customary Cutback $ - Q3]) as [Adjusted Reasonable and Customary Cutback $ - Q3]
,sum([Adjusted Reasonable and Customary Cutback $ - Q4]) as [Adjusted Reasonable and Customary Cutback $ - Q4]
  FROM [xUDS_pmpm_2020CY].dbo.[Multiplan_change_final]
 -- group by [CHP Carrier ID],
--[PDR Product ID]
--select top 100 * from OUTPUT_STD.[UDS PMPM - Claims Data]
select sum([Actual Eligible Billed $ - Annual]) from dbo.[Multiplan_change_final] 
select sum(actual_billed) from #BASE_Multiplan_change_step2
select  * from #BASE_Multiplan_change_step2 where Actual_Utilization is null
/**************************************************TESTING BILLED AMOUNT IN MULTIPLAN VS. ORIGINAL TABLE. Numbers should be the same **************************************************/
DROP TABLE IF EXISTS #A
select a.*, b.[Actual Eligible Billed $] as original_billed,
           a.[Actual Eligible Billed $]-b.[Actual Eligible Billed $] as act_diff
          ,b.[Adjusted Eligible Billed $] as original_billed_adj, 
		  a.[Adjusted Eligible Billed $]-b.[Adjusted Eligible Billed $] as adj_diff
INTO #A
from (
select    [CHP Carrier ID]
	,[PDR Product ID]
	,[Organization Name]
	,[Network Identifier] 
	,[Service Period]
	,[3 Digit Member ZIP Code]
	,[Product Indicator] 
	,[Gender]
	,[Age Bracket] 
	,[Duration Bracket] 
	,[Plan Benefit Value - IC]
	,[Plan Benefit Value - ALL]
	,[High Cost Claimant]
	,[Arrangement/Group Size Indicator] 
	,[Claim Type] 
	,[Outpatient Type of Service]
	,[COVID-Related Indicator]
    ,sum([Actual Eligible Billed $ - Annual]) as [Actual Eligible Billed $]
	,sum([Adjusted Eligible Billed $ - Annual]) as [Adjusted Eligible Billed $]
from [xUDS_pmpm_2020CY].dbo.[Multiplan_change_final]
group by  [CHP Carrier ID]
	,[PDR Product ID]
	,[Organization Name]
	,[Network Identifier] 
	,[Service Period]
	,[3 Digit Member ZIP Code]
	,[Product Indicator] 
	,[Gender]
	,[Age Bracket] 
	,[Duration Bracket] 
	,[Plan Benefit Value - IC]
	,[Plan Benefit Value - ALL]
	,[High Cost Claimant]
	,[Arrangement/Group Size Indicator]  
	,[Claim Type] 
	,[Outpatient Type of Service]
	,[COVID-Related Indicator])a
full join 
( SELECT  
     [CHP Carrier ID]
	,[PDR Product ID]
	,[Organization Name]
	,[Network Identifier] 
	,[Service Period]
	,[3 Digit Member ZIP Code]
	,[Product Indicator] 
	,[Gender]
	,[Age Bracket] 
	,[Duration Bracket] 
	,[Plan Benefit Value - IC]
	,[Plan Benefit Value - ALL]
	,[High Cost Claimant]
	,[Arrangement/Group Size Indicator] 
	,[Claim Type] 
	,[Outpatient Type of Service]
	,[COVID-Related Indicator]
    ,sum([Actual Eligible Billed $ - Annual])   as [Actual Eligible Billed $] 
	,sum([Adjusted Eligible Billed $ - Annual]) as [Adjusted Eligible Billed $]
FROM OUTPUT_STD.[UDS PMPM - Claims Data_Multiplan] a
	  JOIN  analytics.OON_factors b
	  on  a.[PDR Product ID] =b.pdr_product_id
	  and a.[3 Digit Member ZIP Code]=b.zip3
	  and a.[Claim Type]=b.ctype
	  where( b.home_flag IN ('NON',  'MP')) 
	  and b.pdr_product_id not in (select distinct PDR_Product_ID from Reference.ref_tpv_factor_development   where TPV_nonTPV = 'Yes')
	  and [Benefit/Contract Status Indicator] in ('OX', 'OC')
	

 GROUP BY  [CHP Carrier ID]
	,[PDR Product ID]
	,[Organization Name]
	,[Network Identifier] 
	,[Service Period]
	,[3 Digit Member ZIP Code]
	,[Product Indicator] 
	,[Gender]
	,[Age Bracket] 
	,[Duration Bracket] 
	,[Plan Benefit Value - IC]
	,[Plan Benefit Value - ALL]
	,[High Cost Claimant]
	,[Arrangement/Group Size Indicator] 
	,[Claim Type] 
	,[Outpatient Type of Service]
	,[COVID-Related Indicator]
	   )b
on a.[CHP Carrier ID]=b.[CHP Carrier ID]
and a.[PDR Product ID]=b.[PDR Product ID]
and a.[3 Digit Member ZIP Code]=b.[3 Digit Member ZIP Code]
and a.[Arrangement/Group Size Indicator]=b.[Arrangement/Group Size Indicator]
and a.[Claim Type]=b.[Claim Type]
and a.Gender=b.Gender
and a.[Age Bracket]=b.[Age Bracket]
and a.[Duration Bracket]=b.[Duration Bracket]
and a.[Plan Benefit Value - IC]=b.[Plan Benefit Value - IC]
and a.[Plan Benefit Value - ALL]=b.[Plan Benefit Value - ALL]
and a.[High Cost Claimant]=b.[High Cost Claimant]
and a.[Outpatient Type of Service]=b.[Outpatient Type of Service]
and a.[COVID-Related Indicator]=b.[COVID-Related Indicator]

SELECT  * from #a where round(act_diff,0)<>0
       

select 'Multiplan subset' as [File_Name]
   ,sum([Actual Eligible Billed $ - Annual])   as billed
	,sum([Adjusted Eligible Billed $ - Annual])    as Adj_billed
from dbo.[Multiplan_change_final]
union all
select 'Original' as [File_Name]
        ,sum([Actual Eligible Billed $ - Annual])  as billed
	   ,sum([Adjusted Eligible Billed $ - Annual]) as Adj_billed
FROM OUTPUT_STD.[UDS PMPM - Claims Data_Multiplan] a
	   JOIN  analytics.OON_factors b
	  on  a.[PDR Product ID] =b.pdr_product_id
	  and a.[3 Digit Member ZIP Code]=b.zip3
	  and a.[Claim Type]=b.ctype
	  where( b.home_flag IN ('NON',  'MP')) 
	  and b.pdr_product_id not in (select distinct PDR_Product_ID from Reference.ref_tpv_factor_development   where TPV_nonTPV = 'Yes') 
	  and  [Benefit/Contract Status Indicator] in ('OX', 'OC')


/*****************************************************************************************DELETING OLD ORIGINAL AND INSERTING NEW Multiplan DATA**********************************************************************************************************************************************/
DROP TABLE IF EXISTS [dbo].[Multiplan_Deleted] 
SELECT TOP 0* INTO [dbo].[Multiplan_Deleted] 
FROM OUTPUT_STD.[UDS PMPM - Claims Data_Multiplan] a

DELETE a
OUTPUT DELETED.* 
INTO [dbo].[Multiplan_Deleted] --130,683
FROM OUTPUT_STD.[UDS PMPM - Claims Data_Multiplan] a
	   JOIN  analytics.OON_factors b
	  on  a.[PDR Product ID] =b.pdr_product_id
	  and a.[3 Digit Member ZIP Code]=b.zip3
	  and a.[Claim Type]=b.ctype
	  where( b.home_flag IN ('NON',  'MP')) 
	  and b.pdr_product_id not in (select distinct PDR_Product_ID from Reference.ref_tpv_factor_development   where TPV_nonTPV = 'Yes') 
	  and  [Benefit/Contract Status Indicator] in ('OX', 'OC')


/****Test 2****/
select 'multiplan subset' as [File_Name]
        ,sum([Actual Eligible Billed $ - Annual]) as billed
	   ,sum([Adjusted Eligible Billed $ - Annual]) as Adj_billed
from  dbo.[Multiplan_change_final] 
UNION ALL
select 'DELETED' as [File_Name]
      ,sum([Actual Eligible Billed $ - Annual]) as billed
	   ,sum([Adjusted Eligible Billed $ - Annual]) as Adj_billed
from  [dbo].[Multiplan_Deleted]


/************************************************************************************************************************************************/
INSERT  INTO OUTPUT_STD.[UDS PMPM - Claims Data_Multiplan] 
SELECT * FROM  [dbo].[Multiplan_change_final]

select 'NonMultiplan' as [File_Name]
       ,sum([Actual Eligible Billed $ - Annual]) as AC_billed
	   ,sum([Adjusted Eligible Billed $ - Annual]) as Adj_billed
from  OUTPUT_STD.[UDS PMPM - Claims Data_Multiplan]  --NEW VALUES
UNION ALL
select 'Base Data' as [File_Name]
      ,sum([Actual Eligible Billed $ - Annual]) as AC_billed
	   ,sum([Adjusted Eligible Billed $ - Annual]) as Adj_billed
from  OUTPUT_STD.[UDS PMPM - Claims Data] 


/***keep in  the actual fields the same as in the base data.***************************************************************************************/
 update a
set  a.[Actual Eligible Billed $ - Annual]=b.[Actual Eligible Billed $ - Annual]
     ,a.[Actual Eligible Billed $ - Q1]=b.[Actual Eligible Billed $ - Q1]
	 ,a.[Actual Eligible Billed $ - Q2]=b.[Actual Eligible Billed $ - Q2]
	 ,a.[Actual Eligible Billed $ - Q3]=b.[Actual Eligible Billed $ - Q3]
	 ,a.[Actual Eligible Billed $ - Q4]=b.[Actual Eligible Billed $ - Q4]
     ,a.[Actual Allowed $ - Annual]=b.[Actual Allowed $ - Annual]
	 ,a.[Actual Allowed $ - Q1]=b.[Actual Allowed $ - Q1]
	 ,a.[Actual Allowed $ - Q2]=b.[Actual Allowed $ - Q2]
	 ,a.[Actual Allowed $ - Q3]=b.[Actual Allowed $ - Q3]
	 ,a.[Actual Allowed $ - Q4]=b.[Actual Allowed $ - Q4]
	 ,a.[Actual Paid $ - Annual]=b.[Actual Paid $ - Annual]
	 ,a.[Actual Paid $ - Q1]=b.[Actual Paid $ - Q1]
	 ,a.[Actual Paid $ - Q2]=b.[Actual Paid $ - Q2]
	 ,a.[Actual Paid $ - Q3]=b.[Actual Paid $ - Q3]
	 ,a.[Actual Paid $ - Q4]=b.[Actual Paid $ - Q4]
	 ,a.[Actual Negotiated Savings $ - Annual]=b.[Actual Negotiated Savings $ - Annual]
	 ,a.[Actual Negotiated Savings $ - Q1] =b.[Actual Negotiated Savings $ - Q1]
     ,a.[Actual Negotiated Savings $ - Q2] =b.[Actual Negotiated Savings $ - Q2]
	 ,a.[Actual Negotiated Savings $ - Q3] =b.[Actual Negotiated Savings $ - Q3]
	 ,a.[Actual Negotiated Savings $ - Q4] =b.[Actual Negotiated Savings $ - Q4]
	 ,a.[Actual Reasonable and Customary Cutback $ - Annual]=b.[Actual Reasonable and Customary Cutback $ - Annual]
	 ,a.[Actual Reasonable and Customary Cutback $ - Q1]=b.[Actual Reasonable and Customary Cutback $ - Q1]
	 ,a.[Actual Reasonable and Customary Cutback $ - Q2]=b.[Actual Reasonable and Customary Cutback $ - Q2]
	 ,a.[Actual Reasonable and Customary Cutback $ - Q3]=b.[Actual Reasonable and Customary Cutback $ - Q3]
	 ,a.[Actual Reasonable and Customary Cutback $ - Q4]=b.[Actual Reasonable and Customary Cutback $ - Q4]
	 ,a.[Actual Number of Admissions]=b.[Actual Number of Admissions]
	 ,a.[Actual Count of Utilization]=isnull(b.[Actual Count of Utilization],0)
from  OUTPUT_STD.[UDS PMPM - Claims Data_Multiplan] a 
 left join    OUTPUT_STD.[UDS PMPM - Claims Data]  b 
on  a.[CHP Carrier ID]=b.[CHP Carrier ID]
and a.[PDR Product ID]=b.[PDR Product ID]
and a.[3 Digit Member ZIP Code]=b.[3 Digit Member ZIP Code]
and a.[Arrangement/Group Size Indicator]=b.[Arrangement/Group Size Indicator]
and a.[Claim Type]=b.[Claim Type]
and a.Gender=b.Gender
and a.[Age Bracket]=b.[Age Bracket]
and a.[Duration Bracket]=b.[Duration Bracket]
and a.[Plan Benefit Value - IC]=b.[Plan Benefit Value - IC]
and a.[Plan Benefit Value - ALL]=b.[Plan Benefit Value - ALL]
and a.[High Cost Claimant]=b.[High Cost Claimant]
and a.[Benefit/Contract Status Indicator]=b.[Benefit/Contract Status Indicator]
and isnull(a.[Outpatient Type of Service],'')=isnull(b.[Outpatient Type of Service],'')
and a.[COVID-Related Indicator]=b.[COVID-Related Indicator]



-------------------------TESTING--------------------------------------------------------------------------------------------
select 'Multiplan' as [File_Name]
      -- ,[Benefit/Contract Status Indicator]
        ,sum([Actual Eligible Billed $ - Annual]) as AC_billed
	   ,sum([Adjusted Eligible Billed $ - Annual]) as Adj_billed
	   ,sum([Actual Number of Admissions]) as ac_admit
	   ,sum([Adjusted Number of Admissions]) as aj_admit
	   ,sum([Actual Count of Utilization])   as ac_util
	   ,sum([Adjusted Count of Utilization] )as aj_util
	   ,sum([Actual Allowed $ - Annual]) as ac_allowed
	   ,sum([Adjusted Allowed $ - Annual]) as adj_allowed
	   ,sum([Actual Reasonable and Customary Cutback $ - Annual]) as ac_rnc
	   ,sum([Adjusted Reasonable and Customary Cutback $ - Annual]) as adj_rnc
	   ,sum([Actual Negotiated Savings $ - Annual]) as ac_savings
	   ,sum([Adjusted Negotiated Savings $ - Annual]) as adj_savings
	   ,sum([Actual Paid $ - Annual]) as ac_paid
	   ,sum([Adjusted Paid $ - Annual]) as adj_paid
from  OUTPUT_STD.[UDS PMPM - Claims Data_Multiplan]
--group by [Benefit/Contract Status Indicator]
UNION ALL
select 'Base Data' as [File_Name]
     -- ,[Benefit/Contract Status Indicator]
        ,sum([Actual Eligible Billed $ - Annual]) as AC_billed
	   ,sum([Adjusted Eligible Billed $ - Annual]) as Adj_billed
	   ,sum([Actual Number of Admissions]) as ac_admit
	   ,sum([Adjusted Number of Admissions]) as aj_admit
	   ,sum([Actual Count of Utilization])   as ac_util
	   ,sum([Adjusted Count of Utilization] )as aj_util
	   ,sum([Actual Allowed $ - Annual]) as ac_allowed
	   ,sum([Adjusted Allowed $ - Annual]) as adj_allowed
	   ,sum([Actual Reasonable and Customary Cutback $ - Annual]) as ac_rnc
	   ,sum([Adjusted Reasonable and Customary Cutback $ - Annual]) as adj_rnc
	   ,sum([Actual Negotiated Savings $ - Annual]) as ac_savings
	   ,sum([Adjusted Negotiated Savings $ - Annual]) as adj_savings
	   ,sum([Actual Paid $ - Annual]) as ac_paid
	   ,sum([Adjusted Paid $ - Annual]) as adj_paid
from  OUTPUT_STD.[UDS PMPM - Claims Data] 
--group by [Benefit/Contract Status Indicator]
order by 2


select *  from  OUTPUT_STD.[UDS PMPM - Claims Data_Multiplan] a
where [Actual Eligible Billed $ - Annual] is null


update a
set [Actual Eligible Billed $ - Annual]=0.00
    ,[Actual Eligible Billed $ - Q1]=0.00
    ,[Actual Eligible Billed $ - Q2]=0.00
    ,[Actual Eligible Billed $ - Q3]=0.00
    ,[Actual Eligible Billed $ - Q4]=0.00
    ,[Actual Allowed $ - Annual]=0.00
	,[Actual Allowed $ - Q1]=0.00
	,[Actual Allowed $ - Q2]=0.00
	,[Actual Allowed $ - Q3]=0.00
	,[Actual Allowed $ - Q4]=0.00
	,[Actual Paid $ - Annual]=0.00
	,[Actual Paid $ - Q1]=0.00
	,[Actual Paid $ - Q2]=0.00
	,[Actual Paid $ - Q3]=0.00
	,[Actual Paid $ - Q4]=0.00
	,[Actual Negotiated Savings $ - Annual]=0.00
	,[Actual Negotiated Savings $ - Q1]=0.00
	,[Actual Negotiated Savings $ - Q2]=0.00
	,[Actual Negotiated Savings $ - Q3]=0.00
	,[Actual Negotiated Savings $ - Q4]=0.00
	--,[Actual Number of Admissions]=0.00
	,[Actual Reasonable and Customary Cutback $ - Annual]=0.00
	,[Actual Reasonable and Customary Cutback $ - Q1]=0.00
	,[Actual Reasonable and Customary Cutback $ - Q2]=0.00
	,[Actual Reasonable and Customary Cutback $ - Q3]=0.00
	,[Actual Reasonable and Customary Cutback $ - Q4]=0.00
from  OUTPUT_STD.[UDS PMPM - Claims Data_Multiplan] a
where [Actual Eligible Billed $ - Annual] is null


drop table if exists dbo.[Multiplan_change_final]
drop table if exists [dbo].[Multiplan_Deleted]

select * from  OUTPUT_STD.[UDS PMPM - Claims Data_Multiplan] a
WHERE [Claim Type]='I'
AND [Actual Number of Admissions] is null
and [Actual Eligible Billed $ - Annual]=0


update OUTPUT_STD.[UDS PMPM - Claims Data_Multiplan]
set [Actual Number of Admissions]=0
where [Claim Type]='I'
and [Actual Number of Admissions] is null
and [Actual Eligible Billed $ - Annual]=0



select * from  OUTPUT_STD.[UDS PMPM - Claims Data_Multiplan] a
where [Claim Type]='I'
and [Adjusted Number of Admissions] =0
and [Adjusted Eligible Billed $ - Annual]>0
and [Benefit/Contract Status Indicator]  in ('ox','oc')








 END
GO
/****** Object:  StoredProcedure [dbo].[sp_uds_7_OON_NONMULTIPLAN]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Tola Kalejaiye
-- Create date: 12/02/2019
-- Description:	create a non-mulitplan version from the OX/OC
-- =============================================
-- =============================================


CREATE PROCEDURE  [dbo].[sp_uds_7_OON_NONMULTIPLAN]

AS
BEGIN


/***********************************STEP 1. Create UDS Mulitplan table by copying data from the original table********************************************************************************************/
DROP TABLE IF EXISTS OUTPUT_STD.[UDS PMPM - Claims Data_NonMultiplan]
SELECT * INTO OUTPUT_STD.[UDS PMPM - Claims Data_NonMultiplan] 
    FROM OUTPUT_STD.[UDS PMPM - Claims Data]

/*********************************STEP 2. Create temp table to aggregate data for those plans in the reference data that have been flagged as non-mulitplan and create multiplan data *******************************************/

 DROP TABLE IF EXISTS #BASE_NonMultiplan_change_step2
 CREATE TABLE  #BASE_NonMultiplan_change_step2
 (	[CHP Carrier ID] [varchar](10) NOT NULL,
	[PDR Product ID] [varchar](10) NOT NULL,
	[Organization Name] [varchar](25) NULL,
	[Network Identifier] [varchar](255) NOT NULL,
	[Service Period] [varchar](20) NOT NULL,
	[3 Digit Member ZIP Code] [varchar](3) NOT NULL,
	[Product Indicator] [varchar](10) NOT NULL,
	[Gender] [varchar](1) NOT NULL,
	[Age Bracket] [varchar](10) NOT NULL,
	[Duration Bracket] [varchar](10) NOT NULL,
	[Plan Benefit Value - IC] [varchar](25) NOT NULL,
	[Plan Benefit Value - ALL] [varchar](25) NOT NULL,
	[High Cost Claimant] [varchar](1) NOT NULL,
	[Arrangement/Group Size Indicator] [varchar](2) NOT NULL,
	[Benefit/Contract Status Indicator] [varchar](10) NOT NULL,
	[Claim Type] [varchar](1) NOT NULL,
	[Outpatient Type of Service] [varchar](10) NULL,
	[COVID-Related Indicator] [varchar](2) NOT NULL,
	[Actual_Billed] [decimal] (38,6) NULL,
	[Actual_Billed_q1] [decimal] (38,6) NULL,
	[Actual_Billed_q2] [decimal] (38,6) NULL,
	[Actual_Billed_q3] [decimal] (38,6) NULL,
	[Actual_Billed_q4] [decimal] (38,6) NULL,
	[Adjusted_Billed] [decimal] (38,6)  NULL,
	[Adjusted_Billed_q1]  [decimal] (38,6) NULL,
	[Adjusted_Billed_q2]  [decimal] (38,6) NULL,
	[Adjusted_Billed_q3]  [decimal] (38,6) NULL,
	[Adjusted_Billed_q4] [decimal] (38,6) NULL,
	[Actual_Admit] [Decimal] (38,6) NULL,
	[Actual_Utilization] [Decimal] (38,6)  NULL,
	[Adjusted_Admit] [Decimal] (38,6) NULL,
	[Adjusted_Utilization] [Decimal] (38,6)  NULL,
	[Actual AV Value] [Decimal] (38,6) NULL,
    [Adjusted AV Value] [Decimal] (38,6) NULL,
	Discount [Decimal] (38,6) NULL
	)

	 
INSERT INTO #BASE_NonMultiplan_change_step2 with (Tablock)--215,346 rows
SELECT [CHP Carrier ID]
	,[PDR Product ID]
	,[Organization Name]
	,[Network Identifier] 
	,[Service Period]
	,[3 Digit Member ZIP Code]
	,[Product Indicator] 
	,[Gender]
	,[Age Bracket] 
	,[Duration Bracket] 
	,[Plan Benefit Value - IC]
	,[Plan Benefit Value - ALL]
	,[High Cost Claimant]
	,[Arrangement/Group Size Indicator] 
	,[Benefit/Contract Status Indicator] 
	,[Claim Type] 
	,[Outpatient Type of Service]
	,[COVID-Related Indicator]
    ,cast([Actual Eligible Billed $]  *b.nmp_oc_pct  as money)        as Actual_Billed
	,cast([Actual Eligible Billed $ - Q1]  *b.nmp_oc_pct  as money)   as Actual_Billed_q1
	,cast([Actual Eligible Billed $ - Q2]  *b.nmp_oc_pct  as money)   as Actual_Billed_q2
	,cast([Actual Eligible Billed $ - Q3]  *b.nmp_oc_pct  as money)   as Actual_Billed_q3
	,cast([Actual Eligible Billed $ - Q4]  *b.nmp_oc_pct  as money)   as Actual_Billed_q4

	,cast([Adjusted Eligible Billed $]*b.nmp_oc_pct  as money)        as Adjusted_Billed
	,cast([Adjusted Eligible Billed $ - Q1]  *b.nmp_oc_pct  as money)   as Adjusted_Billed_q1
	,cast([Adjusted Eligible Billed $ - Q2]  *b.nmp_oc_pct  as money)   as Adjusted_Billed_q2
	,cast([Adjusted Eligible Billed $ - Q3]  *b.nmp_oc_pct  as money)   as Adjusted_Billed_q3
	,cast([Adjusted Eligible Billed $ - Q4]  *b.nmp_oc_pct  as money)   as Adjusted_Billed_q4

	,[Actual Number of Admissions] * b.nmp_oc_admit_pct           as Actual_admit
	,[Actual Count of Utilization] * b.nmp_oc_utilization_pct     as Actual_Utilization
	,case when        ([Adjusted Number of Admissions] * b.nmp_oc_admit_pct) <0.5 
	      then floor  ([Adjusted Number of Admissions] * b.nmp_oc_admit_pct) 
		  when        ([Adjusted Number of Admissions] * b.nmp_oc_admit_pct) between 0.5 and 0.9 
	      then ceiling([Adjusted Number of Admissions] * b.nmp_oc_admit_pct)
		  else round  ([Adjusted Number of Admissions] * b.nmp_oc_admit_pct,0) end as Adjusted_admit
	,case when        ([Adjusted Count of Utilization] * b.nmp_oc_utilization_pct) <0.5 
	      then floor  ([Adjusted Count of Utilization] * b.nmp_oc_utilization_pct)
		  when        ([Adjusted Count of Utilization] * b.nmp_oc_utilization_pct) between 0.5 and 0.9 
	      then ceiling([Adjusted Count of Utilization] * b.nmp_oc_utilization_pct)
		  else round  ([Adjusted Count of Utilization] * b.nmp_oc_utilization_pct,0) end as Adjusted_utilization
	,[Actual AV Value]
	,[Adjusted AV Value]
	,nmp_oc_disc as discount	

FROM(
SELECT[CHP Carrier ID]
	,[PDR Product ID]
	,[Organization Name]
	,[Network Identifier] 
	,[Service Period]
	,[3 Digit Member ZIP Code]
	,[Product Indicator] 
	,[Gender]
	,[Age Bracket] 
	,[Duration Bracket] 
	,[Plan Benefit Value - IC]
	,[Plan Benefit Value - ALL]
	,[High Cost Claimant]
	,[Arrangement/Group Size Indicator] 
	,'OC' as [Benefit/Contract Status Indicator] 
	,[Claim Type] 
	,[Outpatient Type of Service]
	,[COVID-Related Indicator]
	,sum([Actual Eligible Billed $ - Annual])  as [Actual Eligible Billed $]
	,sum([Actual Eligible Billed $ - Q1])      as [Actual Eligible Billed $ - Q1]
	,sum([Actual Eligible Billed $ - Q2])      as [Actual Eligible Billed $ - Q2]
	,sum([Actual Eligible Billed $ - Q3])      as [Actual Eligible Billed $ - Q3]
	,sum([Actual Eligible Billed $ - Q4])      as [Actual Eligible Billed $ - Q4]
    ,sum([Adjusted Eligible Billed $ - Annual]) as [Adjusted Eligible Billed $]
	,sum([Adjusted Eligible Billed $ - Q1])     as [Adjusted Eligible Billed $ - Q1]
	,sum([Adjusted Eligible Billed $ - Q2])     as [Adjusted Eligible Billed $ - Q2]
	,sum([Adjusted Eligible Billed $ - Q3])     as [Adjusted Eligible Billed $ - Q3]
	,sum([Adjusted Eligible Billed $ - Q4])     as [Adjusted Eligible Billed $ - Q4]
	,sum([Actual Number of Admissions])   as [Actual Number of Admissions]
	,sum([Actual Count of Utilization])   as [Actual Count of Utilization]
	,sum([Adjusted Number of Admissions]) as [Adjusted Number of Admissions]
	,sum([Adjusted Count of Utilization]) as [Adjusted Count of Utilization]
    ,isnull(sum([Actual Paid $ - Annual])/nullif(sum([Actual Allowed $ - Annual]),0),0)      as [Actual AV Value]
	,isnull(sum([Adjusted Paid $ - Annual])/nullif(sum([Adjusted Allowed $ - Annual]),0),0)  as [Adjusted AV Value]
	FROM OUTPUT_STD.[UDS PMPM - Claims Data_NonMultiplan]
	    where [Benefit/Contract Status Indicator] in ('OX','OC')

	GROUP BY  [CHP Carrier ID]
	,[PDR Product ID]
	,[Organization Name]
	,[Network Identifier] 
	,[Service Period]
	,[3 Digit Member ZIP Code]
	,[Product Indicator] 
	,[Gender]
	,[Age Bracket] 
	,[Duration Bracket] 
	,[Plan Benefit Value - IC]
	,[Plan Benefit Value - ALL]
	,[High Cost Claimant]
	,[Arrangement/Group Size Indicator] 
	,[Claim Type] 
	,[Outpatient Type of Service]
	,[COVID-Related Indicator]) a
JOIN xuds_pmpm_2020CY.analytics.OON_NMP_factors b
	  on  a.[PDR Product ID]  =b.pdr_product_id
	  and a.[3 Digit Member ZIP Code]=b.zip3
	  and a.[Claim Type]=b.ctype
	  where b.mp_home ='Y'
	
UNION ALL

SELECT [CHP Carrier ID]
	,[PDR Product ID]
	,[Organization Name]
	,[Network Identifier] 
	,[Service Period]
	,[3 Digit Member ZIP Code]
	,[Product Indicator] 
	,[Gender]
	,[Age Bracket] 
	,[Duration Bracket] 
	,[Plan Benefit Value - IC]
	,[Plan Benefit Value - ALL]
	,[High Cost Claimant]
	,[Arrangement/Group Size Indicator] 
	,[Benefit/Contract Status Indicator] 
	,[Claim Type] 
	,[Outpatient Type of Service]
   ,[COVID-Related Indicator]
    ,cast([Actual Eligible Billed $]  *b.nmp_ox_pct  as money)        as Actual_Billed
	,cast([Actual Eligible Billed $ - Q1]  *b.nmp_ox_pct  as money)   as Actual_Billed_q1
	,cast([Actual Eligible Billed $ - Q2]  *b.nmp_ox_pct  as money)   as Actual_Billed_q2
	,cast([Actual Eligible Billed $ - Q3]  *b.nmp_ox_pct  as money)   as Actual_Billed_q3
	,cast([Actual Eligible Billed $ - Q4]  *b.nmp_ox_pct  as money)   as Actual_Billed_q4
	,cast([Adjusted Eligible Billed $]*b.nmp_ox_pct  as money)        as Adjusted_Billed
	,cast([Adjusted Eligible Billed $ - Q1]  *b.nmp_ox_pct  as money)   as Adjusted_Billed_q1
	,cast([Adjusted Eligible Billed $ - Q2]  *b.nmp_ox_pct  as money)   as Adjusted_Billed_q2
	,cast([Adjusted Eligible Billed $ - Q3]  *b.nmp_ox_pct  as money)   as Adjusted_Billed_q3
	,cast([Adjusted Eligible Billed $ - Q4]  *b.nmp_ox_pct  as money)   as Adjusted_Billed_q4
	,[Actual Number of Admissions] * b.nmp_ox_admit_pct           as Actual_admit
	,[Actual Count of Utilization] * b.nmp_ox_utilization_pct     as Actual_Utilization
	,case when        ([Adjusted Number of Admissions] * b.nmp_ox_admit_pct) <0.5 
	      then floor  ([Adjusted Number of Admissions] * b.nmp_ox_admit_pct) 
		  when        ([Adjusted Number of Admissions] * b.nmp_ox_admit_pct) between 0.5 and 0.9 
	      then ceiling([Adjusted Number of Admissions] * b.nmp_ox_admit_pct)
		  else round  ([Adjusted Number of Admissions] * b.nmp_ox_admit_pct,0) end as Adjusted_admit
	,case when        ([Adjusted Count of Utilization] * b.nmp_ox_utilization_pct) <0.5 
	      then floor  ([Adjusted Count of Utilization] * b.nmp_ox_utilization_pct)
		  when        ([Adjusted Count of Utilization] * b.nmp_ox_utilization_pct) between 0.5 and 0.9 
	      then ceiling([Adjusted Count of Utilization] * b.nmp_ox_utilization_pct)
		  else round  ([Adjusted Count of Utilization] * b.nmp_ox_utilization_pct,0) end as Adjusted_utilization
	,[Actual AV Value]
	,[Adjusted AV Value]
	,nmp_ox_disc as discount	

FROM(
SELECT[CHP Carrier ID]
	,[PDR Product ID]
	,[Organization Name]
	,[Network Identifier] 
	,[Service Period]
	,[3 Digit Member ZIP Code]
	,[Product Indicator] 
	,[Gender]
	,[Age Bracket] 
	,[Duration Bracket] 
	,[Plan Benefit Value - IC]
	,[Plan Benefit Value - ALL]
	,[High Cost Claimant]
	,[Arrangement/Group Size Indicator] 
	,'OX' as [Benefit/Contract Status Indicator] 
	,[Claim Type] 
	,[Outpatient Type of Service]
	,[COVID-Related Indicator]
	,sum([Actual Eligible Billed $ - Annual])  as [Actual Eligible Billed $]
	,sum([Actual Eligible Billed $ - Q1])      as [Actual Eligible Billed $ - Q1]
	,sum([Actual Eligible Billed $ - Q2])      as [Actual Eligible Billed $ - Q2]
	,sum([Actual Eligible Billed $ - Q3])      as [Actual Eligible Billed $ - Q3]
	,sum([Actual Eligible Billed $ - Q4])      as [Actual Eligible Billed $ - Q4]
    ,sum([Adjusted Eligible Billed $ - Annual]) as [Adjusted Eligible Billed $]
	,sum([Adjusted Eligible Billed $ - Q1])     as [Adjusted Eligible Billed $ - Q1]
	,sum([Adjusted Eligible Billed $ - Q2])     as [Adjusted Eligible Billed $ - Q2]
	,sum([Adjusted Eligible Billed $ - Q3])     as [Adjusted Eligible Billed $ - Q3]
	,sum([Adjusted Eligible Billed $ - Q4])     as [Adjusted Eligible Billed $ - Q4]
	,sum([Actual Number of Admissions])   as [Actual Number of Admissions]
	,sum([Actual Count of Utilization])   as [Actual Count of Utilization]
	,sum([Adjusted Number of Admissions]) as [Adjusted Number of Admissions]
	,sum([Adjusted Count of Utilization]) as [Adjusted Count of Utilization]
    ,isnull(sum([Actual Paid $ - Annual])/nullif(sum([Actual Allowed $ - Annual]),0),0)      as [Actual AV Value]
	,isnull(sum([Adjusted Paid $ - Annual])/nullif(sum([Adjusted Allowed $ - Annual]),0),0)  as [Adjusted AV Value]
	FROM OUTPUT_STD.[UDS PMPM - Claims Data_NonMultiplan]
	where [Benefit/Contract Status Indicator] in ('OX','OC')

	GROUP BY  [CHP Carrier ID]
	,[PDR Product ID]
	,[Organization Name]
	,[Network Identifier] 
	,[Service Period]
	,[3 Digit Member ZIP Code]
	,[Product Indicator] 
	,[Gender]
	,[Age Bracket] 
	,[Duration Bracket] 
	,[Plan Benefit Value - IC]
	,[Plan Benefit Value - ALL]
	,[High Cost Claimant]
	,[Arrangement/Group Size Indicator] 
	,[Claim Type] 
	,[Outpatient Type of Service]
	,[COVID-Related Indicator]) a
JOIN xuds_pmpm_2020CY.analytics.OON_NMP_factors b
	  on  a.[PDR Product ID]  =b.pdr_product_id
	  and a.[3 Digit Member ZIP Code]=b.zip3
	  and a.[Claim Type]=b.ctype
	  where b.mp_home ='Y'
	 


---test to ensure factors is applied to the right products (results should be anthem, bcbs ma, horizon and bs ca)
Select distinct [CHP Carrier ID], [PDR Product ID]   from #BASE_NonMultiplan_change_step2 order by [PDR Product ID]
Select top 100 *  from #BASE_NonMultiplan_change_step2 --get the billed dollars to have 2 decimal places
select [CHP Carrier ID], [PDR Product ID],sum(actual_billed) from #BASE_NonMultiplan_change_step2 group by [CHP Carrier ID], [PDR Product ID] order by 1,2
select [CHP Carrier ID], [PDR Product ID],sum([Actual Eligible Billed $ - Annual]) from OUTPUT_STD.[UDS PMPM - Claims Data] where [Benefit/Contract Status Indicator] in ('OX','OC') 
and concat([CHP Carrier ID], [PDR Product ID]) in (select distinct concat([CHP Carrier ID], [PDR Product ID])   from #BASE_NonMultiplan_change_step2)
group by [CHP Carrier ID], [PDR Product ID] order by 1,2


 
/******** To keep the table structure of the original base table*********************************************************************/

DROP TABLE IF EXISTS [xUDS_pmpm_2020CY].dbo.[NonMultiplan_change_final]
SELECT TOP 0 *INTO [xUDS_pmpm_2020CY].dbo.[NonMultiplan_change_final]
FROM [xUDS_pmpm_2020CY].OUTPUT_STD.[UDS PMPM - Claims Data]

INSERT INTO [xUDS_pmpm_2020CY].dbo.[NonMultiplan_change_final] with (tablock)--261,366 rows
SELECT	[CHP Carrier ID],
	    [PDR Product ID],
	    [Organization Name],
	    [Network Identifier],
	    [Service Period],
	    [3 Digit Member ZIP Code],
	    [Product Indicator],
	    [Gender],
	    [Age Bracket],
	    [Duration Bracket],
	    [Plan Benefit Value - IC],
	    [Plan Benefit Value - ALL],
	    [High Cost Claimant],
	    [Arrangement/Group Size Indicator],
	    [Benefit/Contract Status Indicator],
	    [Claim Type],
	    [Outpatient Type of Service],
		[COVID-Related Indicator],
	    NULL as [Custom Study Group 1],
	    NULL as [Custom Study Group 2],
	    NULL as [Custom Study Group 3],
	   'AC' as [Actual Data Filler],
	   [Actual Number of Admissions],
	   [Actual Count of Utilization],
	   cast([Actual Eligible Billed $ - Annual] as money) as [Actual Eligible Billed $ - Annual],
	   [Actual Eligible Billed $ - Q1],
	   [Actual Eligible Billed $ - Q2],
	   [Actual Eligible Billed $ - Q3],
	   [Actual Eligible Billed $ - Q4],
	   cast(case when [Benefit/Contract Status Indicator]='oc' then [Actual Eligible Billed $ - Annual]-[Actual Allowed $ - Annual] else 0 end as money) as [Actual Negotiated Savings $ - Annual],
	   cast(case when [Benefit/Contract Status Indicator]='oc' then [Actual Eligible Billed $ - Q1]-[Actual Allowed $ - Q1] else 0 end as money) as [Actual Negotiated Savings $ - Q1],
	   cast(case when [Benefit/Contract Status Indicator]='oc' then [Actual Eligible Billed $ - Q2]-[Actual Allowed $ - Q2] else 0 end as money) as [Actual Negotiated Savings $ - Q2],
	   cast(case when [Benefit/Contract Status Indicator]='oc' then [Actual Eligible Billed $ - Q3]-[Actual Allowed $ - Q3] else 0 end as money) as [Actual Negotiated Savings $ - Q3],
	   cast(case when [Benefit/Contract Status Indicator]='oc' then [Actual Eligible Billed $ - Q4]-[Actual Allowed $ - Q4] else 0 end as money) as [Actual Negotiated Savings $ - Q4],
       [Actual Allowed $ - Annual],
	   [Actual Allowed $ - Q1],
	   [Actual Allowed $ - Q2],
	   [Actual Allowed $ - Q3],
	   [Actual Allowed $ - Q4],
	   cast([Actual AV Value]* [Actual Allowed $ - Annual] as money) as [Actual Paid $ - Annual],
	   cast([Actual AV Value]* [Actual Allowed $ - Q1] as money) as [Actual Paid $ - Q1],
	   cast([Actual AV Value]* [Actual Allowed $ - Q2] as money) as [Actual Paid $ - Q2],
	   cast([Actual AV Value]* [Actual Allowed $ - Q3] as money) as [Actual Paid $ - Q3],
	   cast([Actual AV Value]* [Actual Allowed $ - Q4] as money) as [Actual Paid $ - Q4],
	   cast(case when [Benefit/Contract Status Indicator]='ox' then [Actual Eligible Billed $ - Annual]-[Actual Allowed $ - Annual] else 0 end as money) as [Adjusted Reasonable and Customary Cutback $ - Annual],
	   cast(case when [Benefit/Contract Status Indicator]='ox' then [Actual Eligible Billed $ - Q1]-[Actual Allowed $ - Q1] else 0 end as money) as [Adjusted Reasonable and Customary Cutback $ - Q1],
	   cast(case when [Benefit/Contract Status Indicator]='ox' then [Actual Eligible Billed $ - Q2]-[Actual Allowed $ - Q2] else 0 end as money) as [Adjusted Reasonable and Customary Cutback $ - Q2],
	   cast(case when [Benefit/Contract Status Indicator]='ox' then [Actual Eligible Billed $ - Q3]-[Actual Allowed $ - Q3] else 0 end as money) as [Adjusted Reasonable and Customary Cutback $ - Q3],
	   cast(case when [Benefit/Contract Status Indicator]='ox' then [Actual Eligible Billed $ - Q4]-[Actual Allowed $ - Q4] else 0 end as money) as [Adjusted Reasonable and Customary Cutback $ - Q4],
	   'N' as AdjCopyofActual,
	   'AD' as [Adjusted Data Filler],
	   [Adjusted Number of Admissions],
	   [Adjusted Count of Utilization],
	   [Adjusted Eligible Billed $ - Annual],
	   [Adjusted Eligible Billed $ - Q1],
	   [Adjusted Eligible Billed $ - Q2],
	   [Adjusted Eligible Billed $ - Q3],
	   [Adjusted Eligible Billed $ - Q4],
	   cast(case when [Benefit/Contract Status Indicator]='oc' then [Adjusted Eligible Billed $ - Annual]-[Adjusted Allowed $ - Annual] else 0 end as money) as [Adjusted Negotiated Savings $ - Annual],
	   cast(case when [Benefit/Contract Status Indicator]='oc' then [Adjusted Eligible Billed $ - Q1]-[Adjusted Allowed $ - Q1] else 0 end as money) as [Adjusted Negotiated Savings $ - Q1],
	   cast(case when [Benefit/Contract Status Indicator]='oc' then [Adjusted Eligible Billed $ - Q2]-[Adjusted Allowed $ - Q2] else 0 end as money) as [Adjusted Negotiated Savings $ - Q2],
	   cast(case when [Benefit/Contract Status Indicator]='oc' then [Adjusted Eligible Billed $ - Q3]-[Adjusted Allowed $ - Q3] else 0 end as money) as [Adjusted Negotiated Savings $ - Q3],
	   cast(case when [Benefit/Contract Status Indicator]='oc' then [Adjusted Eligible Billed $ - Q4]-[Adjusted Allowed $ - Q4] else 0 end as money) as [Adjusted Negotiated Savings $ - Q4],
       [Adjusted Allowed $ - Annual],
	   [Adjusted Allowed $ - Q1],
	   [Adjusted Allowed $ - Q2],
	   [Adjusted Allowed $ - Q3],
	   [Adjusted Allowed $ - Q4],
	   cast([Adjusted AV Value]* [Adjusted Allowed $ - Annual] as money) as [Adjusted Paid $ - Annual],
	   cast([Adjusted AV Value]* [Adjusted Allowed $ - Q1] as money) as [Adjusted Paid $ - Q1],
	   cast([Adjusted AV Value]* [Adjusted Allowed $ - Q2] as money) as [Adjusted Paid $ - Q2],
	   cast([Adjusted AV Value]* [Adjusted Allowed $ - Q3] as money) as [Adjusted Paid $ - Q3],
	   cast([Adjusted AV Value]* [Adjusted Allowed $ - Q4] as money) as [Adjusted Paid $ - Q4],
	   cast(case when [Benefit/Contract Status Indicator]='ox' then [Adjusted Eligible Billed $ - Annual]-[Adjusted Allowed $ - Annual] else 0 end as money) as [Adjusted Reasonable and Customary Cutback $ - Annual],
	   cast(case when [Benefit/Contract Status Indicator]='ox' then [Adjusted Eligible Billed $ - Q1]-[Adjusted Allowed $ - Q1] else 0 end as money) as [Adjusted Reasonable and Customary Cutback $ - Q1],
	   cast(case when [Benefit/Contract Status Indicator]='ox' then [Adjusted Eligible Billed $ - Q2]-[Adjusted Allowed $ - Q2] else 0 end as money) as [Adjusted Reasonable and Customary Cutback $ - Q2],
	   cast(case when [Benefit/Contract Status Indicator]='ox' then [Adjusted Eligible Billed $ - Q3]-[Adjusted Allowed $ - Q3] else 0 end as money) as [Adjusted Reasonable and Customary Cutback $ - Q3],
	   cast(case when [Benefit/Contract Status Indicator]='ox' then [Adjusted Eligible Billed $ - Q4]-[Adjusted Allowed $ - Q4] else 0 end as money) as [Adjusted Reasonable and Customary Cutback $ - Q4]
	   
	   

FROM
(SELECT [CHP Carrier ID]
	,[PDR Product ID]
	,[Organization Name]
	,[Network Identifier] 
	,[Service Period]
	,[3 Digit Member ZIP Code]
	,[Product Indicator] 
	,[Gender]
	,[Age Bracket] 
	,[Duration Bracket] 
	,[Plan Benefit Value - IC]
	,[Plan Benefit Value - ALL]
	,[High Cost Claimant]
	,[Arrangement/Group Size Indicator] 
	,[Benefit/Contract Status Indicator] 
	,[Claim Type] 
	,[Outpatient Type of Service]
	,[COVID-Related Indicator]

	,actual_billed                                      as [Actual Eligible Billed $ - Annual]
	,Actual_Billed_q1									as [Actual Eligible Billed $ - Q1]
	,Actual_Billed_q2									as [Actual Eligible Billed $ - Q2]
	,Actual_Billed_q3									as [Actual Eligible Billed $ - Q3]
	,Actual_Billed_q4									as [Actual Eligible Billed $ - Q4]

	,adjusted_billed                                    as [Adjusted Eligible Billed $ - Annual]
	,Adjusted_Billed_q1                                 as [Adjusted Eligible Billed $ - Q1]
	,Adjusted_Billed_q2                                 as [Adjusted Eligible Billed $ - Q2]
	,Adjusted_Billed_q3                                 as [Adjusted Eligible Billed $ - Q3]
	,Adjusted_Billed_q4                                 as [Adjusted Eligible Billed $ - Q4]

	,cast(Actual_Billed     *(1-discount)as money)    as [Actual Allowed $ - Annual]
	,cast(Actual_Billed_q1  *(1-discount)as money) as [Actual Allowed $ - Q1]
	,cast(Actual_Billed_q2  *(1-discount)as money) as [Actual Allowed $ - Q2]
	,cast(Actual_Billed_q3  *(1-discount)as money) as [Actual Allowed $ - Q3]
	,cast(Actual_Billed_q4  *(1-discount)as money) as [Actual Allowed $ - Q4]

    ,cast(Adjusted_billed*(1-discount)as money) as [Adjusted Allowed $ - Annual]
	,cast(Adjusted_Billed_q1  *(1-discount)as money) as [Adjusted Allowed $ - Q1]
	,cast(Adjusted_Billed_q2  *(1-discount)as money) as [Adjusted Allowed $ - Q2]
	,cast(Adjusted_Billed_q3  *(1-discount)as money) as [Adjusted Allowed $ - Q3]
	,cast(Adjusted_Billed_q4  *(1-discount)as money) as [Adjusted Allowed $ - Q4]

	,Actual_Admit                                       as [Actual Number of Admissions]
	,Actual_Utilization                                 as [Actual Count of Utilization]
	,cast(Adjusted_Admit as int)                        as [Adjusted Number of Admissions]
	,cast(Adjusted_Utilization as int)                  as [Adjusted Count of Utilization]
	,[Actual AV Value]                                  as [Actual AV Value]
	,[Adjusted AV Value]                                as [Adjusted AV Value]
	
FROM #BASE_NonMultiplan_change_step2
)A
---------------Test to check partition by quarter matches annual figures
SELECT 
--[CHP Carrier ID],
--[PDR Product ID],
sum([Actual Eligible Billed $ - Annual]) as [Actual Eligible Billed $ - Annual]
,sum([Actual Eligible Billed $ - Q1]) as [Actual Eligible Billed $ - Q1]
,sum([Actual Eligible Billed $ - Q2]) as [Actual Eligible Billed $ - Q2]
,sum([Actual Eligible Billed $ - Q3]) as [Actual Eligible Billed $ - Q3]
,sum([Actual Eligible Billed $ - Q4]) as [Actual Eligible Billed $ - Q4]
,sum([Actual Negotiated Savings $ - Annual]) as [Actual Negotiated Savings $ - Annual]
,sum([Actual Negotiated Savings $ - Q1]) as [Actual Negotiated Savings $ - Q1]
,sum([Actual Negotiated Savings $ - Q2]) as [Actual Negotiated Savings $ - Q2]
,sum([Actual Negotiated Savings $ - Q3]) as [Actual Negotiated Savings $ - Q3]
,sum([Actual Negotiated Savings $ - Q4]) as [Actual Negotiated Savings $ - Q4]
,sum([Actual Allowed $ - Annual]) as [Actual Allowed $ - Annual]
,sum([Actual Allowed $ - Q1]) as [Actual Allowed $ - Q1]
,sum([Actual Allowed $ - Q2]) as [Actual Allowed $ - Q2]
,sum([Actual Allowed $ - Q3]) as [Actual Allowed $ - Q3]
,sum([Actual Allowed $ - Q4]) as [Actual Allowed $ - Q4]
,sum([Actual Paid $ - Annual]) as [Actual Paid $ - Annual]
,sum([Actual Paid $ - Q1]) as [Actual Paid $ - Q1]
,sum([Actual Paid $ - Q2]) as [Actual Paid $ - Q2]
,sum([Actual Paid $ - Q3]) as [Actual Paid $ - Q3]
,sum([Actual Paid $ - Q4]) as [Actual Paid $ - Q4]
,sum([Actual Reasonable and Customary Cutback $ - Annual]) as [Actual Reasonable and Customary Cutback $ - Annual]
,sum([Actual Reasonable and Customary Cutback $ - Q1]) as [Actual Reasonable and Customary Cutback $ - Q1]
,sum([Actual Reasonable and Customary Cutback $ - Q2]) as [Actual Reasonable and Customary Cutback $ - Q2]
,sum([Actual Reasonable and Customary Cutback $ - Q3]) as [Actual Reasonable and Customary Cutback $ - Q3]
,sum([Actual Reasonable and Customary Cutback $ - Q4]) as [Actual Reasonable and Customary Cutback $ - Q4]
,sum([Adjusted Eligible Billed $ - Annual]) as [Adjusted Eligible Billed $ - Annual]
,sum([Adjusted Eligible Billed $ - Q1]) as [Adjusted Eligible Billed $ - Q1]
,sum([Adjusted Eligible Billed $ - Q2]) as [Adjusted Eligible Billed $ - Q2]
,sum([Adjusted Eligible Billed $ - Q3]) as [Adjusted Eligible Billed $ - Q3]
,sum([Adjusted Eligible Billed $ - Q4]) as [Adjusted Eligible Billed $ - Q4]
,sum([Adjusted Negotiated Savings $ - Annual]) as [Adjusted Negotiated Savings $ - Annual]
,sum([Adjusted Negotiated Savings $ - Q1]) as [Adjusted Negotiated Savings $ - Q1]
,sum([Adjusted Negotiated Savings $ - Q2]) as [Adjusted Negotiated Savings $ - Q2]
,sum([Adjusted Negotiated Savings $ - Q3]) as [Adjusted Negotiated Savings $ - Q3]
,sum([Adjusted Negotiated Savings $ - Q4]) as [Adjusted Negotiated Savings $ - Q4]
,sum([Adjusted Allowed $ - Annual]) as [Adjusted Allowed $ - Annual]
,sum([Adjusted Allowed $ - Q1]) as [Adjusted Allowed $ - Q1]
,sum([Adjusted Allowed $ - Q2]) as [Adjusted Allowed $ - Q2]
,sum([Adjusted Allowed $ - Q3]) as [Adjusted Allowed $ - Q3]
,sum([Adjusted Allowed $ - Q4]) as [Adjusted Allowed $ - Q4]
,sum([Adjusted Paid $ - Annual]) as [Adjusted Paid $ - Annual]
,sum([Adjusted Paid $ - Q1]) as [Adjusted Paid $ - Q1]
,sum([Adjusted Paid $ - Q2]) as [Adjusted Paid $ - Q2]
,sum([Adjusted Paid $ - Q3]) as [Adjusted Paid $ - Q3]
,sum([Adjusted Paid $ - Q4]) as [Adjusted Paid $ - Q4]
,sum([Adjusted Reasonable and Customary Cutback $ - Annual]) as [Adjusted Reasonable and Customary Cutback $ - Annual]
,sum([Adjusted Reasonable and Customary Cutback $ - Q1]) as [Adjusted Reasonable and Customary Cutback $ - Q1]
,sum([Adjusted Reasonable and Customary Cutback $ - Q2]) as [Adjusted Reasonable and Customary Cutback $ - Q2]
,sum([Adjusted Reasonable and Customary Cutback $ - Q3]) as [Adjusted Reasonable and Customary Cutback $ - Q3]
,sum([Adjusted Reasonable and Customary Cutback $ - Q4]) as [Adjusted Reasonable and Customary Cutback $ - Q4]
  FROM [xUDS_pmpm_2020CY].dbo.[NonMultiplan_change_final]
 -- group by [CHP Carrier ID],
--[PDR Product ID]

--select top 100 * from OUTPUT_STD.[UDS PMPM - Claims Data]
select sum([Actual Eligible Billed $ - Annual]) from [xUDS_pmpm_2020CY].dbo.[NonMultiplan_change_final] 
select sum(actual_billed) from #BASE_NonMultiplan_change_step2
--select top 2 * from #BASE_NonMultiplan_change_step2
/**************************************************TESTING BILLED AMOUNT IN MULTIPLAN VS. ORIGINAL TABLE. Numbers should be the same **************************************************/
DROP TABLE IF EXISTS #A
select a.*, b.[Actual Eligible Billed $] original_billed, a.[Actual Eligible Billed $]-b.[Actual Eligible Billed $] as act_diff
          ,b.[Adjusted Eligible Billed $] original_billed_adj, a.[Adjusted Eligible Billed $]-b.[Adjusted Eligible Billed $] as adj_diff
INTO #A
from (
select    [CHP Carrier ID]
	,[PDR Product ID]
	,[Organization Name]
	,[Network Identifier] 
	,[Service Period]
	,[3 Digit Member ZIP Code]
	,[Product Indicator] 
	,[Gender]
	,[Age Bracket] 
	,[Duration Bracket] 
	,[Plan Benefit Value - IC]
	,[Plan Benefit Value - ALL]
	,[High Cost Claimant]
	,[Arrangement/Group Size Indicator] 
	,[Claim Type] 
	,[Outpatient Type of Service]
	,[COVID-Related Indicator]
    ,sum([Actual Eligible Billed $ - Annual]) as [Actual Eligible Billed $]
	,sum([Adjusted Eligible Billed $ - Annual]) as [Adjusted Eligible Billed $]
from [xUDS_pmpm_2020CY].dbo.[NonMultiplan_change_final]
group by  [CHP Carrier ID]
	,[PDR Product ID]
	,[Organization Name]
	,[Network Identifier] 
	,[Service Period]
	,[3 Digit Member ZIP Code]
	,[Product Indicator] 
	,[Gender]
	,[Age Bracket] 
	,[Duration Bracket] 
	,[Plan Benefit Value - IC]
	,[Plan Benefit Value - ALL]
	,[High Cost Claimant]
	,[Arrangement/Group Size Indicator]  
	,[Claim Type] 
	,[Outpatient Type of Service]
	,[COVID-Related Indicator])a
full join 
( SELECT  
     [CHP Carrier ID]
	,[PDR Product ID]
	,[Organization Name]
	,[Network Identifier] 
	,[Service Period]
	,[3 Digit Member ZIP Code]
	,[Product Indicator] 
	,[Gender]
	,[Age Bracket] 
	,[Duration Bracket] 
	,[Plan Benefit Value - IC]
	,[Plan Benefit Value - ALL]
	,[High Cost Claimant]
	,[Arrangement/Group Size Indicator] 
	,[Claim Type] 
	,[Outpatient Type of Service]
	,[COVID-Related Indicator]
    ,sum([Actual Eligible Billed $ - Annual])   as [Actual Eligible Billed $] 
	,sum([Adjusted Eligible Billed $ - Annual]) as [Adjusted Eligible Billed $]
FROM OUTPUT_STD.[UDS PMPM - Claims Data_NonMultiplan] a
	  JOIN xuds_pmpm_2020CY.analytics.OON_NMP_factors b
	  on  a.[PDR Product ID]  =b.pdr_product_id
	  and a.[3 Digit Member ZIP Code]=b.zip3
	  and a.[Claim Type]=b.ctype
	  where b.mp_home ='Y'
	  and b.pdr_product_id not in (select distinct PDR_Product_ID from Reference.ref_tpv_factor_development  where TPV_nonTPV = 'Yes') 
	  and [Benefit/Contract Status Indicator] in ('OX', 'OC')

 GROUP BY  [CHP Carrier ID]
	,[PDR Product ID]
	,[Organization Name]
	,[Network Identifier] 
	,[Service Period]
	,[3 Digit Member ZIP Code]
	,[Product Indicator] 
	,[Gender]
	,[Age Bracket] 
	,[Duration Bracket] 
	,[Plan Benefit Value - IC]
	,[Plan Benefit Value - ALL]
	,[High Cost Claimant]
	,[Arrangement/Group Size Indicator] 
	,[Claim Type] 
	,[Outpatient Type of Service]
	,[COVID-Related Indicator]
	   )b
on a.[CHP Carrier ID]=b.[CHP Carrier ID]
and a.[PDR Product ID]=b.[PDR Product ID]
and a.[3 Digit Member ZIP Code]=b.[3 Digit Member ZIP Code]
and a.[Arrangement/Group Size Indicator]=b.[Arrangement/Group Size Indicator]
and a.[Claim Type]=b.[Claim Type]
and a.Gender=b.Gender
and a.[Age Bracket]=b.[Age Bracket]
and a.[Duration Bracket]=b.[Duration Bracket]
and a.[Plan Benefit Value - IC]=b.[Plan Benefit Value - IC]
and a.[Plan Benefit Value - ALL]=b.[Plan Benefit Value - ALL]
and a.[High Cost Claimant]=b.[High Cost Claimant]
and a.[Outpatient Type of Service]=b.[Outpatient Type of Service]
and a.[COVID-Related Indicator]=b.[COVID-Related Indicator]

SELECT  * from #a where round(act_diff,0)<>0
       


select 'Nonmultiplan subset' as [File_Name]
       ,sum([Actual Eligible Billed $ - Annual])   as billed
	,sum([Adjusted Eligible Billed $ - Annual])    as Adj_billed
from [xUDS_pmpm_2020CY].dbo.[NonMultiplan_change_final]
union all
select 'Original' as [File_Name]
       ,sum([Actual Eligible Billed $ - Annual])  as billed
	   ,sum([Adjusted Eligible Billed $ - Annual]) as Adj_billed
FROM OUTPUT_STD.[UDS PMPM - Claims Data_NonMultiplan] a
	  JOIN xuds_pmpm_2020CY.analytics.OON_NMP_factors b
	  on  a.[PDR Product ID]  =b.pdr_product_id
	  and a.[3 Digit Member ZIP Code]=b.zip3
	  and a.[Claim Type]=b.ctype
	  where b.mp_home ='Y'
	  and b.pdr_product_id not in (select distinct PDR_Product_ID from Reference.ref_tpv_factor_development   where TPV_nonTPV = 'Yes') 
	  and  [Benefit/Contract Status Indicator] in ('OX', 'OC')

/*****************************************************************************************DELETING OLD ORIGINAL AND INSERTING NEW MULITPLAN DATA**********************************************************************************************************************************************/
DROP TABLE IF EXISTS [dbo].[NonMultiplan_Deleted] 
SELECT TOP 0* INTO [dbo].[NonMultiplan_Deleted] 
FROM OUTPUT_STD.[UDS PMPM - Claims Data_NonMultiplan] a

DELETE a
OUTPUT DELETED.* 
INTO [dbo].[NonMultiplan_Deleted] --201,443
FROM OUTPUT_STD.[UDS PMPM - Claims Data_NonMultiplan] a
	  JOIN xuds_pmpm_2020CY.analytics.OON_NMP_factors b
	  on  a.[PDR Product ID]  =b.pdr_product_id
	  and a.[3 Digit Member ZIP Code]=b.zip3
	  and a.[Claim Type]=b.ctype
	  where b.mp_home ='Y'
	  and b.pdr_product_id not in (select distinct PDR_Product_ID from Reference.ref_tpv_factor_development   where TPV_nonTPV = 'Yes') 
	  and  [Benefit/Contract Status Indicator] in ('OX', 'OC')

/****Test 2****/
select 'nonmultiplan subset' as [File_Name]
         ,sum([Actual Eligible Billed $ - Annual]) as billed
	   ,sum([Adjusted Eligible Billed $ - Annual]) as Adj_billed
from  dbo.[NonMultiplan_change_final] 
UNION ALL
select 'DELETED' as [File_Name]
         ,sum([Actual Eligible Billed $ - Annual]) as billed
	   ,sum([Adjusted Eligible Billed $ - Annual]) as Adj_billed
from  [dbo].[NonMultiplan_Deleted]


/************************************************************************************************************************************************/
INSERT  INTO OUTPUT_STD.[UDS PMPM - Claims Data_NonMultiplan] 
SELECT * FROM  [dbo].[NonMultiplan_change_final]

select 'NonMultiplan' as [File_Name]
       ,sum([Actual Eligible Billed $ - Annual]) as AC_billed
	   ,sum([Adjusted Eligible Billed $ - Annual]) as Adj_billed
from  OUTPUT_STD.[UDS PMPM - Claims Data_NonMultiplan]  --NEW VALUES
UNION ALL
select 'Base Data' as [File_Name]
       ,sum([Actual Eligible Billed $ - Annual]) as AC_billed
	   ,sum([Adjusted Eligible Billed $ - Annual]) as Adj_billed
from  OUTPUT_STD.[UDS PMPM - Claims Data] 


/***keepin  the actual fields the same as in the base data.***************************************************************************************/
 update a
 set  a.[Actual Eligible Billed $ - Annual]=b.[Actual Eligible Billed $ - Annual]
     ,a.[Actual Eligible Billed $ - Q1]=b.[Actual Eligible Billed $ - Q1]
	 ,a.[Actual Eligible Billed $ - Q2]=b.[Actual Eligible Billed $ - Q2]
	 ,a.[Actual Eligible Billed $ - Q3]=b.[Actual Eligible Billed $ - Q3]
	 ,a.[Actual Eligible Billed $ - Q4]=b.[Actual Eligible Billed $ - Q4]
     ,a.[Actual Allowed $ - Annual]=b.[Actual Allowed $ - Annual]
	 ,a.[Actual Allowed $ - Q1]=b.[Actual Allowed $ - Q1]
	 ,a.[Actual Allowed $ - Q2]=b.[Actual Allowed $ - Q2]
	 ,a.[Actual Allowed $ - Q3]=b.[Actual Allowed $ - Q3]
	 ,a.[Actual Allowed $ - Q4]=b.[Actual Allowed $ - Q4]
	 ,a.[Actual Paid $ - Annual]=b.[Actual Paid $ - Annual]
	 ,a.[Actual Paid $ - Q1]=b.[Actual Paid $ - Q1]
	 ,a.[Actual Paid $ - Q2]=b.[Actual Paid $ - Q2]
	 ,a.[Actual Paid $ - Q3]=b.[Actual Paid $ - Q3]
	 ,a.[Actual Paid $ - Q4]=b.[Actual Paid $ - Q4]
	 ,a.[Actual Negotiated Savings $ - Annual]=b.[Actual Negotiated Savings $ - Annual]
	 ,a.[Actual Negotiated Savings $ - Q1] =b.[Actual Negotiated Savings $ - Q1]
     ,a.[Actual Negotiated Savings $ - Q2] =b.[Actual Negotiated Savings $ - Q2]
	 ,a.[Actual Negotiated Savings $ - Q3] =b.[Actual Negotiated Savings $ - Q3]
	 ,a.[Actual Negotiated Savings $ - Q4] =b.[Actual Negotiated Savings $ - Q4]
	 ,a.[Actual Reasonable and Customary Cutback $ - Annual]=b.[Actual Reasonable and Customary Cutback $ - Annual]
	 ,a.[Actual Reasonable and Customary Cutback $ - Q1]=b.[Actual Reasonable and Customary Cutback $ - Q1]
	 ,a.[Actual Reasonable and Customary Cutback $ - Q2]=b.[Actual Reasonable and Customary Cutback $ - Q2]
	 ,a.[Actual Reasonable and Customary Cutback $ - Q3]=b.[Actual Reasonable and Customary Cutback $ - Q3]
	 ,a.[Actual Reasonable and Customary Cutback $ - Q4]=b.[Actual Reasonable and Customary Cutback $ - Q4]
	 ,a.[Actual Number of Admissions]=b.[Actual Number of Admissions]
	 ,a.[Actual Count of Utilization]=isnull(b.[Actual Count of Utilization],0)
from  OUTPUT_STD.[UDS PMPM - Claims Data_NonMultiplan] a 
 left join    OUTPUT_STD.[UDS PMPM - Claims Data]  b 
on  a.[CHP Carrier ID]=b.[CHP Carrier ID]
and a.[PDR Product ID]=b.[PDR Product ID]
and a.[3 Digit Member ZIP Code]=b.[3 Digit Member ZIP Code]
and a.[Arrangement/Group Size Indicator]=b.[Arrangement/Group Size Indicator]
and a.[Claim Type]=b.[Claim Type]
and a.Gender=b.Gender
and a.[Age Bracket]=b.[Age Bracket]
and a.[Duration Bracket]=b.[Duration Bracket]
and a.[Plan Benefit Value - IC]=b.[Plan Benefit Value - IC]
and a.[Plan Benefit Value - ALL]=b.[Plan Benefit Value - ALL]
and a.[High Cost Claimant]=b.[High Cost Claimant]
and a.[Benefit/Contract Status Indicator]=b.[Benefit/Contract Status Indicator]
and isnull(a.[Outpatient Type of Service],'')=isnull(b.[Outpatient Type of Service],'')
and a.[COVID-Related Indicator]=b.[COVID-Related Indicator]


-------------------------TESTING--------------------------------------------------------------------------------------------
select 'NonMultiplan' as [File_Name]
       ,sum([Actual Eligible Billed $ - Annual]) as AC_billed
	   ,sum([Adjusted Eligible Billed $ - Annual]) as Adj_billed
	   ,sum([Actual Number of Admissions]) as ac_admit
	   ,sum([Adjusted Number of Admissions]) as aj_admit
	   ,sum([Actual Count of Utilization])   as ac_util
	   ,sum([Adjusted Count of Utilization] )as aj_util
	   ,sum([Actual Allowed $ - Annual]) as ac_allowed
	   ,sum([Adjusted Allowed $ - Annual]) as adj_allowed
	   ,sum([Actual Reasonable and Customary Cutback $ - Annual]) as ac_rnc
	   ,sum([Adjusted Reasonable and Customary Cutback $ - Annual]) as adj_rnc
	   ,sum([Actual Negotiated Savings $ - Annual]) as ac_savings
	   ,sum([Adjusted Negotiated Savings $ - Annual]) as adj_savings
	   ,sum([Actual Paid $ - Annual]) as ac_paid
	   ,sum([Adjusted Paid $ - Annual]) as adj_paid
from  OUTPUT_STD.[UDS PMPM - Claims Data_NonMultiplan] 
UNION ALL
select 'Base Data' as [File_Name]
       ,sum([Actual Eligible Billed $ - Annual]) as AC_billed
	   ,sum([Adjusted Eligible Billed $ - Annual]) as Adj_billed
	   ,sum([Actual Number of Admissions]) as ac_admit
	   ,sum([Adjusted Number of Admissions]) as aj_admit
	   ,sum([Actual Count of Utilization])   as ac_util
	   ,sum([Adjusted Count of Utilization] )as aj_util
	   ,sum([Actual Allowed $ - Annual]) as ac_allowed
	   ,sum([Adjusted Allowed $ - Annual]) as adj_allowed
	   ,sum([Actual Reasonable and Customary Cutback $ - Annual]) as ac_rnc
	   ,sum([Adjusted Reasonable and Customary Cutback $ - Annual]) as adj_rnc
	   ,sum([Actual Negotiated Savings $ - Annual]) as ac_savings
	   ,sum([Adjusted Negotiated Savings $ - Annual]) as adj_savings
	   ,sum([Actual Paid $ - Annual]) as ac_paid
	   ,sum([Adjusted Paid $ - Annual]) as adj_paid
from  OUTPUT_STD.[UDS PMPM - Claims Data] 




update a
set [Actual Eligible Billed $ - Annual]=0.00
    ,[Actual Eligible Billed $ - Q1]=0.00
    ,[Actual Eligible Billed $ - Q2]=0.00
    ,[Actual Eligible Billed $ - Q3]=0.00
    ,[Actual Eligible Billed $ - Q4]=0.00
    ,[Actual Allowed $ - Annual]=0.00
	,[Actual Allowed $ - Q1]=0.00
	,[Actual Allowed $ - Q2]=0.00
	,[Actual Allowed $ - Q3]=0.00
	,[Actual Allowed $ - Q4]=0.00
	,[Actual Paid $ - Annual]=0.00
	,[Actual Paid $ - Q1]=0.00
	,[Actual Paid $ - Q2]=0.00
	,[Actual Paid $ - Q3]=0.00
	,[Actual Paid $ - Q4]=0.00
	,[Actual Negotiated Savings $ - Annual]=0.00
	,[Actual Negotiated Savings $ - Q1]=0.00
	,[Actual Negotiated Savings $ - Q2]=0.00
	,[Actual Negotiated Savings $ - Q3]=0.00
	,[Actual Negotiated Savings $ - Q4]=0.00
	--,[Actual Count of Utilization]=0.00
	,[Actual Reasonable and Customary Cutback $ - Annual]=0.00
	,[Actual Reasonable and Customary Cutback $ - Q1]=0.00
	,[Actual Reasonable and Customary Cutback $ - Q2]=0.00
	,[Actual Reasonable and Customary Cutback $ - Q3]=0.00
	,[Actual Reasonable and Customary Cutback $ - Q4]=0.00
from  OUTPUT_STD.[UDS PMPM - Claims Data_NonMultiplan] a
where [Actual Eligible Billed $ - Annual] is null


----due to traceability horizon issue (snf claims reported as op with 0 IP days, flipped to inpatient claim type in trace and null admits)


select * from  OUTPUT_STD.[UDS PMPM - Claims Data_NonMultiplan] a
WHERE [Claim Type]='I'
AND [Actual Number of Admissions] is null
and [Actual Eligible Billed $ - Annual]=0

update OUTPUT_STD.[UDS PMPM - Claims Data_NonMultiplan]
set [Actual Number of Admissions]=0
where [Claim Type]='I'
and [Actual Number of Admissions] is null
and [Actual Eligible Billed $ - Annual]=0



select * from  OUTPUT_STD.[UDS PMPM - Claims Data_NonMultiplan] a
where [Claim Type]='I'
and [Adjusted Number of Admissions] =0
and [Adjusted Eligible Billed $ - Annual]>0
and [Benefit/Contract Status Indicator] in ('ox','oc')


select * from  OUTPUT_STD.[UDS PMPM - Claims Data] a
where [Claim Type]='I'
and [Actual Number of Admissions] =0
and [Actual Eligible Billed $ - Annual]>0
and [Benefit/Contract Status Indicator] in ('ox','oc')

select * from   OUTPUT_STD.[UDS PMPM - Claims Data_NonMultiplan] a
where [Actual Eligible Billed $ - Annual] =0

drop table if exists [xUDS_pmpm_2020CY].dbo.[NonMultiplan_change_final]
drop table if exists [dbo].[NonMultiplan_Deleted]

 END
GO
/****** Object:  StoredProcedure [log].[SpLogParameters]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--SP Main Logging 
/*
	ProcedureLogging JensS http://blogs.msdn.com/JensS v2 09.07.2010
	================================================================
	
	This is part of a logging solution doing simple logging in procedures, just inserting the data from the passed
	in parameters to the table and optionally updating the log entry to get the duration.
	
	The procedure will log the parameters to a table and will give the call the CallId back for eventually updating
	the log records with a EndCallTime to get the duration of the procedure call.
	
	SL 09-03-15 add procedure definition
*/
CREATE PROCEDURE [log].[SpLogParameters]
(
	@DatabaseName NVARCHAR(256),
	@ProcedureSchema NVARCHAR(256),
	@ProcedureName NVARCHAR(256),
	@ProcedureDefinition NVARCHAR(MAX),
	@LoggingParameters VARCHAR(MAX),
	@LoggingValues VARCHAR(MAX),
	@CallId INT OUTPUT
)
AS
BEGIN

SET NOCOUNT ON

INSERT INTO [Log].ProcedureExecutionLog
(
	DatabaseName,
	ProcedureSchema,
	ProcedureName,
	ProcedureDefinition,
	CallTime,
	CallingUser,
	CallingApplication,
	LoggingParameters,
	LoggingValues
)
SELECT 
	@DatabaseName,
	@ProcedureSchema,
	@ProcedureName,
	@ProcedureDefinition,
	GETDATE(),
	SYSTEM_USER,
	APP_NAME(),
	@LoggingParameters,
	@LoggingValues
	
SET @CallId = SCOPE_IDENTITY()

RETURN 

END

GO
/****** Object:  StoredProcedure [log].[SpLogTableRowCounts]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [log].[SpLogTableRowCounts]
(
	@CallId INT,
	@schema_name NVARCHAR(256),
	@table_name NVARCHAR(256),
	@row_count int
)
AS
BEGIN

SET NOCOUNT ON

INSERT INTO [Log].TableRowCounts
(
	CallId,
	SchemaName,
	TableName,
	CallTime,
	TableRowCount
)
SELECT 
	@CallId,
	@schema_name,
	@table_name,
	GETDATE(),
	@row_count
	
END

GO
/****** Object:  StoredProcedure [log].[SpUpdateLoggingForEndDate]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*
	ProcedureLogging JensS http://blogs.msdn.com/JensS v2 09.07.2010
	================================================================
	
	This is part of a logging solution doing simple logging in procedures, just inserting the data from the passed
	in parameters to the table and optionally updating the log entry to get the duration.
	
	Update procedure for updating the end of the procedure execution. This is called from the generated code in the
	procedures right at the end of the logged procedure.
*/

CREATE PROCEDURE [log].[SpUpdateLoggingForEndDate]
(
	@CallId INT
)
AS

SET NOCOUNT ON

UPDATE [Log].ProcedureExecutionLog
	SET EndCallTime = GETDATE()
WHERE CallId = @CallId


RETURN 


GO
/****** Object:  StoredProcedure [log].[usp_GetErrorInfo]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [log].[usp_GetErrorInfo]
AS


			DECLARE @ErrorNumber INT = ERROR_NUMBER();
			DECLARE @ErrorLine INT = ERROR_LINE();
			DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
			DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
			DECLARE @ErrorState INT = ERROR_STATE();
			DECLARE @crash_step varchar(255) =  cast(ERROR_PROCEDURE() as varchar(255))

INSERT INTO log.ProcedureErrorLog
(ErrorNumber,
ErrorSeverity,
ErrorState,
ErrorProcedure,
Errorline,
ErrorMessage,
CurrentTime
)
SELECT  
        @ErrorNumber,
        @ErrorSeverity,
        @ErrorState,
        @crash_step,
        @ErrorLine,
        @ErrorMessage,
		getdate()  as CurrentTime




			RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
GO
/****** Object:  StoredProcedure [reference].[Group Exclusions]    Script Date: 2/24/2022 9:18:42 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ==========================================================
-- Author:		Tola Kalejaiye
-- Create date: May 02,2020
-- Description:	compile list of group exclusions from xclaims
-- =========================================================
CREATE PROCEDURE [reference].[Group Exclusions]
AS
BEGIN

DECLARE
@SQL NVARCHAR (MAX),
@SCHEMA_NAME VARCHAR (20)

DROP TABLE IF EXISTS [Reference].[Exclusion_by_groups_Standard_and_Custom]
CREATE TABLE [Reference].[Exclusion_by_groups_Standard_and_Custom](
	[plan_name] [varchar](255) NULL,
	[chp_carrier_id] [varchar](255) NULL,
	[exclusion_category] [varchar](255) NULL,
	[field_type] [varchar](255) NULL,
	[group_account_id] [varchar](255) NULL,
	[group_account_name] [varchar](255) NULL,
	[custom_network_arrangement] [VARCHAR] (10) NULL,
	[exclusion_flag] [varchar](255) NULL,
	[comments] [varchar] (255) NULL,
	[Note] [varchar] (255) NULL,
	Update_Time datetime 
)
DECLARE CUR_SCHEMA CURSOR FOR
SELECT 	[SCHEMA_NAME]
	FROM process.data_status_tracking  a
	 WHERE include_in_uds_pmpm = 1
	 and exists (select * from xclaims.INFORMATION_SCHEMA.tables where table_name = 'Load_Raw_Group_Exclusion' and TABLE_SCHEMA = a.schema_name)

OPEN CUR_SCHEMA
FETCH NEXT FROM CUR_SCHEMA
INTO @SCHEMA_NAME

WHILE @@FETCH_STATUS = 0
BEGIN

SET @SQL='INSERT INTO [Reference].[Exclusion_by_groups_Standard_and_Custom] WITH (TABLOCK)
SELECT *
       ,getdate() as update_time
FROM xclaims.'+@SCHEMA_NAME+'.Load_Raw_Group_Exclusion
where (exclusion_flag  =''y'' or exclusion_flag is null)

'
EXEC(@SQL)
Print (@SQL)

 FETCH NEXT FROM CUR_SCHEMA 
 INTO @SCHEMA_NAME
 END
 CLOSE CUR_SCHEMA
 DEALLOCATE CUR_SCHEMA


-- ---CY20 Outliers for Horizon--------------------------------------------------
insert into [Reference].[Exclusion_by_groups_Standard_and_Custom]
values    ('Horizon BCBS', '880', 'Custom',   'Group ID',   '095503',   'NJ DIRECT ZERO - SEHBP EDUCATION ACTIVES', 'Y', 'Y', 'outlier', cast(NULL as nvarchar(225)),  getdate()),
          ('Horizon BCBS', '880', 'Custom',   'Group ID',   '091500',    'SHBP', 'Y', 'Y', 'outlier', cast(NULL as nvarchar(225)),  getdate()),
          ('Horizon BCBS', '880', 'Custom',   'Group ID',   '090500',    'SHBP', 'Y', 'Y', 'outlier', cast(NULL as nvarchar(225)),  getdate()),
          ('Horizon BCBS', '880', 'Custom',   'Group ID',   '093500',    'SHBP', 'Y', 'Y', 'outlier', cast(NULL as nvarchar(225)),  getdate()),
          ('Horizon BCBS', '880', 'Custom',   'Group ID',   '092500',    'SHBP', 'Y', 'Y', 'outlier', cast(NULL as nvarchar(225)),  getdate()),
          ('Horizon BCBS', '880', 'Custom',   'Group ID',   '095502',    'SHBP OMINIA- STATE LOCAL GOVERMENT', 'Y', 'Y', 'outlier', cast(NULL as nvarchar(225)),  getdate()),
          ('Horizon BCBS', '880', 'Custom',   'Group ID',   '095501',    'SHBP OMNIA - STATE BIWEEKLY ACTIVES', 'Y', 'Y', 'outlier', cast(NULL as nvarchar(225)),  getdate()),
          ('Horizon BCBS', '880', 'Custom',   'Group ID',   '095500',    'SHBP OMNIA - STATE MONTHLY ACTIVES', 'Y', 'Y', 'outlier', cast(NULL as nvarchar(225)),  getdate()),
          ('Horizon BCBS', '880', 'Custom',   'Group ID',   '090700',    'CWA UNITY DIRECT F/T SHBP', 'Y', 'Y', 'outlier', cast(NULL as nvarchar(225)),  getdate()),
          ('Horizon BCBS', '880', 'Custom',   'Group ID',   '091700',    'CWA UNITY DIRECT F/T SHBP', 'Y', 'Y', 'outlier', cast(NULL as nvarchar(225)),  getdate()),
          ('Horizon BCBS', '880', 'Custom',   'Group ID',   '092700',    'NJ DIRECT SHBP LOCAL ACTIVES FULL TIME', 'Y', 'Y', 'outlier', cast(NULL as nvarchar(225)),  getdate()),
		  ('Horizon BCBS', '880', 'Custom',   'Group ID',	'076057',    'DISTRICT 1199J NJ BENEFIT FUND', 'N', 'Y', 'outlier', cast(NULL as nvarchar(225)),  getdate())

--per Danielle, these are horizon groups in NJB1 with members but no claims at all
insert into [Reference].[Exclusion_by_groups_Standard_and_Custom]
values    ('Horizon BCBS', '880', 'Custom',   'Group ID',   '076139',   'PLUMBERS & PIPEFITTERS', 'Y', 'Y', 'Group with no claims', cast(NULL as nvarchar(225)),  getdate()),
          ('Horizon BCBS', '880', 'Custom',   'Group ID',   '076163',    'IBEW LOCAL 351 HEALTH AND', 'Y', 'Y', 'Group with no claims', cast(NULL as nvarchar(225)),  getdate()),
          ('Horizon BCBS', '880', 'Custom',   'Group ID',   '076172',    'IBEW LOCAL 456 H & W FUND', 'Y', 'Y', 'Group with no claims', cast(NULL as nvarchar(225)),  getdate())

-- --CY20 per email 'BCBS Kansas - CY2020 ValueQuest Preliminary and Projected Discount Results' the plan decided to exclude these groups
insert into [Reference].[Exclusion_by_groups_Standard_and_Custom]
values    ('BCBS KS',    '906',    'Hospital',    'Group ID',    '9609401',    'HUTCHINSON CLINIC PHYSICIANS AND SHAREHOLDERS',    'Y',    'Y',    'Cancelled 10.20.2020',    cast(NULL as nvarchar(225)),    getdate()),
          ('BCBS KS',    '906',    'Hospital',    'Group ID',    '9609402',    'HUTCHINSON CLINIC PHYSICIANS AND SHAREHOLDERS',    'Y',    'Y',    'Cancelled 10.20.2020',    cast(NULL as nvarchar(225)),    getdate()),
          ('BCBS KS',    '906',    'Hospital',    'Group ID',    '9609407',    'HUTCHINSON CLINIC HOSPITALIST',                    'Y',    'Y',    'Cancelled 10.20.2020',    cast(NULL as nvarchar(225)),    getdate()),
          ('BCBS KS',    '906',    'Hospital',    'Group ID',    '9609408',    'HUTCHINSON CLINIC HOSPITALISTS',                   'Y',    'Y',    'Cancelled 10.20.2020',    cast(NULL as nvarchar(225)),    getdate()),
          ('BCBS KS',    '906',    'Hospital',    'Group ID',    '9609D02',    'HUTCHINSON CLINIC PHYSICIANS AND SHAREHOLDERS',    'Y',    'Y',    'Cancelled 10.20.2020',    cast(NULL as nvarchar(225)),    getdate())

 --CY20  per plan
insert into [Reference].[Exclusion_by_groups_Standard_and_Custom]
values    ('BCBS MN',    '911',    'Custom',    'Account ID',    '179991',    'Hormel Foods Corp.',    'N',    'Y',    'On-Site Clinics',    cast(NULL as nvarchar(225)),    getdate())


--CY20 per email from plan
insert into [Reference].[Exclusion_by_groups_Standard_and_Custom]
values    ('BCBS NC',    '940',    'Custom',    'Account ID',    '112092',    'TRUIST',    'N',    'Y',    'drug-only groups and have no medical benefits',    cast(NULL as nvarchar(225)),    getdate())

--CY20 per plan. Groups that termed out and should not have been submiited
insert into [Reference].[Exclusion_by_groups_Standard_and_Custom]
values    ('BCBS TN', '950', 'Custom',   'Account ID',   '00112',   'Clayton Homes', 'N', 'Y', 'Group termed', cast(NULL as nvarchar(225)),  getdate()),
          ('BCBS TN', '950', 'Custom',   'Account ID',   '00366',    'Darling Ingredients Inc', 'N', 'Y', 'Group Termed', cast(NULL as nvarchar(225)),  getdate()),
          ('BCBS TN', '950', 'Custom',   'Account ID',   '00457',    'Vanderbilt University', 'N', 'Y', 'Group Termed', cast(NULL as nvarchar(225)),  getdate()),
          ('BCBS TN', '950', 'Custom',   'Account ID',   '18903',    'Bobrick Washroom Equipment Inc', 'N', 'Y', 'Group Termed', cast(NULL as nvarchar(225)),  getdate()),
          ('BCBS TN', '950', 'Custom',   'Account ID',   '21950',    'Surgery Partners Inc', 'N', 'Y', 'Group Termed', cast(NULL as nvarchar(225)),  getdate()),
          ('BCBS TN', '950', 'Custom',   'Account ID',   '26980',    'Envision Healthcare Corporation', 'Y', 'Y', 'Group Termed', cast(NULL as nvarchar(225)),  getdate()),
          ('BCBS TN', '950', 'Custom',   'Account ID',   '27050',    'ChanceLight Inc', 'N', 'Y', 'Group Termed', cast(NULL as nvarchar(225)),  getdate()),
          ('BCBS TN', '950', 'Custom',   'Account ID',   '28073',    'Erlanger Health System', 'N', 'Y', 'Group Termed', cast(NULL as nvarchar(225)),  getdate()),
          ('BCBS TN', '950', 'Custom',   'Account ID',   '33566',    'Peoples Home Equity Inc', 'N', 'Y', 'Group Termed', cast(NULL as nvarchar(225)),  getdate()),
          ('BCBS TN', '950', 'Custom',   'Account ID',   '40212',    'Health Tech LLC', 'N', 'Y', 'Group Termed', cast(NULL as nvarchar(225)),  getdate()),
          ('BCBS TN', '950', 'Custom',   'Account ID',   '41158',    'Grace Healthcare', 'N', 'Y', 'Group Termed', cast(NULL as nvarchar(225)),  getdate()),
		  ('BCBS TN', '950', 'Custom',   'Account ID',	 '44948',    'PharmMD Solutions LLC', 'N', 'Y', 'Group Termed', cast(NULL as nvarchar(225)),  getdate()),
		  ('BCBS TN', '950', 'Custom',   'Account ID',   '50221',    'LHP Management LLC', 'N', 'Y', 'Group Termed', cast(NULL as nvarchar(225)),  getdate()),
          ('BCBS TN', '950', 'Custom',   'Account ID',   '55986',    'Steward Health Care System LLC', 'N', 'Y', 'Group Termed', cast(NULL as nvarchar(225)),  getdate()),
          ('BCBS TN', '950', 'Custom',   'Account ID',   '600219',    'Digital Reasoning Systems Inc', 'N', 'Y', 'Group Termed', cast(NULL as nvarchar(225)),  getdate()),
		  ('BCBS TN', '950', 'Custom',   'Account ID',	 '605875',    'Smile Direct Club LLC', 'N', 'Y', 'Group Termed', cast(NULL as nvarchar(225)),  getdate())


----------------delete duplicates----------------------------------------------------------------------------
;WITH cte AS (
    SELECT 
        chp_carrier_id, 
        group_account_id,  
        ROW_NUMBER() OVER (PARTITION BY  chp_carrier_id, group_account_id
         ORDER BY  chp_carrier_id, group_account_id) row_num
   FROM [Reference].[Exclusion_by_groups_Standard_and_Custom]
)
DELETE FROM cte
WHERE row_num > 1 or chp_carrier_id is null ;


---Excluding the same groups for Premera WA to Premera AK --Per Danielle (11/23/21)
Drop table if exists #a
Select *  into #a from reference.Exclusion_by_groups_Standard_and_Custom where chp_carrier_id=1017
Update #a
set chp_carrier_id=1395

Insert into reference.Exclusion_by_groups_Standard_and_Custom
select * from #a


--select * from reference.Exclusion_by_groups_Standard_and_Custom where chp_carrier_id in (1017, 1395)

---Check for duplicates
select * from reference.Exclusion_by_groups_Standard_and_Custom a
where exists (select * from
(select chp_carrier_id, group_account_id
from reference.Exclusion_by_groups_Standard_and_Custom
group by chp_carrier_id, group_account_id
having count(*) > 1) b 
where b.chp_carrier_id = a.chp_carrier_id 
and b.group_account_id = a.group_account_id)



-----------standardize exclusion reason
 update reference.Exclusion_by_groups_Standard_and_Custom
set [exclusion_category]='Custom'
where [exclusion_category] in ('Other','Heavy Construction','Custom Group')

update reference.Exclusion_by_groups_Standard_and_Custom
set [exclusion_category]='Physician Group'
where [exclusion_category] in ('MEDICAL PROVIDER','Medical Provider Group','Medical Group' )

update reference.Exclusion_by_groups_Standard_and_Custom
set [exclusion_category]='Student Group'
where [exclusion_category]='Student Groups'

update reference.Exclusion_by_groups_Standard_and_Custom
set [exclusion_category]='Hospital'
where group_account_name='MCPHERSON HOSPITAL'






END


GO
